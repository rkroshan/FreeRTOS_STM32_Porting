
FreeRTOS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800360c  0800360c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800360c  0800360c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800360c  0800360c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dd4  20000030  08003644  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e04  08003644  00022e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad57  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000183d  00000000  00000000  0002adb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002cf08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d92  00000000  00000000  0002d760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076a7  00000000  00000000  0002f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bba9  00000000  00000000  00036b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a2742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002614  00000000  00000000  000a27c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000030 	.word	0x20000030
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800356c 	.word	0x0800356c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000034 	.word	0x20000034
 800020c:	0800356c 	.word	0x0800356c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f103 0208 	add.w	r2, r3, #8
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f103 0208 	add.w	r2, r3, #8
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f103 0208 	add.w	r2, r3, #8
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr

08000260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2200      	movs	r2, #0
 800026c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr

0800027a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800027a:	b480      	push	{r7}
 800027c:	b085      	sub	sp, #20
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
 8000282:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	68fa      	ldr	r2, [r7, #12]
 800028e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	689a      	ldr	r2, [r3, #8]
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	683a      	ldr	r2, [r7, #0]
 800029e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	683a      	ldr	r2, [r7, #0]
 80002a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	687a      	ldr	r2, [r7, #4]
 80002aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	1c5a      	adds	r2, r3, #1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002c2:	b480      	push	{r7}
 80002c4:	b085      	sub	sp, #20
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
 80002ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002d8:	d103      	bne.n	80002e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	e00c      	b.n	80002fc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3308      	adds	r3, #8
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	e002      	b.n	80002f0 <vListInsert+0x2e>
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d2f6      	bcs.n	80002ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	685a      	ldr	r2, [r3, #4]
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	683a      	ldr	r2, [r7, #0]
 8000316:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	601a      	str	r2, [r3, #0]
}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6892      	ldr	r2, [r2, #8]
 800034a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	6852      	ldr	r2, [r2, #4]
 8000354:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	687a      	ldr	r2, [r7, #4]
 800035c:	429a      	cmp	r2, r3
 800035e:	d103      	bne.n	8000368 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681b      	ldr	r3, [r3, #0]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d109      	bne.n	80003b0 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800039c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003a0:	f383 8811 	msr	BASEPRI, r3
 80003a4:	f3bf 8f6f 	isb	sy
 80003a8:	f3bf 8f4f 	dsb	sy
 80003ac:	60bb      	str	r3, [r7, #8]
 80003ae:	e7fe      	b.n	80003ae <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 80003b0:	f001 ff66 	bl	8002280 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003bc:	68f9      	ldr	r1, [r7, #12]
 80003be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003c0:	fb01 f303 	mul.w	r3, r1, r3
 80003c4:	441a      	add	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	2200      	movs	r2, #0
 80003ce:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	681a      	ldr	r2, [r3, #0]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003e0:	3b01      	subs	r3, #1
 80003e2:	68f9      	ldr	r1, [r7, #12]
 80003e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003e6:	fb01 f303 	mul.w	r3, r1, r3
 80003ea:	441a      	add	r2, r3
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	22ff      	movs	r2, #255	; 0xff
 80003f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	22ff      	movs	r2, #255	; 0xff
 80003fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d114      	bne.n	8000430 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d01a      	beq.n	8000444 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3310      	adds	r3, #16
 8000412:	4618      	mov	r0, r3
 8000414:	f001 f86a 	bl	80014ec <xTaskRemoveFromEventList>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d012      	beq.n	8000444 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <xQueueGenericReset+0xcc>)
 8000420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	f3bf 8f4f 	dsb	sy
 800042a:	f3bf 8f6f 	isb	sy
 800042e:	e009      	b.n	8000444 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3310      	adds	r3, #16
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fef3 	bl	8000220 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3324      	adds	r3, #36	; 0x24
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff feee 	bl	8000220 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000444:	f001 ff4a 	bl	80022dc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000448:	2301      	movs	r3, #1
}
 800044a:	4618      	mov	r0, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	e000ed04 	.word	0xe000ed04

08000458 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000458:	b580      	push	{r7, lr}
 800045a:	b08c      	sub	sp, #48	; 0x30
 800045c:	af02      	add	r7, sp, #8
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	4613      	mov	r3, r2
 8000464:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d109      	bne.n	8000480 <xQueueGenericCreate+0x28>
 800046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000470:	f383 8811 	msr	BASEPRI, r3
 8000474:	f3bf 8f6f 	isb	sy
 8000478:	f3bf 8f4f 	dsb	sy
 800047c:	61bb      	str	r3, [r7, #24]
 800047e:	e7fe      	b.n	800047e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	fb02 f303 	mul.w	r3, r2, r3
 8000488:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d006      	beq.n	800049e <xQueueGenericCreate+0x46>
 8000490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	fbb2 f3f3 	udiv	r3, r2, r3
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	429a      	cmp	r2, r3
 800049c:	d101      	bne.n	80004a2 <xQueueGenericCreate+0x4a>
 800049e:	2301      	movs	r3, #1
 80004a0:	e000      	b.n	80004a4 <xQueueGenericCreate+0x4c>
 80004a2:	2300      	movs	r3, #0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d109      	bne.n	80004bc <xQueueGenericCreate+0x64>
 80004a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004ac:	f383 8811 	msr	BASEPRI, r3
 80004b0:	f3bf 8f6f 	isb	sy
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	e7fe      	b.n	80004ba <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80004bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004be:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80004c2:	d909      	bls.n	80004d8 <xQueueGenericCreate+0x80>
 80004c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c8:	f383 8811 	msr	BASEPRI, r3
 80004cc:	f3bf 8f6f 	isb	sy
 80004d0:	f3bf 8f4f 	dsb	sy
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	e7fe      	b.n	80004d6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004da:	3350      	adds	r3, #80	; 0x50
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 ffe9 	bl	80024b4 <pvPortMalloc>
 80004e2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80004e4:	6a3b      	ldr	r3, [r7, #32]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00d      	beq.n	8000506 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004ea:	6a3b      	ldr	r3, [r7, #32]
 80004ec:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	3350      	adds	r3, #80	; 0x50
 80004f2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004f4:	79fa      	ldrb	r2, [r7, #7]
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	4613      	mov	r3, r2
 80004fc:	69fa      	ldr	r2, [r7, #28]
 80004fe:	68b9      	ldr	r1, [r7, #8]
 8000500:	68f8      	ldr	r0, [r7, #12]
 8000502:	f000 f805 	bl	8000510 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000506:	6a3b      	ldr	r3, [r7, #32]
    }
 8000508:	4618      	mov	r0, r3
 800050a:	3728      	adds	r7, #40	; 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d103      	bne.n	800052c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000524:	69bb      	ldr	r3, [r7, #24]
 8000526:	69ba      	ldr	r2, [r7, #24]
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e002      	b.n	8000532 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000538:	69bb      	ldr	r3, [r7, #24]
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800053e:	2101      	movs	r1, #1
 8000540:	69b8      	ldr	r0, [r7, #24]
 8000542:	f7ff ff21 	bl	8000388 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000546:	69bb      	ldr	r3, [r7, #24]
 8000548:	78fa      	ldrb	r2, [r7, #3]
 800054a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08e      	sub	sp, #56	; 0x38
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000566:	2300      	movs	r3, #0
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000570:	2b00      	cmp	r3, #0
 8000572:	d109      	bne.n	8000588 <xQueueGenericSend+0x30>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
 8000586:	e7fe      	b.n	8000586 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d103      	bne.n	8000596 <xQueueGenericSend+0x3e>
 800058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	2b00      	cmp	r3, #0
 8000594:	d101      	bne.n	800059a <xQueueGenericSend+0x42>
 8000596:	2301      	movs	r3, #1
 8000598:	e000      	b.n	800059c <xQueueGenericSend+0x44>
 800059a:	2300      	movs	r3, #0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d109      	bne.n	80005b4 <xQueueGenericSend+0x5c>
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
 80005b2:	e7fe      	b.n	80005b2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d103      	bne.n	80005c2 <xQueueGenericSend+0x6a>
 80005ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d101      	bne.n	80005c6 <xQueueGenericSend+0x6e>
 80005c2:	2301      	movs	r3, #1
 80005c4:	e000      	b.n	80005c8 <xQueueGenericSend+0x70>
 80005c6:	2300      	movs	r3, #0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d109      	bne.n	80005e0 <xQueueGenericSend+0x88>
 80005cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	623b      	str	r3, [r7, #32]
 80005de:	e7fe      	b.n	80005de <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80005e0:	f001 f91c 	bl	800181c <xTaskGetSchedulerState>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d102      	bne.n	80005f0 <xQueueGenericSend+0x98>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d101      	bne.n	80005f4 <xQueueGenericSend+0x9c>
 80005f0:	2301      	movs	r3, #1
 80005f2:	e000      	b.n	80005f6 <xQueueGenericSend+0x9e>
 80005f4:	2300      	movs	r3, #0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d109      	bne.n	800060e <xQueueGenericSend+0xb6>
 80005fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fe:	f383 8811 	msr	BASEPRI, r3
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	e7fe      	b.n	800060c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800060e:	f001 fe37 	bl	8002280 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800061a:	429a      	cmp	r2, r3
 800061c:	d302      	bcc.n	8000624 <xQueueGenericSend+0xcc>
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d129      	bne.n	8000678 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	68b9      	ldr	r1, [r7, #8]
 8000628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800062a:	f000 fa11 	bl	8000a50 <prvCopyDataToQueue>
 800062e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000634:	2b00      	cmp	r3, #0
 8000636:	d010      	beq.n	800065a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	3324      	adds	r3, #36	; 0x24
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ff55 	bl	80014ec <xTaskRemoveFromEventList>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d013      	beq.n	8000670 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000648:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <xQueueGenericSend+0x1f0>)
 800064a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	f3bf 8f4f 	dsb	sy
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	e00a      	b.n	8000670 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <xQueueGenericSend+0x1f0>)
 8000662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	f3bf 8f4f 	dsb	sy
 800066c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000670:	f001 fe34 	bl	80022dc <vPortExitCritical>
                return pdPASS;
 8000674:	2301      	movs	r3, #1
 8000676:	e063      	b.n	8000740 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800067e:	f001 fe2d 	bl	80022dc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000682:	2300      	movs	r3, #0
 8000684:	e05c      	b.n	8000740 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000688:	2b00      	cmp	r3, #0
 800068a:	d106      	bne.n	800069a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4618      	mov	r0, r3
 8000692:	f000 ff8d 	bl	80015b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000696:	2301      	movs	r3, #1
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800069a:	f001 fe1f 	bl	80022dc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800069e:	f000 fd0b 	bl	80010b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80006a2:	f001 fded 	bl	8002280 <vPortEnterCritical>
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b2:	d103      	bne.n	80006bc <xQueueGenericSend+0x164>
 80006b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b6:	2200      	movs	r2, #0
 80006b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80006bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006c8:	d103      	bne.n	80006d2 <xQueueGenericSend+0x17a>
 80006ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80006d2:	f001 fe03 	bl	80022dc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4611      	mov	r1, r2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff7c 	bl	80015dc <xTaskCheckForTimeOut>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d124      	bne.n	8000734 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80006ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006ec:	f000 faa8 	bl	8000c40 <prvIsQueueFull>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d018      	beq.n	8000728 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	3310      	adds	r3, #16
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fea6 	bl	8001450 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000706:	f000 fa33 	bl	8000b70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800070a:	f000 fce3 	bl	80010d4 <xTaskResumeAll>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	f47f af7c 	bne.w	800060e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <xQueueGenericSend+0x1f0>)
 8000718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	f3bf 8f4f 	dsb	sy
 8000722:	f3bf 8f6f 	isb	sy
 8000726:	e772      	b.n	800060e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800072a:	f000 fa21 	bl	8000b70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800072e:	f000 fcd1 	bl	80010d4 <xTaskResumeAll>
 8000732:	e76c      	b.n	800060e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000736:	f000 fa1b 	bl	8000b70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800073a:	f000 fccb 	bl	80010d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800073e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000740:	4618      	mov	r0, r3
 8000742:	3738      	adds	r7, #56	; 0x38
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	e000ed04 	.word	0xe000ed04

0800074c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
 8000758:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800075e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000760:	2b00      	cmp	r3, #0
 8000762:	d109      	bne.n	8000778 <xQueueGenericSendFromISR+0x2c>
 8000764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
 8000776:	e7fe      	b.n	8000776 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d103      	bne.n	8000786 <xQueueGenericSendFromISR+0x3a>
 800077e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	2b00      	cmp	r3, #0
 8000784:	d101      	bne.n	800078a <xQueueGenericSendFromISR+0x3e>
 8000786:	2301      	movs	r3, #1
 8000788:	e000      	b.n	800078c <xQueueGenericSendFromISR+0x40>
 800078a:	2300      	movs	r3, #0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d109      	bne.n	80007a4 <xQueueGenericSendFromISR+0x58>
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
 80007a2:	e7fe      	b.n	80007a2 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d103      	bne.n	80007b2 <xQueueGenericSendFromISR+0x66>
 80007aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d101      	bne.n	80007b6 <xQueueGenericSendFromISR+0x6a>
 80007b2:	2301      	movs	r3, #1
 80007b4:	e000      	b.n	80007b8 <xQueueGenericSendFromISR+0x6c>
 80007b6:	2300      	movs	r3, #0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d109      	bne.n	80007d0 <xQueueGenericSendFromISR+0x84>
 80007bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007c0:	f383 8811 	msr	BASEPRI, r3
 80007c4:	f3bf 8f6f 	isb	sy
 80007c8:	f3bf 8f4f 	dsb	sy
 80007cc:	623b      	str	r3, [r7, #32]
 80007ce:	e7fe      	b.n	80007ce <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80007d0:	f001 fe32 	bl	8002438 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80007d4:	f3ef 8211 	mrs	r2, BASEPRI
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	f383 8811 	msr	BASEPRI, r3
 80007e0:	f3bf 8f6f 	isb	sy
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	61fa      	str	r2, [r7, #28]
 80007ea:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80007ec:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80007f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d302      	bcc.n	8000802 <xQueueGenericSendFromISR+0xb6>
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d13d      	bne.n	800087e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800080e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000818:	f000 f91a 	bl	8000a50 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800081c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000824:	d112      	bne.n	800084c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	2b00      	cmp	r3, #0
 800082c:	d024      	beq.n	8000878 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800082e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000830:	3324      	adds	r3, #36	; 0x24
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fe5a 	bl	80014ec <xTaskRemoveFromEventList>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d01c      	beq.n	8000878 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	e015      	b.n	8000878 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800084c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000850:	2b7f      	cmp	r3, #127	; 0x7f
 8000852:	d109      	bne.n	8000868 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e7fe      	b.n	8000866 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800086c:	3301      	adds	r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	b25a      	sxtb	r2, r3
 8000872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000878:	2301      	movs	r3, #1
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800087c:	e001      	b.n	8000882 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800087e:	2300      	movs	r3, #0
 8000880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000884:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800088c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800088e:	4618      	mov	r0, r3
 8000890:	3740      	adds	r7, #64	; 0x40
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d109      	bne.n	80008c6 <xQueueReceive+0x2e>
        __asm volatile
 80008b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b6:	f383 8811 	msr	BASEPRI, r3
 80008ba:	f3bf 8f6f 	isb	sy
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	623b      	str	r3, [r7, #32]
 80008c4:	e7fe      	b.n	80008c4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <xQueueReceive+0x3c>
 80008cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <xQueueReceive+0x40>
 80008d4:	2301      	movs	r3, #1
 80008d6:	e000      	b.n	80008da <xQueueReceive+0x42>
 80008d8:	2300      	movs	r3, #0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d109      	bne.n	80008f2 <xQueueReceive+0x5a>
 80008de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e2:	f383 8811 	msr	BASEPRI, r3
 80008e6:	f3bf 8f6f 	isb	sy
 80008ea:	f3bf 8f4f 	dsb	sy
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	e7fe      	b.n	80008f0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008f2:	f000 ff93 	bl	800181c <xTaskGetSchedulerState>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <xQueueReceive+0x6a>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <xQueueReceive+0x6e>
 8000902:	2301      	movs	r3, #1
 8000904:	e000      	b.n	8000908 <xQueueReceive+0x70>
 8000906:	2300      	movs	r3, #0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d109      	bne.n	8000920 <xQueueReceive+0x88>
 800090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000910:	f383 8811 	msr	BASEPRI, r3
 8000914:	f3bf 8f6f 	isb	sy
 8000918:	f3bf 8f4f 	dsb	sy
 800091c:	61bb      	str	r3, [r7, #24]
 800091e:	e7fe      	b.n	800091e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000920:	f001 fcae 	bl	8002280 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000928:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	2b00      	cmp	r3, #0
 800092e:	d01f      	beq.n	8000970 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000934:	f000 f8f6 	bl	8000b24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	1e5a      	subs	r2, r3, #1
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00f      	beq.n	8000968 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	3310      	adds	r3, #16
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fdcd 	bl	80014ec <xTaskRemoveFromEventList>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d007      	beq.n	8000968 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000958:	4b3c      	ldr	r3, [pc, #240]	; (8000a4c <xQueueReceive+0x1b4>)
 800095a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000968:	f001 fcb8 	bl	80022dc <vPortExitCritical>
                return pdPASS;
 800096c:	2301      	movs	r3, #1
 800096e:	e069      	b.n	8000a44 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000976:	f001 fcb1 	bl	80022dc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800097a:	2300      	movs	r3, #0
 800097c:	e062      	b.n	8000a44 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000980:	2b00      	cmp	r3, #0
 8000982:	d106      	bne.n	8000992 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fe11 	bl	80015b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800098e:	2301      	movs	r3, #1
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000992:	f001 fca3 	bl	80022dc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000996:	f000 fb8f 	bl	80010b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800099a:	f001 fc71 	bl	8002280 <vPortEnterCritical>
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009aa:	d103      	bne.n	80009b4 <xQueueReceive+0x11c>
 80009ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009c0:	d103      	bne.n	80009ca <xQueueReceive+0x132>
 80009c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009ca:	f001 fc87 	bl	80022dc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009ce:	1d3a      	adds	r2, r7, #4
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fe00 	bl	80015dc <xTaskCheckForTimeOut>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d123      	bne.n	8000a2a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009e4:	f000 f916 	bl	8000c14 <prvIsQueueEmpty>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d017      	beq.n	8000a1e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	3324      	adds	r3, #36	; 0x24
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fd2a 	bl	8001450 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009fe:	f000 f8b7 	bl	8000b70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000a02:	f000 fb67 	bl	80010d4 <xTaskResumeAll>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d189      	bne.n	8000920 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <xQueueReceive+0x1b4>)
 8000a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	f3bf 8f6f 	isb	sy
 8000a1c:	e780      	b.n	8000920 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a20:	f000 f8a6 	bl	8000b70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a24:	f000 fb56 	bl	80010d4 <xTaskResumeAll>
 8000a28:	e77a      	b.n	8000920 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a2c:	f000 f8a0 	bl	8000b70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a30:	f000 fb50 	bl	80010d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a36:	f000 f8ed 	bl	8000c14 <prvIsQueueEmpty>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af6f 	beq.w	8000920 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000a42:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3730      	adds	r7, #48	; 0x30
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10d      	bne.n	8000a8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d14d      	bne.n	8000b12 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 feec 	bl	8001858 <xTaskPriorityDisinherit>
 8000a80:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	e043      	b.n	8000b12 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d119      	bne.n	8000ac4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	6858      	ldr	r0, [r3, #4]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	461a      	mov	r2, r3
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	f002 fd52 	bl	8003544 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	441a      	add	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d32b      	bcc.n	8000b12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	e026      	b.n	8000b12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68d8      	ldr	r0, [r3, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	461a      	mov	r2, r3
 8000ace:	68b9      	ldr	r1, [r7, #8]
 8000ad0:	f002 fd38 	bl	8003544 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	425b      	negs	r3, r3
 8000ade:	441a      	add	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	689a      	ldr	r2, [r3, #8]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	425b      	negs	r3, r3
 8000afa:	441a      	add	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d105      	bne.n	8000b12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000b1a:	697b      	ldr	r3, [r7, #20]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d018      	beq.n	8000b68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	441a      	add	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d303      	bcc.n	8000b58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68d9      	ldr	r1, [r3, #12]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	461a      	mov	r2, r3
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f002 fcee 	bl	8003544 <memcpy>
    }
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b78:	f001 fb82 	bl	8002280 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b84:	e011      	b.n	8000baa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d012      	beq.n	8000bb4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3324      	adds	r3, #36	; 0x24
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fcaa 	bl	80014ec <xTaskRemoveFromEventList>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000b9e:	f000 fd81 	bl	80016a4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	dce9      	bgt.n	8000b86 <prvUnlockQueue+0x16>
 8000bb2:	e000      	b.n	8000bb6 <prvUnlockQueue+0x46>
                        break;
 8000bb4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	22ff      	movs	r2, #255	; 0xff
 8000bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000bbe:	f001 fb8d 	bl	80022dc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000bc2:	f001 fb5d 	bl	8002280 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bcc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bce:	e011      	b.n	8000bf4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d012      	beq.n	8000bfe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3310      	adds	r3, #16
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fc85 	bl	80014ec <xTaskRemoveFromEventList>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000be8:	f000 fd5c 	bl	80016a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	dce9      	bgt.n	8000bd0 <prvUnlockQueue+0x60>
 8000bfc:	e000      	b.n	8000c00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bfe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000c08:	f001 fb68 	bl	80022dc <vPortExitCritical>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c1c:	f001 fb30 	bl	8002280 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	e001      	b.n	8000c32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c32:	f001 fb53 	bl	80022dc <vPortExitCritical>

    return xReturn;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c48:	f001 fb1a 	bl	8002280 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d102      	bne.n	8000c5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e001      	b.n	8000c62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c62:	f001 fb3b 	bl	80022dc <vPortExitCritical>

    return xReturn;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e014      	b.n	8000caa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <vQueueAddToRegistry+0x4c>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10b      	bne.n	8000ca4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000c8c:	490b      	ldr	r1, [pc, #44]	; (8000cbc <vQueueAddToRegistry+0x4c>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <vQueueAddToRegistry+0x4c>)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	4413      	add	r3, r2
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8000ca2:	e005      	b.n	8000cb0 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2b07      	cmp	r3, #7
 8000cae:	d9e7      	bls.n	8000c80 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20012dc4 	.word	0x20012dc4

08000cc0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000cd0:	f001 fad6 	bl	8002280 <vPortEnterCritical>
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cda:	b25b      	sxtb	r3, r3
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce0:	d103      	bne.n	8000cea <vQueueWaitForMessageRestricted+0x2a>
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf6:	d103      	bne.n	8000d00 <vQueueWaitForMessageRestricted+0x40>
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d00:	f001 faec 	bl	80022dc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d106      	bne.n	8000d1a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3324      	adds	r3, #36	; 0x24
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fbbf 	bl	8001498 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff28 	bl	8000b70 <prvUnlockQueue>
    }
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af04      	add	r7, sp, #16
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	4613      	mov	r3, r2
 8000d36:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d38:	88fb      	ldrh	r3, [r7, #6]
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fbb9 	bl	80024b4 <pvPortMalloc>
 8000d42:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00e      	beq.n	8000d68 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d4a:	2058      	movs	r0, #88	; 0x58
 8000d4c:	f001 fbb2 	bl	80024b4 <pvPortMalloc>
 8000d50:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d5e:	e005      	b.n	8000d6c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f001 fc83 	bl	800266c <vPortFree>
 8000d66:	e001      	b.n	8000d6c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d013      	beq.n	8000d9a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d72:	88fa      	ldrh	r2, [r7, #6]
 8000d74:	2300      	movs	r3, #0
 8000d76:	9303      	str	r3, [sp, #12]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f80e 	bl	8000daa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d8e:	69f8      	ldr	r0, [r7, #28]
 8000d90:	f000 f8a0 	bl	8000ed4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	e002      	b.n	8000da0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000da0:	69bb      	ldr	r3, [r7, #24]
    }
 8000da2:	4618      	mov	r0, r3
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b088      	sub	sp, #32
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	21a5      	movs	r1, #165	; 0xa5
 8000dc4:	f002 fbc9 	bl	800355a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f023 0307 	bic.w	r3, r3, #7
 8000de0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d009      	beq.n	8000e00 <prvInitialiseNewTask+0x56>
 8000dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df0:	f383 8811 	msr	BASEPRI, r3
 8000df4:	f3bf 8f6f 	isb	sy
 8000df8:	f3bf 8f4f 	dsb	sy
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e7fe      	b.n	8000dfe <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01f      	beq.n	8000e46 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
 8000e0a:	e012      	b.n	8000e32 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	4413      	add	r3, r2
 8000e12:	7819      	ldrb	r1, [r3, #0]
 8000e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	3334      	adds	r3, #52	; 0x34
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d9e9      	bls.n	8000e0c <prvInitialiseNewTask+0x62>
 8000e38:	e000      	b.n	8000e3c <prvInitialiseNewTask+0x92>
            {
                break;
 8000e3a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000e44:	e003      	b.n	8000e4e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d901      	bls.n	8000e58 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e54:	2304      	movs	r3, #4
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e62:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	2200      	movs	r2, #0
 8000e68:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff f9f6 	bl	8000260 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e76:	3318      	adds	r3, #24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff f9f1 	bl	8000260 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e82:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	f1c3 0205 	rsb	r2, r3, #5
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e92:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e96:	3350      	adds	r3, #80	; 0x50
 8000e98:	2204      	movs	r2, #4
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fb5c 	bl	800355a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea4:	3354      	adds	r3, #84	; 0x54
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f002 fb55 	bl	800355a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	68f9      	ldr	r1, [r7, #12]
 8000eb4:	69b8      	ldr	r0, [r7, #24]
 8000eb6:	f001 f8bb 	bl	8002030 <pxPortInitialiseStack>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebe:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d002      	beq.n	8000ecc <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000edc:	f001 f9d0 	bl	8002280 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <prvAddNewTaskToReadyList+0xc0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <prvAddNewTaskToReadyList+0xc0>)
 8000ee8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <prvAddNewTaskToReadyList+0xc4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ef2:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <prvAddNewTaskToReadyList+0xc4>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <prvAddNewTaskToReadyList+0xc0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d110      	bne.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000f00:	f000 fbf4 	bl	80016ec <prvInitialiseTaskLists>
 8000f04:	e00d      	b.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <prvAddNewTaskToReadyList+0xc8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <prvAddNewTaskToReadyList+0xc4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d802      	bhi.n	8000f22 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <prvAddNewTaskToReadyList+0xc4>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <prvAddNewTaskToReadyList+0xcc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <prvAddNewTaskToReadyList+0xcc>)
 8000f2a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <prvAddNewTaskToReadyList+0xcc>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2201      	movs	r2, #1
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <prvAddNewTaskToReadyList+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <prvAddNewTaskToReadyList+0xd0>)
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <prvAddNewTaskToReadyList+0xd4>)
 8000f54:	441a      	add	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	f7ff f98c 	bl	800027a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000f62:	f001 f9bb 	bl	80022dc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <prvAddNewTaskToReadyList+0xc8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00e      	beq.n	8000f8c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <prvAddNewTaskToReadyList+0xc4>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <prvAddNewTaskToReadyList+0xd8>)
 8000f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	f3bf 8f4f 	dsb	sy
 8000f88:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000124 	.word	0x20000124
 8000f98:	2000004c 	.word	0x2000004c
 8000f9c:	20000130 	.word	0x20000130
 8000fa0:	20000140 	.word	0x20000140
 8000fa4:	2000012c 	.word	0x2000012c
 8000fa8:	20000050 	.word	0x20000050
 8000fac:	e000ed04 	.word	0xe000ed04

08000fb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d016      	beq.n	8000ff0 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <vTaskDelay+0x60>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d009      	beq.n	8000fde <vTaskDelay+0x2e>
 8000fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	e7fe      	b.n	8000fdc <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8000fde:	f000 f86b 	bl	80010b8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fcaf 	bl	8001948 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000fea:	f000 f873 	bl	80010d4 <xTaskResumeAll>
 8000fee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d107      	bne.n	8001006 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <vTaskDelay+0x64>)
 8000ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2000014c 	.word	0x2000014c
 8001014:	e000ed04 	.word	0xe000ed04

08001018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <vTaskStartScheduler+0x84>)
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	2300      	movs	r3, #0
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2300      	movs	r3, #0
 8001028:	2282      	movs	r2, #130	; 0x82
 800102a:	491d      	ldr	r1, [pc, #116]	; (80010a0 <vTaskStartScheduler+0x88>)
 800102c:	481d      	ldr	r0, [pc, #116]	; (80010a4 <vTaskStartScheduler+0x8c>)
 800102e:	f7ff fe7b 	bl	8000d28 <xTaskCreate>
 8001032:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800103a:	f000 fceb 	bl	8001a14 <xTimerCreateTimerTask>
 800103e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d115      	bne.n	8001072 <vTaskStartScheduler+0x5a>
 8001046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800104a:	f383 8811 	msr	BASEPRI, r3
 800104e:	f3bf 8f6f 	isb	sy
 8001052:	f3bf 8f4f 	dsb	sy
 8001056:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <vTaskStartScheduler+0x90>)
 800105a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800105e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <vTaskStartScheduler+0x94>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <vTaskStartScheduler+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800106c:	f001 f86a 	bl	8002144 <xPortStartScheduler>
 8001070:	e00d      	b.n	800108e <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001078:	d109      	bne.n	800108e <vTaskStartScheduler+0x76>
 800107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800107e:	f383 8811 	msr	BASEPRI, r3
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	f3bf 8f4f 	dsb	sy
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	e7fe      	b.n	800108c <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <vTaskStartScheduler+0x9c>)
 8001090:	681b      	ldr	r3, [r3, #0]
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000148 	.word	0x20000148
 80010a0:	08003584 	.word	0x08003584
 80010a4:	080016bd 	.word	0x080016bd
 80010a8:	20000144 	.word	0x20000144
 80010ac:	20000130 	.word	0x20000130
 80010b0:	20000128 	.word	0x20000128
 80010b4:	20000000 	.word	0x20000000

080010b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <vTaskSuspendAll+0x18>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <vTaskSuspendAll+0x18>)
 80010c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	2000014c 	.word	0x2000014c

080010d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <xTaskResumeAll+0x114>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <xTaskResumeAll+0x2a>
 80010ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ee:	f383 8811 	msr	BASEPRI, r3
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	f3bf 8f4f 	dsb	sy
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	e7fe      	b.n	80010fc <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010fe:	f001 f8bf 	bl	8002280 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <xTaskResumeAll+0x114>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3b01      	subs	r3, #1
 8001108:	4a37      	ldr	r2, [pc, #220]	; (80011e8 <xTaskResumeAll+0x114>)
 800110a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <xTaskResumeAll+0x114>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d161      	bne.n	80011d8 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001114:	4b35      	ldr	r3, [pc, #212]	; (80011ec <xTaskResumeAll+0x118>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d05d      	beq.n	80011d8 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800111c:	e02e      	b.n	800117c <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800111e:	4b34      	ldr	r3, [pc, #208]	; (80011f0 <xTaskResumeAll+0x11c>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3318      	adds	r3, #24
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f902 	bl	8000334 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3304      	adds	r3, #4
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f8fd 	bl	8000334 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	2201      	movs	r2, #1
 8001140:	409a      	lsls	r2, r3
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <xTaskResumeAll+0x120>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <xTaskResumeAll+0x120>)
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4a27      	ldr	r2, [pc, #156]	; (80011f8 <xTaskResumeAll+0x124>)
 800115a:	441a      	add	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3304      	adds	r3, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f7ff f889 	bl	800027a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <xTaskResumeAll+0x128>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	429a      	cmp	r2, r3
 8001174:	d302      	bcc.n	800117c <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <xTaskResumeAll+0x12c>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <xTaskResumeAll+0x11c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1cc      	bne.n	800111e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800118a:	f000 fb2b 	bl	80017e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800118e:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <xTaskResumeAll+0x130>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d010      	beq.n	80011bc <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800119a:	f000 f847 	bl	800122c <xTaskIncrementTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <xTaskResumeAll+0x12c>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f1      	bne.n	800119a <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <xTaskResumeAll+0x130>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <xTaskResumeAll+0x12c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d009      	beq.n	80011d8 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <xTaskResumeAll+0x134>)
 80011ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	f3bf 8f4f 	dsb	sy
 80011d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80011d8:	f001 f880 	bl	80022dc <vPortExitCritical>

    return xAlreadyYielded;
 80011dc:	68bb      	ldr	r3, [r7, #8]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000014c 	.word	0x2000014c
 80011ec:	20000124 	.word	0x20000124
 80011f0:	200000e4 	.word	0x200000e4
 80011f4:	2000012c 	.word	0x2000012c
 80011f8:	20000050 	.word	0x20000050
 80011fc:	2000004c 	.word	0x2000004c
 8001200:	20000138 	.word	0x20000138
 8001204:	20000134 	.word	0x20000134
 8001208:	e000ed04 	.word	0xe000ed04

0800120c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <xTaskGetTickCount+0x1c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000128 	.word	0x20000128

0800122c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001236:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <xTaskIncrementTick+0x144>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 808d 	bne.w	800135a <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <xTaskIncrementTick+0x148>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001248:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <xTaskIncrementTick+0x148>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d11f      	bne.n	8001294 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <xTaskIncrementTick+0x14c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <xTaskIncrementTick+0x46>
 800125e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001262:	f383 8811 	msr	BASEPRI, r3
 8001266:	f3bf 8f6f 	isb	sy
 800126a:	f3bf 8f4f 	dsb	sy
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	e7fe      	b.n	8001270 <xTaskIncrementTick+0x44>
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <xTaskIncrementTick+0x14c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b40      	ldr	r3, [pc, #256]	; (800137c <xTaskIncrementTick+0x150>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3e      	ldr	r2, [pc, #248]	; (8001378 <xTaskIncrementTick+0x14c>)
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4a3e      	ldr	r2, [pc, #248]	; (800137c <xTaskIncrementTick+0x150>)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <xTaskIncrementTick+0x154>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a3c      	ldr	r2, [pc, #240]	; (8001380 <xTaskIncrementTick+0x154>)
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	f000 faa8 	bl	80017e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <xTaskIncrementTick+0x158>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	429a      	cmp	r2, r3
 800129c:	d348      	bcc.n	8001330 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <xTaskIncrementTick+0x14c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012a8:	4b36      	ldr	r3, [pc, #216]	; (8001384 <xTaskIncrementTick+0x158>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ae:	601a      	str	r2, [r3, #0]
                    break;
 80012b0:	e03e      	b.n	8001330 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <xTaskIncrementTick+0x14c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d203      	bcs.n	80012d2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80012ca:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <xTaskIncrementTick+0x158>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80012d0:	e02e      	b.n	8001330 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3304      	adds	r3, #4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f82c 	bl	8000334 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3318      	adds	r3, #24
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f823 	bl	8000334 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	2201      	movs	r2, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <xTaskIncrementTick+0x15c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <xTaskIncrementTick+0x15c>)
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <xTaskIncrementTick+0x160>)
 800130e:	441a      	add	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3304      	adds	r3, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f7fe ffaf 	bl	800027a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <xTaskIncrementTick+0x164>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	429a      	cmp	r2, r3
 8001328:	d3b9      	bcc.n	800129e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800132e:	e7b6      	b.n	800129e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <xTaskIncrementTick+0x164>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001336:	4915      	ldr	r1, [pc, #84]	; (800138c <xTaskIncrementTick+0x160>)
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d901      	bls.n	800134c <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <xTaskIncrementTick+0x168>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e004      	b.n	8001364 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <xTaskIncrementTick+0x16c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <xTaskIncrementTick+0x16c>)
 8001362:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001364:	697b      	ldr	r3, [r7, #20]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000014c 	.word	0x2000014c
 8001374:	20000128 	.word	0x20000128
 8001378:	200000dc 	.word	0x200000dc
 800137c:	200000e0 	.word	0x200000e0
 8001380:	2000013c 	.word	0x2000013c
 8001384:	20000144 	.word	0x20000144
 8001388:	2000012c 	.word	0x2000012c
 800138c:	20000050 	.word	0x20000050
 8001390:	2000004c 	.word	0x2000004c
 8001394:	20000138 	.word	0x20000138
 8001398:	20000134 	.word	0x20000134

0800139c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <vTaskSwitchContext+0xa0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <vTaskSwitchContext+0xa4>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80013b0:	e03e      	b.n	8001430 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <vTaskSwitchContext+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <vTaskSwitchContext+0xa8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	f1c3 031f 	rsb	r3, r3, #31
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	491e      	ldr	r1, [pc, #120]	; (8001448 <vTaskSwitchContext+0xac>)
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <vTaskSwitchContext+0x5a>
        __asm volatile
 80013e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	f3bf 8f6f 	isb	sy
 80013ee:	f3bf 8f4f 	dsb	sy
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e7fe      	b.n	80013f4 <vTaskSwitchContext+0x58>
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <vTaskSwitchContext+0xac>)
 8001402:	4413      	add	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	3308      	adds	r3, #8
 8001418:	429a      	cmp	r2, r3
 800141a:	d104      	bne.n	8001426 <vTaskSwitchContext+0x8a>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <vTaskSwitchContext+0xb0>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	2000014c 	.word	0x2000014c
 8001440:	20000138 	.word	0x20000138
 8001444:	2000012c 	.word	0x2000012c
 8001448:	20000050 	.word	0x20000050
 800144c:	2000004c 	.word	0x2000004c

08001450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <vTaskPlaceOnEventList+0x24>
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e7fe      	b.n	8001472 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <vTaskPlaceOnEventList+0x44>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3318      	adds	r3, #24
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7fe ff20 	bl	80002c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001482:	2101      	movs	r1, #1
 8001484:	6838      	ldr	r0, [r7, #0]
 8001486:	f000 fa5f 	bl	8001948 <prvAddCurrentTaskToDelayedList>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000004c 	.word	0x2000004c

08001498 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <vTaskPlaceOnEventListRestricted+0x26>
 80014aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e7fe      	b.n	80014bc <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3318      	adds	r3, #24
 80014c4:	4619      	mov	r1, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7fe fed7 	bl	800027a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	68b8      	ldr	r0, [r7, #8]
 80014dc:	f000 fa34 	bl	8001948 <prvAddCurrentTaskToDelayedList>
    }
 80014e0:	bf00      	nop
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2000004c 	.word	0x2000004c

080014ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <xTaskRemoveFromEventList+0x2a>
 8001502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001506:	f383 8811 	msr	BASEPRI, r3
 800150a:	f3bf 8f6f 	isb	sy
 800150e:	f3bf 8f4f 	dsb	sy
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e7fe      	b.n	8001514 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	3318      	adds	r3, #24
 800151a:	4618      	mov	r0, r3
 800151c:	f7fe ff0a 	bl	8000334 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <xTaskRemoveFromEventList+0xac>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d11c      	bne.n	8001562 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	3304      	adds	r3, #4
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff01 	bl	8000334 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	2201      	movs	r2, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <xTaskRemoveFromEventList+0xb0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4313      	orrs	r3, r2
 8001540:	4a16      	ldr	r2, [pc, #88]	; (800159c <xTaskRemoveFromEventList+0xb0>)
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <xTaskRemoveFromEventList+0xb4>)
 8001552:	441a      	add	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	3304      	adds	r3, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7fe fe8d 	bl	800027a <vListInsertEnd>
 8001560:	e005      	b.n	800156e <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	3318      	adds	r3, #24
 8001566:	4619      	mov	r1, r3
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <xTaskRemoveFromEventList+0xb8>)
 800156a:	f7fe fe86 	bl	800027a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <xTaskRemoveFromEventList+0xbc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	429a      	cmp	r2, r3
 800157a:	d905      	bls.n	8001588 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <xTaskRemoveFromEventList+0xc0>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e001      	b.n	800158c <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800158c:	697b      	ldr	r3, [r7, #20]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000014c 	.word	0x2000014c
 800159c:	2000012c 	.word	0x2000012c
 80015a0:	20000050 	.word	0x20000050
 80015a4:	200000e4 	.word	0x200000e4
 80015a8:	2000004c 	.word	0x2000004c
 80015ac:	20000138 	.word	0x20000138

080015b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <vTaskInternalSetTimeOutState+0x24>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <vTaskInternalSetTimeOutState+0x28>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	2000013c 	.word	0x2000013c
 80015d8:	20000128 	.word	0x20000128

080015dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d109      	bne.n	8001600 <xTaskCheckForTimeOut+0x24>
 80015ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f0:	f383 8811 	msr	BASEPRI, r3
 80015f4:	f3bf 8f6f 	isb	sy
 80015f8:	f3bf 8f4f 	dsb	sy
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	e7fe      	b.n	80015fe <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <xTaskCheckForTimeOut+0x3e>
 8001606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160a:	f383 8811 	msr	BASEPRI, r3
 800160e:	f3bf 8f6f 	isb	sy
 8001612:	f3bf 8f4f 	dsb	sy
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e7fe      	b.n	8001618 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800161a:	f000 fe31 	bl	8002280 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800161e:	4b1f      	ldr	r3, [pc, #124]	; (800169c <xTaskCheckForTimeOut+0xc0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001636:	d102      	bne.n	800163e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	e026      	b.n	800168c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <xTaskCheckForTimeOut+0xc4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d00a      	beq.n	8001660 <xTaskCheckForTimeOut+0x84>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	429a      	cmp	r2, r3
 8001652:	d305      	bcc.n	8001660 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e015      	b.n	800168c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	429a      	cmp	r2, r3
 8001668:	d20b      	bcs.n	8001682 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	1ad2      	subs	r2, r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff9a 	bl	80015b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	e004      	b.n	800168c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800168c:	f000 fe26 	bl	80022dc <vPortExitCritical>

    return xReturn;
 8001690:	69fb      	ldr	r3, [r7, #28]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000128 	.word	0x20000128
 80016a0:	2000013c 	.word	0x2000013c

080016a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <vTaskMissedYield+0x14>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	20000138 	.word	0x20000138

080016bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80016c4:	f000 f852 	bl	800176c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <prvIdleTask+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d9f9      	bls.n	80016c4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <prvIdleTask+0x2c>)
 80016d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f3bf 8f4f 	dsb	sy
 80016dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80016e0:	e7f0      	b.n	80016c4 <prvIdleTask+0x8>
 80016e2:	bf00      	nop
 80016e4:	20000050 	.word	0x20000050
 80016e8:	e000ed04 	.word	0xe000ed04

080016ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	e00c      	b.n	8001712 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <prvInitialiseTaskLists+0x60>)
 8001704:	4413      	add	r3, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fd8a 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d9ef      	bls.n	80016f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <prvInitialiseTaskLists+0x64>)
 800171a:	f7fe fd81 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800171e:	480d      	ldr	r0, [pc, #52]	; (8001754 <prvInitialiseTaskLists+0x68>)
 8001720:	f7fe fd7e 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <prvInitialiseTaskLists+0x6c>)
 8001726:	f7fe fd7b 	bl	8000220 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800172a:	480c      	ldr	r0, [pc, #48]	; (800175c <prvInitialiseTaskLists+0x70>)
 800172c:	f7fe fd78 	bl	8000220 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <prvInitialiseTaskLists+0x74>)
 8001732:	f7fe fd75 	bl	8000220 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <prvInitialiseTaskLists+0x78>)
 8001738:	4a05      	ldr	r2, [pc, #20]	; (8001750 <prvInitialiseTaskLists+0x64>)
 800173a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <prvInitialiseTaskLists+0x7c>)
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <prvInitialiseTaskLists+0x68>)
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000050 	.word	0x20000050
 8001750:	200000b4 	.word	0x200000b4
 8001754:	200000c8 	.word	0x200000c8
 8001758:	200000e4 	.word	0x200000e4
 800175c:	200000f8 	.word	0x200000f8
 8001760:	20000110 	.word	0x20000110
 8001764:	200000dc 	.word	0x200000dc
 8001768:	200000e0 	.word	0x200000e0

0800176c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001772:	e019      	b.n	80017a8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001774:	f000 fd84 	bl	8002280 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <prvCheckTasksWaitingTermination+0x4c>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3304      	adds	r3, #4
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdd5 	bl	8000334 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <prvCheckTasksWaitingTermination+0x50>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3b01      	subs	r3, #1
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <prvCheckTasksWaitingTermination+0x50>)
 8001792:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <prvCheckTasksWaitingTermination+0x54>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <prvCheckTasksWaitingTermination+0x54>)
 800179c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800179e:	f000 fd9d 	bl	80022dc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f80e 	bl	80017c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <prvCheckTasksWaitingTermination+0x54>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1e1      	bne.n	8001774 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200000f8 	.word	0x200000f8
 80017bc:	20000124 	.word	0x20000124
 80017c0:	2000010c 	.word	0x2000010c

080017c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 ff4b 	bl	800266c <vPortFree>
                vPortFree( pxTCB );
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 ff48 	bl	800266c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <prvResetNextTaskUnblockTime+0x30>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d104      	bne.n	80017fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <prvResetNextTaskUnblockTime+0x34>)
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80017fa:	e005      	b.n	8001808 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <prvResetNextTaskUnblockTime+0x30>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <prvResetNextTaskUnblockTime+0x34>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	200000dc 	.word	0x200000dc
 8001818:	20000144 	.word	0x20000144

0800181c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <xTaskGetSchedulerState+0x34>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800182a:	2301      	movs	r3, #1
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	e008      	b.n	8001842 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <xTaskGetSchedulerState+0x38>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001838:	2302      	movs	r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	e001      	b.n	8001842 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001842:	687b      	ldr	r3, [r7, #4]
    }
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000130 	.word	0x20000130
 8001854:	2000014c 	.word	0x2000014c

08001858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d061      	beq.n	8001932 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <xTaskPriorityDisinherit+0xe4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d009      	beq.n	800188c <xTaskPriorityDisinherit+0x34>
 8001878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800187c:	f383 8811 	msr	BASEPRI, r3
 8001880:	f3bf 8f6f 	isb	sy
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	e7fe      	b.n	800188a <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <xTaskPriorityDisinherit+0x50>
 8001894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001898:	f383 8811 	msr	BASEPRI, r3
 800189c:	f3bf 8f6f 	isb	sy
 80018a0:	f3bf 8f4f 	dsb	sy
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	e7fe      	b.n	80018a6 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d039      	beq.n	8001932 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d135      	bne.n	8001932 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	3304      	adds	r3, #4
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fd32 	bl	8000334 <uxListRemove>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10a      	bne.n	80018ec <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	2201      	movs	r2, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <xTaskPriorityDisinherit+0xe8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4013      	ands	r3, r2
 80018e8:	4a15      	ldr	r2, [pc, #84]	; (8001940 <xTaskPriorityDisinherit+0xe8>)
 80018ea:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f1c3 0205 	rsb	r2, r3, #5
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	2201      	movs	r2, #1
 8001906:	409a      	lsls	r2, r3
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <xTaskPriorityDisinherit+0xe8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4313      	orrs	r3, r2
 800190e:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <xTaskPriorityDisinherit+0xe8>)
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <xTaskPriorityDisinherit+0xec>)
 8001920:	441a      	add	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	3304      	adds	r3, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4610      	mov	r0, r2
 800192a:	f7fe fca6 	bl	800027a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800192e:	2301      	movs	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001932:	697b      	ldr	r3, [r7, #20]
    }
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000004c 	.word	0x2000004c
 8001940:	2000012c 	.word	0x2000012c
 8001944:	20000050 	.word	0x20000050

08001948 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001958:	4b28      	ldr	r3, [pc, #160]	; (80019fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fce8 	bl	8000334 <uxListRemove>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10b      	bne.n	8001982 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	2201      	movs	r2, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4013      	ands	r3, r2
 800197e:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001980:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d10a      	bne.n	80019a0 <prvAddCurrentTaskToDelayedList+0x58>
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3304      	adds	r3, #4
 8001996:	4619      	mov	r1, r3
 8001998:	481a      	ldr	r0, [pc, #104]	; (8001a04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800199a:	f7fe fc6e 	bl	800027a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800199e:	e026      	b.n	80019ee <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d209      	bcs.n	80019cc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <prvAddCurrentTaskToDelayedList+0xc0>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3304      	adds	r3, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f7fe fc7c 	bl	80002c2 <vListInsert>
}
 80019ca:	e010      	b.n	80019ee <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <prvAddCurrentTaskToDelayedList+0xc4>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3304      	adds	r3, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7fe fc72 	bl	80002c2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xc8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d202      	bcs.n	80019ee <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80019e8:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <prvAddCurrentTaskToDelayedList+0xc8>)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	6013      	str	r3, [r2, #0]
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000128 	.word	0x20000128
 80019fc:	2000004c 	.word	0x2000004c
 8001a00:	2000012c 	.word	0x2000012c
 8001a04:	20000110 	.word	0x20000110
 8001a08:	200000e0 	.word	0x200000e0
 8001a0c:	200000dc 	.word	0x200000dc
 8001a10:	20000144 	.word	0x20000144

08001a14 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001a1e:	f000 fad1 	bl	8001fc4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <xTimerCreateTimerTask+0x54>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <xTimerCreateTimerTask+0x58>)
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a38:	490d      	ldr	r1, [pc, #52]	; (8001a70 <xTimerCreateTimerTask+0x5c>)
 8001a3a:	480e      	ldr	r0, [pc, #56]	; (8001a74 <xTimerCreateTimerTask+0x60>)
 8001a3c:	f7ff f974 	bl	8000d28 <xTaskCreate>
 8001a40:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d109      	bne.n	8001a5c <xTimerCreateTimerTask+0x48>
 8001a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4c:	f383 8811 	msr	BASEPRI, r3
 8001a50:	f3bf 8f6f 	isb	sy
 8001a54:	f3bf 8f4f 	dsb	sy
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	e7fe      	b.n	8001a5a <xTimerCreateTimerTask+0x46>
        return xReturn;
 8001a5c:	687b      	ldr	r3, [r7, #4]
    }
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000180 	.word	0x20000180
 8001a6c:	20000184 	.word	0x20000184
 8001a70:	0800358c 	.word	0x0800358c
 8001a74:	08001ba9 	.word	0x08001ba9

08001a78 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <xTimerGenericCommand+0x2c>
 8001a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a94:	f383 8811 	msr	BASEPRI, r3
 8001a98:	f3bf 8f6f 	isb	sy
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	e7fe      	b.n	8001aa2 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001aa4:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <xTimerGenericCommand+0x94>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d02a      	beq.n	8001b02 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	dc18      	bgt.n	8001af0 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001abe:	f7ff fead 	bl	800181c <xTaskGetSchedulerState>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d109      	bne.n	8001adc <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <xTimerGenericCommand+0x94>)
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	f107 0114 	add.w	r1, r7, #20
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad4:	f7fe fd40 	bl	8000558 <xQueueGenericSend>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8001ada:	e012      	b.n	8001b02 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <xTimerGenericCommand+0x94>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	f107 0114 	add.w	r1, r7, #20
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f7fe fd36 	bl	8000558 <xQueueGenericSend>
 8001aec:	6278      	str	r0, [r7, #36]	; 0x24
 8001aee:	e008      	b.n	8001b02 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <xTimerGenericCommand+0x94>)
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f107 0114 	add.w	r1, r7, #20
 8001af8:	2300      	movs	r3, #0
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	f7fe fe26 	bl	800074c <xQueueGenericSendFromISR>
 8001b00:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001b04:	4618      	mov	r0, r3
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000180 	.word	0x20000180

08001b10 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <prvProcessExpiredTimer+0x94>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3304      	adds	r3, #4
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fc03 	bl	8000334 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d021      	beq.n	8001b80 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	18d1      	adds	r1, r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	6978      	ldr	r0, [r7, #20]
 8001b4a:	f000 f8d1 	bl	8001cf0 <prvInsertTimerInActiveList>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01e      	beq.n	8001b92 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8a 	bl	8001a78 <xTimerGenericCommand>
 8001b64:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d112      	bne.n	8001b92 <prvProcessExpiredTimer+0x82>
 8001b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b70:	f383 8811 	msr	BASEPRI, r3
 8001b74:	f3bf 8f6f 	isb	sy
 8001b78:	f3bf 8f4f 	dsb	sy
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e7fe      	b.n	8001b7e <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	4798      	blx	r3
    }
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000178 	.word	0x20000178

08001ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f857 	bl	8001c68 <prvGetNextExpireTime>
 8001bba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 f803 	bl	8001bcc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001bc6:	f000 f8d5 	bl	8001d74 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bca:	e7f1      	b.n	8001bb0 <prvTimerTask+0x8>

08001bcc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001bd6:	f7ff fa6f 	bl	80010b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f866 	bl	8001cb0 <prvSampleTimeNow>
 8001be4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d130      	bne.n	8001c4e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <prvProcessTimerOrBlockTask+0x3c>
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d806      	bhi.n	8001c08 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001bfa:	f7ff fa6b 	bl	80010d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff85 	bl	8001b10 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001c06:	e024      	b.n	8001c52 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001c0e:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <prvProcessTimerOrBlockTask+0x90>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <prvProcessTimerOrBlockTask+0x50>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <prvProcessTimerOrBlockTask+0x52>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <prvProcessTimerOrBlockTask+0x94>)
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7ff f847 	bl	8000cc0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001c32:	f7ff fa4f 	bl	80010d4 <xTaskResumeAll>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10a      	bne.n	8001c52 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <prvProcessTimerOrBlockTask+0x98>)
 8001c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	f3bf 8f6f 	isb	sy
    }
 8001c4c:	e001      	b.n	8001c52 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001c4e:	f7ff fa41 	bl	80010d4 <xTaskResumeAll>
    }
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000017c 	.word	0x2000017c
 8001c60:	20000180 	.word	0x20000180
 8001c64:	e000ed04 	.word	0xe000ed04

08001c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <prvGetNextExpireTime+0x44>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <prvGetNextExpireTime+0x16>
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	e000      	b.n	8001c80 <prvGetNextExpireTime+0x18>
 8001c7e:	2200      	movs	r2, #0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <prvGetNextExpireTime+0x44>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e001      	b.n	8001c9c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    }
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000178 	.word	0x20000178

08001cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001cb8:	f7ff faa8 	bl	800120c <xTaskGetTickCount>
 8001cbc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <prvSampleTimeNow+0x3c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d205      	bcs.n	8001cd4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001cc8:	f000 f918 	bl	8001efc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	e002      	b.n	8001cda <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <prvSampleTimeNow+0x3c>)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    }
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000188 	.word	0x20000188

08001cf0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d812      	bhi.n	8001d3c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d302      	bcc.n	8001d2a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e01b      	b.n	8001d62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <prvInsertTimerInActiveList+0x7c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4619      	mov	r1, r3
 8001d34:	4610      	mov	r0, r2
 8001d36:	f7fe fac4 	bl	80002c2 <vListInsert>
 8001d3a:	e012      	b.n	8001d62 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d206      	bcs.n	8001d52 <prvInsertTimerInActiveList+0x62>
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d302      	bcc.n	8001d52 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e007      	b.n	8001d62 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <prvInsertTimerInActiveList+0x80>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7fe fab0 	bl	80002c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001d62:	697b      	ldr	r3, [r7, #20]
    }
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000017c 	.word	0x2000017c
 8001d70:	20000178 	.word	0x20000178

08001d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001d7a:	e0ac      	b.n	8001ed6 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f2c0 80a8 	blt.w	8001ed4 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	3304      	adds	r3, #4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe facd 	bl	8000334 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff87 	bl	8001cb0 <prvSampleTimeNow>
 8001da2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b09      	cmp	r3, #9
 8001da8:	f200 8095 	bhi.w	8001ed6 <prvProcessReceivedCommands+0x162>
 8001dac:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <prvProcessReceivedCommands+0x40>)
 8001dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db2:	bf00      	nop
 8001db4:	08001ddd 	.word	0x08001ddd
 8001db8:	08001ddd 	.word	0x08001ddd
 8001dbc:	08001ddd 	.word	0x08001ddd
 8001dc0:	08001e4f 	.word	0x08001e4f
 8001dc4:	08001e63 	.word	0x08001e63
 8001dc8:	08001eab 	.word	0x08001eab
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001ddd 	.word	0x08001ddd
 8001dd4:	08001e4f 	.word	0x08001e4f
 8001dd8:	08001e63 	.word	0x08001e63
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	18d1      	adds	r1, r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a3a      	ldr	r2, [r7, #32]
 8001dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dfc:	f7ff ff78 	bl	8001cf0 <prvInsertTimerInActiveList>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d067      	beq.n	8001ed6 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e0c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d05c      	beq.n	8001ed6 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	441a      	add	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e2e:	f7ff fe23 	bl	8001a78 <xTimerGenericCommand>
 8001e32:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d14d      	bne.n	8001ed6 <prvProcessReceivedCommands+0x162>
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e7fe      	b.n	8001e4c <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001e60:	e039      	b.n	8001ed6 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <prvProcessReceivedCommands+0x122>
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e7fe      	b.n	8001e94 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	18d1      	adds	r1, r2, r3
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ea4:	f7ff ff24 	bl	8001cf0 <prvInsertTimerInActiveList>
                        break;
 8001ea8:	e015      	b.n	8001ed6 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8001eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eba:	f000 fbd7 	bl	800266c <vPortFree>
 8001ebe:	e00a      	b.n	8001ed6 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001ed2:	e000      	b.n	8001ed6 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001ed4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <prvProcessReceivedCommands+0x184>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f107 0108 	add.w	r1, r7, #8
 8001ede:	2200      	movs	r2, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fcd9 	bl	8000898 <xQueueReceive>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f af47 	bne.w	8001d7c <prvProcessReceivedCommands+0x8>
        }
    }
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000180 	.word	0x20000180

08001efc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f02:	e047      	b.n	8001f94 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <prvSwitchTimerLists+0xc0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <prvSwitchTimerLists+0xc0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fa09 	bl	8000334 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d02d      	beq.n	8001f94 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d90e      	bls.n	8001f68 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <prvSwitchTimerLists+0xc0>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4610      	mov	r0, r2
 8001f62:	f7fe f9ae 	bl	80002c2 <vListInsert>
 8001f66:	e015      	b.n	8001f94 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	2100      	movs	r1, #0
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f7ff fd80 	bl	8001a78 <xTimerGenericCommand>
 8001f78:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <prvSwitchTimerLists+0x98>
 8001f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f84:	f383 8811 	msr	BASEPRI, r3
 8001f88:	f3bf 8f6f 	isb	sy
 8001f8c:	f3bf 8f4f 	dsb	sy
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	e7fe      	b.n	8001f92 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <prvSwitchTimerLists+0xc0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1b2      	bne.n	8001f04 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <prvSwitchTimerLists+0xc0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <prvSwitchTimerLists+0xc4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <prvSwitchTimerLists+0xc0>)
 8001faa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <prvSwitchTimerLists+0xc4>)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	6013      	str	r3, [r2, #0]
    }
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000178 	.word	0x20000178
 8001fc0:	2000017c 	.word	0x2000017c

08001fc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001fc8:	f000 f95a 	bl	8002280 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <prvCheckForValidListAndQueue+0x54>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11d      	bne.n	8002010 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001fd4:	4811      	ldr	r0, [pc, #68]	; (800201c <prvCheckForValidListAndQueue+0x58>)
 8001fd6:	f7fe f923 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <prvCheckForValidListAndQueue+0x5c>)
 8001fdc:	f7fe f920 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <prvCheckForValidListAndQueue+0x60>)
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <prvCheckForValidListAndQueue+0x58>)
 8001fe4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <prvCheckForValidListAndQueue+0x64>)
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <prvCheckForValidListAndQueue+0x5c>)
 8001fea:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001fec:	2200      	movs	r2, #0
 8001fee:	210c      	movs	r1, #12
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f7fe fa31 	bl	8000458 <xQueueGenericCreate>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <prvCheckForValidListAndQueue+0x54>)
 8001ffa:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <prvCheckForValidListAndQueue+0x54>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <prvCheckForValidListAndQueue+0x54>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4908      	ldr	r1, [pc, #32]	; (800202c <prvCheckForValidListAndQueue+0x68>)
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fe30 	bl	8000c70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002010:	f000 f964 	bl	80022dc <vPortExitCritical>
    }
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000180 	.word	0x20000180
 800201c:	20000150 	.word	0x20000150
 8002020:	20000164 	.word	0x20000164
 8002024:	20000178 	.word	0x20000178
 8002028:	2000017c 	.word	0x2000017c
 800202c:	08003594 	.word	0x08003594

08002030 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3b04      	subs	r3, #4
 8002040:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002048:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b04      	subs	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f023 0201 	bic.w	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b04      	subs	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002060:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <pxPortInitialiseStack+0x64>)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b14      	subs	r3, #20
 800206a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3b04      	subs	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f06f 0202 	mvn.w	r2, #2
 800207e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3b20      	subs	r3, #32
 8002084:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	08002099 	.word	0x08002099

08002098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <prvTaskExitError+0x50>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020aa:	d009      	beq.n	80020c0 <prvTaskExitError+0x28>
 80020ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b0:	f383 8811 	msr	BASEPRI, r3
 80020b4:	f3bf 8f6f 	isb	sy
 80020b8:	f3bf 8f4f 	dsb	sy
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e7fe      	b.n	80020be <prvTaskExitError+0x26>
 80020c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c4:	f383 8811 	msr	BASEPRI, r3
 80020c8:	f3bf 8f6f 	isb	sy
 80020cc:	f3bf 8f4f 	dsb	sy
 80020d0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80020d2:	bf00      	nop
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0fc      	beq.n	80020d4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000004 	.word	0x20000004
 80020ec:	00000000 	.word	0x00000000

080020f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <pxCurrentTCBConst2>)
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	6808      	ldr	r0, [r1, #0]
 80020f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fa:	f380 8809 	msr	PSP, r0
 80020fe:	f3bf 8f6f 	isb	sy
 8002102:	f04f 0000 	mov.w	r0, #0
 8002106:	f380 8811 	msr	BASEPRI, r0
 800210a:	4770      	bx	lr
 800210c:	f3af 8000 	nop.w

08002110 <pxCurrentTCBConst2>:
 8002110:	2000004c 	.word	0x2000004c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop

08002118 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <prvPortStartFirstTask+0x24>)
 800211a:	6800      	ldr	r0, [r0, #0]
 800211c:	6800      	ldr	r0, [r0, #0]
 800211e:	f380 8808 	msr	MSP, r0
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f380 8814 	msr	CONTROL, r0
 800212a:	b662      	cpsie	i
 800212c:	b661      	cpsie	f
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	df00      	svc	0
 8002138:	bf00      	nop
 800213a:	0000      	.short	0x0000
 800213c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop

08002144 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800214a:	4b44      	ldr	r3, [pc, #272]	; (800225c <xPortStartScheduler+0x118>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a44      	ldr	r2, [pc, #272]	; (8002260 <xPortStartScheduler+0x11c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d109      	bne.n	8002168 <xPortStartScheduler+0x24>
 8002154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	e7fe      	b.n	8002166 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <xPortStartScheduler+0x118>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a3d      	ldr	r2, [pc, #244]	; (8002264 <xPortStartScheduler+0x120>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d109      	bne.n	8002186 <xPortStartScheduler+0x42>
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e7fe      	b.n	8002184 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002186:	4b38      	ldr	r3, [pc, #224]	; (8002268 <xPortStartScheduler+0x124>)
 8002188:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <xPortStartScheduler+0x128>)
 80021ac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <xPortStartScheduler+0x12c>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021b4:	e009      	b.n	80021ca <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <xPortStartScheduler+0x12c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <xPortStartScheduler+0x12c>)
 80021be:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b80      	cmp	r3, #128	; 0x80
 80021d4:	d0ef      	beq.n	80021b6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021d6:	4b26      	ldr	r3, [pc, #152]	; (8002270 <xPortStartScheduler+0x12c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d009      	beq.n	80021f6 <xPortStartScheduler+0xb2>
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	e7fe      	b.n	80021f4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <xPortStartScheduler+0x12c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	4a1c      	ldr	r2, [pc, #112]	; (8002270 <xPortStartScheduler+0x12c>)
 80021fe:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <xPortStartScheduler+0x12c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <xPortStartScheduler+0x12c>)
 800220a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <xPortStartScheduler+0x130>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <xPortStartScheduler+0x130>)
 800221a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <xPortStartScheduler+0x130>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <xPortStartScheduler+0x130>)
 8002226:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800222a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800222c:	f000 f8d4 	bl	80023d8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <xPortStartScheduler+0x134>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002236:	f000 f8f3 	bl	8002420 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <xPortStartScheduler+0x138>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <xPortStartScheduler+0x138>)
 8002240:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002244:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002246:	f7ff ff67 	bl	8002118 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800224a:	f7ff f8a7 	bl	800139c <vTaskSwitchContext>
    prvTaskExitError();
 800224e:	f7ff ff23 	bl	8002098 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	e000ed00 	.word	0xe000ed00
 8002260:	410fc271 	.word	0x410fc271
 8002264:	410fc270 	.word	0x410fc270
 8002268:	e000e400 	.word	0xe000e400
 800226c:	2000018c 	.word	0x2000018c
 8002270:	20000190 	.word	0x20000190
 8002274:	e000ed20 	.word	0xe000ed20
 8002278:	20000004 	.word	0x20000004
 800227c:	e000ef34 	.word	0xe000ef34

08002280 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <vPortEnterCritical+0x54>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <vPortEnterCritical+0x54>)
 80022a0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <vPortEnterCritical+0x54>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10e      	bne.n	80022c8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <vPortEnterCritical+0x58>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <vPortEnterCritical+0x48>
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	e7fe      	b.n	80022c6 <vPortEnterCritical+0x46>
    }
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20000004 	.word	0x20000004
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <vPortExitCritical+0x4c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d109      	bne.n	80022fe <vPortExitCritical+0x22>
 80022ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	e7fe      	b.n	80022fc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <vPortExitCritical+0x4c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	4a08      	ldr	r2, [pc, #32]	; (8002328 <vPortExitCritical+0x4c>)
 8002306:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <vPortExitCritical+0x4c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <vPortExitCritical+0x3e>
 8002310:	2300      	movs	r3, #0
 8002312:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000004 	.word	0x20000004
 800232c:	00000000 	.word	0x00000000

08002330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002330:	f3ef 8009 	mrs	r0, PSP
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <pxCurrentTCBConst>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	f01e 0f10 	tst.w	lr, #16
 8002340:	bf08      	it	eq
 8002342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800234a:	6010      	str	r0, [r2, #0]
 800234c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002354:	f380 8811 	msr	BASEPRI, r0
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f7ff f81c 	bl	800139c <vTaskSwitchContext>
 8002364:	f04f 0000 	mov.w	r0, #0
 8002368:	f380 8811 	msr	BASEPRI, r0
 800236c:	bc09      	pop	{r0, r3}
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	6808      	ldr	r0, [r1, #0]
 8002372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002376:	f01e 0f10 	tst.w	lr, #16
 800237a:	bf08      	it	eq
 800237c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002380:	f380 8809 	msr	PSP, r0
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	f3af 8000 	nop.w

08002390 <pxCurrentTCBConst>:
 8002390:	2000004c 	.word	0x2000004c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop

08002398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
        __asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023b0:	f7fe ff3c 	bl	800122c <xTaskIncrementTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <SysTick_Handler+0x3c>)
 80023bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <vPortSetupTimerInterrupt+0x34>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <vPortSetupTimerInterrupt+0x38>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <vPortSetupTimerInterrupt+0x3c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <vPortSetupTimerInterrupt+0x40>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <vPortSetupTimerInterrupt+0x44>)
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <vPortSetupTimerInterrupt+0x34>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010
 8002410:	e000e018 	.word	0xe000e018
 8002414:	2000001c 	.word	0x2000001c
 8002418:	10624dd3 	.word	0x10624dd3
 800241c:	e000e014 	.word	0xe000e014

08002420 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002420:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002430 <vPortEnableVFP+0x10>
 8002424:	6801      	ldr	r1, [r0, #0]
 8002426:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800242a:	6001      	str	r1, [r0, #0]
 800242c:	4770      	bx	lr
 800242e:	0000      	.short	0x0000
 8002430:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop

08002438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800243e:	f3ef 8305 	mrs	r3, IPSR
 8002442:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	d913      	bls.n	8002472 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <vPortValidateInterruptPriority+0x6c>)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <vPortValidateInterruptPriority+0x70>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	7afa      	ldrb	r2, [r7, #11]
 800245a:	429a      	cmp	r2, r3
 800245c:	d209      	bcs.n	8002472 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	e7fe      	b.n	8002470 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <vPortValidateInterruptPriority+0x74>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <vPortValidateInterruptPriority+0x78>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d909      	bls.n	8002496 <vPortValidateInterruptPriority+0x5e>
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	e7fe      	b.n	8002494 <vPortValidateInterruptPriority+0x5c>
    }
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e3f0 	.word	0xe000e3f0
 80024a8:	2000018c 	.word	0x2000018c
 80024ac:	e000ed0c 	.word	0xe000ed0c
 80024b0:	20000190 	.word	0x20000190

080024b4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80024c0:	f7fe fdfa 	bl	80010b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024c4:	4b63      	ldr	r3, [pc, #396]	; (8002654 <pvPortMalloc+0x1a0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80024cc:	f000 f92e 	bl	800272c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <pvPortMalloc+0x1a4>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 80a5 	bne.w	8002628 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02c      	beq.n	800253e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80024e4:	2208      	movs	r2, #8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d226      	bcs.n	800253e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80024f0:	2208      	movs	r2, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d020      	beq.n	8002544 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f023 0307 	bic.w	r3, r3, #7
 8002508:	3308      	adds	r3, #8
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d213      	bcs.n	8002538 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f023 0307 	bic.w	r3, r3, #7
 8002516:	3308      	adds	r3, #8
 8002518:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00f      	beq.n	8002544 <pvPortMalloc+0x90>
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e7fe      	b.n	8002536 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800253c:	e002      	b.n	8002544 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	e000      	b.n	8002546 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002544:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d06d      	beq.n	8002628 <pvPortMalloc+0x174>
 800254c:	4b43      	ldr	r3, [pc, #268]	; (800265c <pvPortMalloc+0x1a8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	d868      	bhi.n	8002628 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <pvPortMalloc+0x1ac>)
 8002558:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <pvPortMalloc+0x1ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002560:	e004      	b.n	800256c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	429a      	cmp	r2, r3
 8002574:	d903      	bls.n	800257e <pvPortMalloc+0xca>
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f1      	bne.n	8002562 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800257e:	4b35      	ldr	r3, [pc, #212]	; (8002654 <pvPortMalloc+0x1a0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002584:	429a      	cmp	r2, r3
 8002586:	d04f      	beq.n	8002628 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2208      	movs	r2, #8
 800258e:	4413      	add	r3, r2
 8002590:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	1ad2      	subs	r2, r2, r3
 80025a2:	2308      	movs	r3, #8
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d91e      	bls.n	80025e8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4413      	add	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <pvPortMalloc+0x11c>
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e7fe      	b.n	80025ce <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad2      	subs	r2, r2, r3
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80025e2:	69b8      	ldr	r0, [r7, #24]
 80025e4:	f000 f904 	bl	80027f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <pvPortMalloc+0x1a8>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <pvPortMalloc+0x1a8>)
 80025f4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <pvPortMalloc+0x1a8>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <pvPortMalloc+0x1b0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d203      	bcs.n	800260a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <pvPortMalloc+0x1a8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <pvPortMalloc+0x1b0>)
 8002608:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <pvPortMalloc+0x1a4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	431a      	orrs	r2, r3
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <pvPortMalloc+0x1b4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	4a10      	ldr	r2, [pc, #64]	; (8002668 <pvPortMalloc+0x1b4>)
 8002626:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002628:	f7fe fd54 	bl	80010d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <pvPortMalloc+0x196>
 8002636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263a:	f383 8811 	msr	BASEPRI, r3
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f3bf 8f4f 	dsb	sy
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e7fe      	b.n	8002648 <pvPortMalloc+0x194>
    return pvReturn;
 800264a:	69fb      	ldr	r3, [r7, #28]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3728      	adds	r7, #40	; 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20012d9c 	.word	0x20012d9c
 8002658:	20012db0 	.word	0x20012db0
 800265c:	20012da0 	.word	0x20012da0
 8002660:	20012d94 	.word	0x20012d94
 8002664:	20012da4 	.word	0x20012da4
 8002668:	20012da8 	.word	0x20012da8

0800266c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d04b      	beq.n	8002716 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800267e:	2308      	movs	r3, #8
 8002680:	425b      	negs	r3, r3
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4413      	add	r3, r2
 8002686:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <vPortFree+0xb4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <vPortFree+0x42>
 800269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	e7fe      	b.n	80026ac <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <vPortFree+0x5e>
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	e7fe      	b.n	80026c8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <vPortFree+0xb4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01e      	beq.n	8002716 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11a      	bne.n	8002716 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <vPortFree+0xb4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80026f0:	f7fe fce2 	bl	80010b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <vPortFree+0xb8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <vPortFree+0xb8>)
 8002700:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002702:	6938      	ldr	r0, [r7, #16]
 8002704:	f000 f874 	bl	80027f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <vPortFree+0xbc>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	4a06      	ldr	r2, [pc, #24]	; (8002728 <vPortFree+0xbc>)
 8002710:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002712:	f7fe fcdf 	bl	80010d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20012db0 	.word	0x20012db0
 8002724:	20012da0 	.word	0x20012da0
 8002728:	20012dac 	.word	0x20012dac

0800272c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002732:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002736:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <prvHeapInit+0xac>)
 800273a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3307      	adds	r3, #7
 800274a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <prvHeapInit+0xac>)
 800275c:	4413      	add	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <prvHeapInit+0xb0>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <prvHeapInit+0xb0>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002778:	2208      	movs	r2, #8
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0307 	bic.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4a15      	ldr	r2, [pc, #84]	; (80027e0 <prvHeapInit+0xb4>)
 800278c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <prvHeapInit+0xb4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <prvHeapInit+0xb4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <prvHeapInit+0xb4>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <prvHeapInit+0xb8>)
 80027ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <prvHeapInit+0xbc>)
 80027c2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <prvHeapInit+0xc0>)
 80027c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027ca:	601a      	str	r2, [r3, #0]
}
 80027cc:	bf00      	nop
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	20000194 	.word	0x20000194
 80027dc:	20012d94 	.word	0x20012d94
 80027e0:	20012d9c 	.word	0x20012d9c
 80027e4:	20012da4 	.word	0x20012da4
 80027e8:	20012da0 	.word	0x20012da0
 80027ec:	20012db0 	.word	0x20012db0

080027f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <prvInsertBlockIntoFreeList+0xac>)
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e002      	b.n	8002804 <prvInsertBlockIntoFreeList+0x14>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	d8f7      	bhi.n	80027fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4413      	add	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	429a      	cmp	r2, r3
 800281e:	d108      	bne.n	8002832 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	441a      	add	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	441a      	add	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d118      	bne.n	8002878 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <prvInsertBlockIntoFreeList+0xb0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d00d      	beq.n	800286e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e008      	b.n	8002880 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <prvInsertBlockIntoFreeList+0xb0>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e003      	b.n	8002880 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	d002      	beq.n	800288e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20012d94 	.word	0x20012d94
 80028a0:	20012d9c 	.word	0x20012d9c

080028a4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e076      	b.n	80029ae <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80028c0:	2201      	movs	r2, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d165      	bne.n	80029a8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2103      	movs	r1, #3
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	401a      	ands	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	791b      	ldrb	r3, [r3, #4]
 80028fa:	4619      	mov	r1, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	791b      	ldrb	r3, [r3, #4]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d003      	beq.n	800291a <GPIO_Init+0x76>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	791b      	ldrb	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d12e      	bne.n	8002978 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2103      	movs	r1, #3
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	795b      	ldrb	r3, [r3, #5]
 8002938:	4619      	mov	r1, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	b29b      	uxth	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	2301      	movs	r3, #1
 8002954:	408b      	lsls	r3, r1
 8002956:	43db      	mvns	r3, r3
 8002958:	401a      	ands	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	7992      	ldrb	r2, [r2, #6]
 8002966:	4611      	mov	r1, r2
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	b292      	uxth	r2, r2
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	b292      	uxth	r2, r2
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	b29b      	uxth	r3, r3
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2103      	movs	r1, #3
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	79db      	ldrb	r3, [r3, #7]
 8002998:	4619      	mov	r1, r3
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b0f      	cmp	r3, #15
 80029b2:	d985      	bls.n	80028c0 <GPIO_Init+0x1c>
    }
  }
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695a      	ldr	r2, [r3, #20]
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	405a      	eors	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	615a      	str	r2, [r3, #20]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
 80029f0:	4613      	mov	r3, r2
 80029f2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80029fc:	787a      	ldrb	r2, [r7, #1]
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	08db      	lsrs	r3, r3, #3
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3208      	adds	r2, #8
 8002a18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	210f      	movs	r1, #15
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	8879      	ldrh	r1, [r7, #2]
 8002a2e:	08c9      	lsrs	r1, r1, #3
 8002a30:	b289      	uxth	r1, r1
 8002a32:	4608      	mov	r0, r1
 8002a34:	ea02 0103 	and.w	r1, r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f100 0208 	add.w	r2, r0, #8
 8002a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	08db      	lsrs	r3, r3, #3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	08db      	lsrs	r3, r3, #3
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3208      	adds	r2, #8
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <RCC_DeInit+0x60>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a15      	ldr	r2, [pc, #84]	; (8002ad8 <RCC_DeInit+0x60>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <RCC_DeInit+0x60>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <RCC_DeInit+0x60>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <RCC_DeInit+0x60>)
 8002a94:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002a98:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002a9c:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <RCC_DeInit+0x60>)
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <RCC_DeInit+0x64>)
 8002aa2:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <RCC_DeInit+0x60>)
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <RCC_DeInit+0x68>)
 8002aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <RCC_DeInit+0x60>)
 8002aae:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <RCC_DeInit+0x6c>)
 8002ab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <RCC_DeInit+0x60>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <RCC_DeInit+0x60>)
 8002aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <RCC_DeInit+0x60>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <RCC_DeInit+0x60>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	24003010 	.word	0x24003010
 8002ae0:	20003000 	.word	0x20003000
 8002ae4:	24003000 	.word	0x24003000

08002ae8 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <RCC_SYSCLKConfig+0x34>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f023 0303 	bic.w	r3, r3, #3
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <RCC_SYSCLKConfig+0x34>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6093      	str	r3, [r2, #8]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40023800 	.word	0x40023800

08002b20 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	2302      	movs	r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002b40:	4b47      	ldr	r3, [pc, #284]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d007      	beq.n	8002b60 <RCC_GetClocksFreq+0x40>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d009      	beq.n	8002b68 <RCC_GetClocksFreq+0x48>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d13d      	bne.n	8002bd4 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a42      	ldr	r2, [pc, #264]	; (8002c64 <RCC_GetClocksFreq+0x144>)
 8002b5c:	601a      	str	r2, [r3, #0]
    break;
 8002b5e:	e03d      	b.n	8002bdc <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a41      	ldr	r2, [pc, #260]	; (8002c68 <RCC_GetClocksFreq+0x148>)
 8002b64:	601a      	str	r2, [r3, #0]
    break;
 8002b66:	e039      	b.n	8002bdc <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0d9b      	lsrs	r3, r3, #22
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b74:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002b84:	4a38      	ldr	r2, [pc, #224]	; (8002c68 <RCC_GetClocksFreq+0x148>)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	4a34      	ldr	r2, [pc, #208]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002b8e:	6852      	ldr	r2, [r2, #4]
 8002b90:	0992      	lsrs	r2, r2, #6
 8002b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e00b      	b.n	8002bb6 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002b9e:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <RCC_GetClocksFreq+0x144>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba6:	4a2e      	ldr	r2, [pc, #184]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002ba8:	6852      	ldr	r2, [r2, #4]
 8002baa:	0992      	lsrs	r2, r2, #6
 8002bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	601a      	str	r2, [r3, #0]
    break;
 8002bd2:	e003      	b.n	8002bdc <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <RCC_GetClocksFreq+0x144>)
 8002bd8:	601a      	str	r2, [r3, #0]
    break;
 8002bda:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002bec:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <RCC_GetClocksFreq+0x14c>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	40da      	lsrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002c0c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	0a9b      	lsrs	r3, r3, #10
 8002c12:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <RCC_GetClocksFreq+0x14c>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	40da      	lsrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <RCC_GetClocksFreq+0x140>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002c34:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	0b5b      	lsrs	r3, r3, #13
 8002c3a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8002c3c:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <RCC_GetClocksFreq+0x14c>)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	40da      	lsrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3724      	adds	r7, #36	; 0x24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	017d7840 	.word	0x017d7840
 8002c6c:	20000008 	.word	0x20000008

08002c70 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	4909      	ldr	r1, [pc, #36]	; (8002cac <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002c8e:	e006      	b.n	8002c9e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4904      	ldr	r1, [pc, #16]	; (8002cac <RCC_AHB1PeriphClockCmd+0x3c>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <RCC_APB1PeriphClockCmd+0x3c>)
 8002cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc6:	4909      	ldr	r1, [pc, #36]	; (8002cec <RCC_APB1PeriphClockCmd+0x3c>)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8002cce:	e006      	b.n	8002cde <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <RCC_APB1PeriphClockCmd+0x3c>)
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	4904      	ldr	r1, [pc, #16]	; (8002cec <RCC_APB1PeriphClockCmd+0x3c>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800

08002cf0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	8a1b      	ldrh	r3, [r3, #16]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	88db      	ldrh	r3, [r3, #6]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	4313      	orrs	r3, r2
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	899b      	ldrh	r3, [r3, #12]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d3c:	f023 030c 	bic.w	r3, r3, #12
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	889a      	ldrh	r2, [r3, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	891b      	ldrh	r3, [r3, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002d52:	4313      	orrs	r3, r2
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8a9b      	ldrh	r3, [r3, #20]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	899b      	ldrh	r3, [r3, #12]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002d8a:	f107 0308 	add.w	r3, r7, #8
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fec6 	bl	8002b20 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a30      	ldr	r2, [pc, #192]	; (8002e58 <USART_Init+0x168>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <USART_Init+0xb4>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <USART_Init+0x16c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d102      	bne.n	8002daa <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	e001      	b.n	8002dae <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	899b      	ldrh	r3, [r3, #12]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	da0c      	bge.n	8002dd4 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002dba:	6a3a      	ldr	r2, [r7, #32]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009a      	lsls	r2, r3, #2
 8002dc4:	441a      	add	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e00b      	b.n	8002dec <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	009a      	lsls	r2, r3, #2
 8002dde:	441a      	add	r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dea:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <USART_Init+0x170>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	2264      	movs	r2, #100	; 0x64
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	899b      	ldrh	r3, [r3, #12]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b21b      	sxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da0c      	bge.n	8002e30 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3332      	adds	r3, #50	; 0x32
 8002e1c:	4a10      	ldr	r2, [pc, #64]	; (8002e60 <USART_Init+0x170>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2e:	e00b      	b.n	8002e48 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	3332      	adds	r3, #50	; 0x32
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <USART_Init+0x170>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	4313      	orrs	r3, r2
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	811a      	strh	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40011000 	.word	0x40011000
 8002e5c:	40011400 	.word	0x40011400
 8002e60:	51eb851f 	.word	0x51eb851f

08002e64 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	899b      	ldrh	r3, [r3, #12]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8002e86:	e007      	b.n	8002e98 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	899b      	ldrh	r3, [r3, #12]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	819a      	strh	r2, [r3, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002eb0:	887b      	ldrh	r3, [r7, #2]
 8002eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	809a      	strh	r2, [r3, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	e001      	b.n	8002ef2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <main>:
void printmsg(char* msg);

uint8_t isUartfree = 1;

int main(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af02      	add	r7, sp, #8
	//By default the system clk is running at max speed which 168Mhz
	//this is done by setsysclk function
	//if it is not required then deinit the clk config and set it to desired value using functions provided in stm32f4xx_rcc.c
	RCC_DeInit();
 8002f06:	f7ff fdb7 	bl	8002a78 <RCC_DeInit>
	//set HSE as default clk
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f7ff fdec 	bl	8002ae8 <RCC_SYSCLKConfig>
	//call the systemcoreclk update function the SystemCoreClock variable to newly set clk frequency
	SystemCoreClockUpdate();
 8002f10:	f000 f9d2 	bl	80032b8 <SystemCoreClockUpdate>

	//setup extra peripherals
	//init the LED GPIO
	Init_GPIO_LED();
 8002f14:	f000 f8e6 	bl	80030e4 <Init_GPIO_LED>
	Init_UART();
 8002f18:	f000 f918 	bl	800314c <Init_UART>

	//create  task
	xTaskCreate(vTask1_Handler, "Led_1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &xTask1_Handle);
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <main+0x74>)
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	2302      	movs	r3, #2
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2300      	movs	r3, #0
 8002f26:	2282      	movs	r2, #130	; 0x82
 8002f28:	4913      	ldr	r1, [pc, #76]	; (8002f78 <main+0x78>)
 8002f2a:	4814      	ldr	r0, [pc, #80]	; (8002f7c <main+0x7c>)
 8002f2c:	f7fd fefc 	bl	8000d28 <xTaskCreate>
	xTaskCreate(vTask2_Handler, "Led_2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &xTask2_Handle);
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <main+0x80>)
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	2302      	movs	r3, #2
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2282      	movs	r2, #130	; 0x82
 8002f3c:	4911      	ldr	r1, [pc, #68]	; (8002f84 <main+0x84>)
 8002f3e:	4812      	ldr	r0, [pc, #72]	; (8002f88 <main+0x88>)
 8002f40:	f7fd fef2 	bl	8000d28 <xTaskCreate>
	xTaskCreate(vTask3_Handler, "Led_3", configMINIMAL_STACK_SIZE, NULL, TASK3_PRIORITY, &xTask3_Handle);
 8002f44:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <main+0x8c>)
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2282      	movs	r2, #130	; 0x82
 8002f50:	490f      	ldr	r1, [pc, #60]	; (8002f90 <main+0x90>)
 8002f52:	4810      	ldr	r0, [pc, #64]	; (8002f94 <main+0x94>)
 8002f54:	f7fd fee8 	bl	8000d28 <xTaskCreate>
	xTaskCreate(vTask4_Handler, "Led_4", configMINIMAL_STACK_SIZE, NULL, TASK4_PRIORITY, &xTask4_Handle);
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <main+0x98>)
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2282      	movs	r2, #130	; 0x82
 8002f64:	490d      	ldr	r1, [pc, #52]	; (8002f9c <main+0x9c>)
 8002f66:	480e      	ldr	r0, [pc, #56]	; (8002fa0 <main+0xa0>)
 8002f68:	f7fd fede 	bl	8000d28 <xTaskCreate>

	//start the FreeRtos Task Scheduler
	vTaskStartScheduler();
 8002f6c:	f7fe f854 	bl	8001018 <vTaskStartScheduler>


	for(;;);
 8002f70:	e7fe      	b.n	8002f70 <main+0x70>
 8002f72:	bf00      	nop
 8002f74:	20012db4 	.word	0x20012db4
 8002f78:	0800359c 	.word	0x0800359c
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	20012db8 	.word	0x20012db8
 8002f84:	080035a4 	.word	0x080035a4
 8002f88:	08002ff5 	.word	0x08002ff5
 8002f8c:	20012dbc 	.word	0x20012dbc
 8002f90:	080035ac 	.word	0x080035ac
 8002f94:	08003045 	.word	0x08003045
 8002f98:	20012dc0 	.word	0x20012dc0
 8002f9c:	080035b4 	.word	0x080035b4
 8002fa0:	08003095 	.word	0x08003095

08002fa4 <vTask1_Handler>:
}

void vTask1_Handler(void* params) //this will toggle pin 15 led
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 1){
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <vTask1_Handler+0x40>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d1fb      	bne.n	8002fac <vTask1_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8002fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fb8:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <vTask1_Handler+0x44>)
 8002fba:	f7ff fd01 	bl	80029c0 <GPIO_ToggleBits>
			printmsg("Hello world led1\r\n");
 8002fbe:	480b      	ldr	r0, [pc, #44]	; (8002fec <vTask1_Handler+0x48>)
 8002fc0:	f000 f91c 	bl	80031fc <printmsg>
			vTaskDelay(50);
 8002fc4:	2032      	movs	r0, #50	; 0x32
 8002fc6:	f7fd fff3 	bl	8000fb0 <vTaskDelay>
			isUartfree = 2;
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <vTask1_Handler+0x40>)
 8002fcc:	2202      	movs	r2, #2
 8002fce:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <vTask1_Handler+0x4c>)
 8002fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	f3bf 8f6f 	isb	sy
		if(isUartfree == 1){
 8002fe0:	e7e4      	b.n	8002fac <vTask1_Handler+0x8>
 8002fe2:	bf00      	nop
 8002fe4:	20000018 	.word	0x20000018
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	080035bc 	.word	0x080035bc
 8002ff0:	e000ed04 	.word	0xe000ed04

08002ff4 <vTask2_Handler>:
	};
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself or can call the vtask1_handler
}
void vTask2_Handler(void* params) //this will toggle pin 14 led
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 2){
 8002ffc:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <vTask2_Handler+0x40>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d1fb      	bne.n	8002ffc <vTask2_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8003004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003008:	480b      	ldr	r0, [pc, #44]	; (8003038 <vTask2_Handler+0x44>)
 800300a:	f7ff fcd9 	bl	80029c0 <GPIO_ToggleBits>
			printmsg("Hello world led2\r\n");
 800300e:	480b      	ldr	r0, [pc, #44]	; (800303c <vTask2_Handler+0x48>)
 8003010:	f000 f8f4 	bl	80031fc <printmsg>
			vTaskDelay(60);
 8003014:	203c      	movs	r0, #60	; 0x3c
 8003016:	f7fd ffcb 	bl	8000fb0 <vTaskDelay>
			isUartfree = 3;
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <vTask2_Handler+0x40>)
 800301c:	2203      	movs	r2, #3
 800301e:	701a      	strb	r2, [r3, #0]
			taskYIELD(); //leave the mcpu and get in task ready state in the queue at last in same priority task lists
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <vTask2_Handler+0x4c>)
 8003022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
		if(isUartfree == 2){
 8003030:	e7e4      	b.n	8002ffc <vTask2_Handler+0x8>
 8003032:	bf00      	nop
 8003034:	20000018 	.word	0x20000018
 8003038:	40020c00 	.word	0x40020c00
 800303c:	080035d0 	.word	0x080035d0
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vTask3_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(xTask2_Handle); //NULL means the task itself
}

void vTask3_Handler(void* params) //this will toggle pin 13 led
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 3){
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <vTask3_Handler+0x40>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d1fb      	bne.n	800304c <vTask3_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8003054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003058:	480b      	ldr	r0, [pc, #44]	; (8003088 <vTask3_Handler+0x44>)
 800305a:	f7ff fcb1 	bl	80029c0 <GPIO_ToggleBits>
			printmsg("Hello world led3\r\n");
 800305e:	480b      	ldr	r0, [pc, #44]	; (800308c <vTask3_Handler+0x48>)
 8003060:	f000 f8cc 	bl	80031fc <printmsg>
			vTaskDelay(70);
 8003064:	2046      	movs	r0, #70	; 0x46
 8003066:	f7fd ffa3 	bl	8000fb0 <vTaskDelay>
			isUartfree = 4;
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <vTask3_Handler+0x40>)
 800306c:	2204      	movs	r2, #4
 800306e:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <vTask3_Handler+0x4c>)
 8003072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
		if(isUartfree == 3){
 8003080:	e7e4      	b.n	800304c <vTask3_Handler+0x8>
 8003082:	bf00      	nop
 8003084:	20000018 	.word	0x20000018
 8003088:	40020c00 	.word	0x40020c00
 800308c:	080035e4 	.word	0x080035e4
 8003090:	e000ed04 	.word	0xe000ed04

08003094 <vTask4_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(xTask3_Handle); //NULL means the task itself
}

void vTask4_Handler(void* params) //this will toggle pin 13 led
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 4){
 800309c:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <vTask4_Handler+0x40>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d1fb      	bne.n	800309c <vTask4_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 80030a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030a8:	480b      	ldr	r0, [pc, #44]	; (80030d8 <vTask4_Handler+0x44>)
 80030aa:	f7ff fc89 	bl	80029c0 <GPIO_ToggleBits>
			printmsg("Hello world led4\r\n");
 80030ae:	480b      	ldr	r0, [pc, #44]	; (80030dc <vTask4_Handler+0x48>)
 80030b0:	f000 f8a4 	bl	80031fc <printmsg>
			vTaskDelay(80);
 80030b4:	2050      	movs	r0, #80	; 0x50
 80030b6:	f7fd ff7b 	bl	8000fb0 <vTaskDelay>
			isUartfree = 1;
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <vTask4_Handler+0x40>)
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <vTask4_Handler+0x4c>)
 80030c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
		if(isUartfree == 4){
 80030d0:	e7e4      	b.n	800309c <vTask4_Handler+0x8>
 80030d2:	bf00      	nop
 80030d4:	20000018 	.word	0x20000018
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	080035f8 	.word	0x080035f8
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <Init_GPIO_LED>:
	vTaskDelete(xTask4_Handle); //NULL means the task itself
}


void Init_GPIO_LED(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
		//Init GPIOD Peripheral
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80030ea:	2101      	movs	r1, #1
 80030ec:	2008      	movs	r0, #8
 80030ee:	f7ff fdbf 	bl	8002c70 <RCC_AHB1PeriphClockCmd>
		GPIO_InitTypeDef gpio_led;
		gpio_led.GPIO_Mode = GPIO_Mode_OUT;
 80030f2:	2301      	movs	r3, #1
 80030f4:	713b      	strb	r3, [r7, #4]
		gpio_led.GPIO_OType = GPIO_OType_PP;
 80030f6:	2300      	movs	r3, #0
 80030f8:	71bb      	strb	r3, [r7, #6]
		gpio_led.GPIO_PuPd = GPIO_PuPd_UP;
 80030fa:	2301      	movs	r3, #1
 80030fc:	71fb      	strb	r3, [r7, #7]
		gpio_led.GPIO_Pin = GPIO_Pin_15; //blue led
 80030fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003102:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8003104:	463b      	mov	r3, r7
 8003106:	4619      	mov	r1, r3
 8003108:	480f      	ldr	r0, [pc, #60]	; (8003148 <Init_GPIO_LED+0x64>)
 800310a:	f7ff fbcb 	bl	80028a4 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_14; //red led
 800310e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003112:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8003114:	463b      	mov	r3, r7
 8003116:	4619      	mov	r1, r3
 8003118:	480b      	ldr	r0, [pc, #44]	; (8003148 <Init_GPIO_LED+0x64>)
 800311a:	f7ff fbc3 	bl	80028a4 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_13; //orange led
 800311e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003122:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8003124:	463b      	mov	r3, r7
 8003126:	4619      	mov	r1, r3
 8003128:	4807      	ldr	r0, [pc, #28]	; (8003148 <Init_GPIO_LED+0x64>)
 800312a:	f7ff fbbb 	bl	80028a4 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_12; //green led
 800312e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003132:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8003134:	463b      	mov	r3, r7
 8003136:	4619      	mov	r1, r3
 8003138:	4803      	ldr	r0, [pc, #12]	; (8003148 <Init_GPIO_LED+0x64>)
 800313a:	f7ff fbb3 	bl	80028a4 <GPIO_Init>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40020c00 	.word	0x40020c00

0800314c <Init_UART>:

void Init_UART(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
	//Init uart 4 peripheral clk
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8003152:	2101      	movs	r1, #1
 8003154:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003158:	f7ff fdaa 	bl	8002cb0 <RCC_APB1PeriphClockCmd>

	//pc10 tx :: pc11 rx
	//enable GPIOC peripheral port
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800315c:	2101      	movs	r1, #1
 800315e:	2004      	movs	r0, #4
 8003160:	f7ff fd86 	bl	8002c70 <RCC_AHB1PeriphClockCmd>
	//init the pins to alternate function mode
	GPIO_InitTypeDef gpio_uart4;
	memset(&gpio_uart4,0,sizeof(gpio_uart4));
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	2208      	movs	r2, #8
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f000 f9f4 	bl	800355a <memset>
	gpio_uart4.GPIO_Pin = GPIO_Pin_10;
 8003172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003176:	613b      	str	r3, [r7, #16]
	gpio_uart4.GPIO_Mode = GPIO_Mode_AF;
 8003178:	2302      	movs	r3, #2
 800317a:	753b      	strb	r3, [r7, #20]
	gpio_uart4.GPIO_PuPd = GPIO_PuPd_UP;
 800317c:	2301      	movs	r3, #1
 800317e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOC, &gpio_uart4);
 8003180:	f107 0310 	add.w	r3, r7, #16
 8003184:	4619      	mov	r1, r3
 8003186:	481b      	ldr	r0, [pc, #108]	; (80031f4 <Init_UART+0xa8>)
 8003188:	f7ff fb8c 	bl	80028a4 <GPIO_Init>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 800318c:	2208      	movs	r2, #8
 800318e:	210a      	movs	r1, #10
 8003190:	4818      	ldr	r0, [pc, #96]	; (80031f4 <Init_UART+0xa8>)
 8003192:	f7ff fc27 	bl	80029e4 <GPIO_PinAFConfig>

	gpio_uart4.GPIO_Pin = GPIO_Pin_11;
 8003196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800319a:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &gpio_uart4);
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	4619      	mov	r1, r3
 80031a2:	4814      	ldr	r0, [pc, #80]	; (80031f4 <Init_UART+0xa8>)
 80031a4:	f7ff fb7e 	bl	80028a4 <GPIO_Init>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 80031a8:	2208      	movs	r2, #8
 80031aa:	210b      	movs	r1, #11
 80031ac:	4811      	ldr	r0, [pc, #68]	; (80031f4 <Init_UART+0xa8>)
 80031ae:	f7ff fc19 	bl	80029e4 <GPIO_PinAFConfig>

	//uart init
	USART_InitTypeDef uart4_init;
	memset(&uart4_init,0,sizeof(uart4_init));
 80031b2:	463b      	mov	r3, r7
 80031b4:	2210      	movs	r2, #16
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f9ce 	bl	800355a <memset>
	uart4_init.USART_BaudRate = 115200;
 80031be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031c2:	603b      	str	r3, [r7, #0]
	uart4_init.USART_Mode = (USART_Mode_Rx | USART_Mode_Tx);
 80031c4:	230c      	movs	r3, #12
 80031c6:	817b      	strh	r3, [r7, #10]
	uart4_init.USART_Parity = USART_Parity_No;
 80031c8:	2300      	movs	r3, #0
 80031ca:	813b      	strh	r3, [r7, #8]
	uart4_init.USART_StopBits = USART_StopBits_1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	80fb      	strh	r3, [r7, #6]
	uart4_init.USART_WordLength = USART_WordLength_8b;
 80031d0:	2300      	movs	r3, #0
 80031d2:	80bb      	strh	r3, [r7, #4]
	uart4_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80031d4:	2300      	movs	r3, #0
 80031d6:	81bb      	strh	r3, [r7, #12]
	USART_Init(UART4, &uart4_init);
 80031d8:	463b      	mov	r3, r7
 80031da:	4619      	mov	r1, r3
 80031dc:	4806      	ldr	r0, [pc, #24]	; (80031f8 <Init_UART+0xac>)
 80031de:	f7ff fd87 	bl	8002cf0 <USART_Init>

	//enable uart4 peripheral
	USART_Cmd(UART4, ENABLE);
 80031e2:	2101      	movs	r1, #1
 80031e4:	4804      	ldr	r0, [pc, #16]	; (80031f8 <Init_UART+0xac>)
 80031e6:	f7ff fe3d 	bl	8002e64 <USART_Cmd>

}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40004c00 	.word	0x40004c00

080031fc <printmsg>:

void printmsg(char* msg)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<strlen(msg); i++){
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e013      	b.n	8003232 <printmsg+0x36>
		while(USART_GetFlagStatus(UART4, USART_FLAG_TXE) != SET); //wait until TXE is not 0
 800320a:	bf00      	nop
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	480e      	ldr	r0, [pc, #56]	; (8003248 <printmsg+0x4c>)
 8003210:	f7ff fe5a 	bl	8002ec8 <USART_GetFlagStatus>
 8003214:	4603      	mov	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d1f8      	bne.n	800320c <printmsg+0x10>
		USART_SendData(UART4, msg[i]);
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	4619      	mov	r1, r3
 8003226:	4808      	ldr	r0, [pc, #32]	; (8003248 <printmsg+0x4c>)
 8003228:	f7ff fe3c 	bl	8002ea4 <USART_SendData>
	for(uint32_t i=0; i<strlen(msg); i++){
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fc ffec 	bl	8000210 <strlen>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4293      	cmp	r3, r2
 800323e:	d3e4      	bcc.n	800320a <printmsg+0xe>
	}
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40004c00 	.word	0x40004c00

0800324c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003250:	4b16      	ldr	r3, [pc, #88]	; (80032ac <SystemInit+0x60>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <SystemInit+0x60>)
 8003258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800325c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003260:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <SystemInit+0x64>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a12      	ldr	r2, [pc, #72]	; (80032b0 <SystemInit+0x64>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800326c:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <SystemInit+0x64>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <SystemInit+0x64>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a0e      	ldr	r2, [pc, #56]	; (80032b0 <SystemInit+0x64>)
 8003278:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800327c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003280:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <SystemInit+0x64>)
 8003284:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <SystemInit+0x68>)
 8003286:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <SystemInit+0x64>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <SystemInit+0x64>)
 800328e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003292:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003294:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <SystemInit+0x64>)
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800329a:	f000 f889 	bl	80033b0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800329e:	4b03      	ldr	r3, [pc, #12]	; (80032ac <SystemInit+0x60>)
 80032a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032a4:	609a      	str	r2, [r3, #8]
#endif
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00
 80032b0:	40023800 	.word	0x40023800
 80032b4:	24003010 	.word	0x24003010

080032b8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	2302      	movs	r3, #2
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	2302      	movs	r3, #2
 80032d0:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80032d2:	4b32      	ldr	r3, [pc, #200]	; (800339c <SystemCoreClockUpdate+0xe4>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d007      	beq.n	80032f2 <SystemCoreClockUpdate+0x3a>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d009      	beq.n	80032fa <SystemCoreClockUpdate+0x42>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d13d      	bne.n	8003366 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80032ea:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <SystemCoreClockUpdate+0xe8>)
 80032ec:	4a2d      	ldr	r2, [pc, #180]	; (80033a4 <SystemCoreClockUpdate+0xec>)
 80032ee:	601a      	str	r2, [r3, #0]
      break;
 80032f0:	e03d      	b.n	800336e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <SystemCoreClockUpdate+0xe8>)
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <SystemCoreClockUpdate+0xf0>)
 80032f6:	601a      	str	r2, [r3, #0]
      break;
 80032f8:	e039      	b.n	800336e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80032fa:	4b28      	ldr	r3, [pc, #160]	; (800339c <SystemCoreClockUpdate+0xe4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	0d9b      	lsrs	r3, r3, #22
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003306:	4b25      	ldr	r3, [pc, #148]	; (800339c <SystemCoreClockUpdate+0xe4>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800330e:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003316:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <SystemCoreClockUpdate+0xf0>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	4a1f      	ldr	r2, [pc, #124]	; (800339c <SystemCoreClockUpdate+0xe4>)
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	0992      	lsrs	r2, r2, #6
 8003324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003328:	fb02 f303 	mul.w	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e00b      	b.n	8003348 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003330:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <SystemCoreClockUpdate+0xec>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <SystemCoreClockUpdate+0xe4>)
 800333a:	6852      	ldr	r2, [r2, #4]
 800333c:	0992      	lsrs	r2, r2, #6
 800333e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003348:	4b14      	ldr	r3, [pc, #80]	; (800339c <SystemCoreClockUpdate+0xe4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	3301      	adds	r3, #1
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <SystemCoreClockUpdate+0xe8>)
 8003362:	6013      	str	r3, [r2, #0]
      break;
 8003364:	e003      	b.n	800336e <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <SystemCoreClockUpdate+0xe8>)
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <SystemCoreClockUpdate+0xec>)
 800336a:	601a      	str	r2, [r3, #0]
      break;
 800336c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800336e:	4b0b      	ldr	r3, [pc, #44]	; (800339c <SystemCoreClockUpdate+0xe4>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <SystemCoreClockUpdate+0xf4>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <SystemCoreClockUpdate+0xe8>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <SystemCoreClockUpdate+0xe8>)
 800338c:	6013      	str	r3, [r2, #0]
}
 800338e:	bf00      	nop
 8003390:	371c      	adds	r7, #28
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	2000001c 	.word	0x2000001c
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840
 80033ac:	20000020 	.word	0x20000020

080033b0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <SetSysClock+0xe8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a35      	ldr	r2, [pc, #212]	; (8003498 <SetSysClock+0xe8>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80033ca:	4b33      	ldr	r3, [pc, #204]	; (8003498 <SetSysClock+0xe8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <SetSysClock+0x38>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80033e6:	d1f0      	bne.n	80033ca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <SetSysClock+0xe8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80033f4:	2301      	movs	r3, #1
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	e001      	b.n	80033fe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80033fa:	2300      	movs	r3, #0
 80033fc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d142      	bne.n	800348a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003404:	4b24      	ldr	r3, [pc, #144]	; (8003498 <SetSysClock+0xe8>)
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <SetSysClock+0xe8>)
 800340a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003410:	4b22      	ldr	r3, [pc, #136]	; (800349c <SetSysClock+0xec>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a21      	ldr	r2, [pc, #132]	; (800349c <SetSysClock+0xec>)
 8003416:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <SetSysClock+0xe8>)
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <SetSysClock+0xe8>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003424:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <SetSysClock+0xe8>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <SetSysClock+0xe8>)
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003430:	4b19      	ldr	r3, [pc, #100]	; (8003498 <SetSysClock+0xe8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <SetSysClock+0xe8>)
 8003436:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800343a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <SetSysClock+0xe8>)
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <SetSysClock+0xf0>)
 8003440:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003442:	4b15      	ldr	r3, [pc, #84]	; (8003498 <SetSysClock+0xe8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a14      	ldr	r2, [pc, #80]	; (8003498 <SetSysClock+0xe8>)
 8003448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800344c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800344e:	bf00      	nop
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <SetSysClock+0xe8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f9      	beq.n	8003450 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <SetSysClock+0xf4>)
 800345e:	f240 7205 	movw	r2, #1797	; 0x705
 8003462:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <SetSysClock+0xe8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <SetSysClock+0xe8>)
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <SetSysClock+0xe8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4a08      	ldr	r2, [pc, #32]	; (8003498 <SetSysClock+0xe8>)
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800347c:	bf00      	nop
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <SetSysClock+0xe8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d1f9      	bne.n	800347e <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	07405419 	.word	0x07405419
 80034a4:	40023c00 	.word	0x40023c00

080034a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034ac:	480d      	ldr	r0, [pc, #52]	; (80034e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80034ae:	490e      	ldr	r1, [pc, #56]	; (80034e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034b0:	4a0e      	ldr	r2, [pc, #56]	; (80034ec <LoopForever+0xe>)
  movs r3, #0
 80034b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b4:	e002      	b.n	80034bc <LoopCopyDataInit>

080034b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ba:	3304      	adds	r3, #4

080034bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034c0:	d3f9      	bcc.n	80034b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034c2:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034c4:	4c0b      	ldr	r4, [pc, #44]	; (80034f4 <LoopForever+0x16>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c8:	e001      	b.n	80034ce <LoopFillZerobss>

080034ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034cc:	3204      	adds	r2, #4

080034ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034d0:	d3fb      	bcc.n	80034ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034d2:	f7ff febb 	bl	800324c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80034d6:	f000 f811 	bl	80034fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034da:	f7ff fd11 	bl	8002f00 <main>

080034de <LoopForever>:

LoopForever:
    b LoopForever
 80034de:	e7fe      	b.n	80034de <LoopForever>
  ldr   r0, =_estack
 80034e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e8:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80034ec:	08003614 	.word	0x08003614
  ldr r2, =_sbss
 80034f0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80034f4:	20012e04 	.word	0x20012e04

080034f8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034f8:	e7fe      	b.n	80034f8 <ADC_IRQHandler>
	...

080034fc <__libc_init_array>:
 80034fc:	b570      	push	{r4, r5, r6, lr}
 80034fe:	4e0d      	ldr	r6, [pc, #52]	; (8003534 <__libc_init_array+0x38>)
 8003500:	4c0d      	ldr	r4, [pc, #52]	; (8003538 <__libc_init_array+0x3c>)
 8003502:	1ba4      	subs	r4, r4, r6
 8003504:	10a4      	asrs	r4, r4, #2
 8003506:	2500      	movs	r5, #0
 8003508:	42a5      	cmp	r5, r4
 800350a:	d109      	bne.n	8003520 <__libc_init_array+0x24>
 800350c:	4e0b      	ldr	r6, [pc, #44]	; (800353c <__libc_init_array+0x40>)
 800350e:	4c0c      	ldr	r4, [pc, #48]	; (8003540 <__libc_init_array+0x44>)
 8003510:	f000 f82c 	bl	800356c <_init>
 8003514:	1ba4      	subs	r4, r4, r6
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	2500      	movs	r5, #0
 800351a:	42a5      	cmp	r5, r4
 800351c:	d105      	bne.n	800352a <__libc_init_array+0x2e>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003524:	4798      	blx	r3
 8003526:	3501      	adds	r5, #1
 8003528:	e7ee      	b.n	8003508 <__libc_init_array+0xc>
 800352a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800352e:	4798      	blx	r3
 8003530:	3501      	adds	r5, #1
 8003532:	e7f2      	b.n	800351a <__libc_init_array+0x1e>
 8003534:	0800360c 	.word	0x0800360c
 8003538:	0800360c 	.word	0x0800360c
 800353c:	0800360c 	.word	0x0800360c
 8003540:	08003610 	.word	0x08003610

08003544 <memcpy>:
 8003544:	b510      	push	{r4, lr}
 8003546:	1e43      	subs	r3, r0, #1
 8003548:	440a      	add	r2, r1
 800354a:	4291      	cmp	r1, r2
 800354c:	d100      	bne.n	8003550 <memcpy+0xc>
 800354e:	bd10      	pop	{r4, pc}
 8003550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003558:	e7f7      	b.n	800354a <memcpy+0x6>

0800355a <memset>:
 800355a:	4402      	add	r2, r0
 800355c:	4603      	mov	r3, r0
 800355e:	4293      	cmp	r3, r2
 8003560:	d100      	bne.n	8003564 <memset+0xa>
 8003562:	4770      	bx	lr
 8003564:	f803 1b01 	strb.w	r1, [r3], #1
 8003568:	e7f9      	b.n	800355e <memset+0x4>
	...

0800356c <_init>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr

08003578 <_fini>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr
