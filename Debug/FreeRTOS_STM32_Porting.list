
FreeRTOS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005080  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b0  080053b0  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080053b0  080053b0  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053b0  080053b0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053b4  080053b4  000153b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080053b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015c4c  20000030  080053e8  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015c7c  080053e8  00025c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114f0  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020df  00000000  00000000  00031550  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d68  00000000  00000000  00033630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c50  00000000  00000000  00034398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c16  00000000  00000000  00034fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7f3  00000000  00000000  00037bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071f61  00000000  00000000  000433f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5352  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f4  00000000  00000000  000b53d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000030 	.word	0x20000030
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005238 	.word	0x08005238

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000034 	.word	0x20000034
 800020c:	08005238 	.word	0x08005238

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20015bd4 	.word	0x20015bd4

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr

080002b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f103 0208 	add.w	r2, r3, #8
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f103 0208 	add.w	r2, r3, #8
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f103 0208 	add.w	r2, r3, #8
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800030e:	b480      	push	{r7}
 8000310:	b085      	sub	sp, #20
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	689b      	ldr	r3, [r3, #8]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1c5a      	adds	r2, r3, #1
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	601a      	str	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000356:	b480      	push	{r7}
 8000358:	b085      	sub	sp, #20
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
 800035e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800036c:	d103      	bne.n	8000376 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	e00c      	b.n	8000390 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3308      	adds	r3, #8
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	e002      	b.n	8000384 <vListInsert+0x2e>
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	429a      	cmp	r2, r3
 800038e:	d2f6      	bcs.n	800037e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	685a      	ldr	r2, [r3, #4]
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	683a      	ldr	r2, [r7, #0]
 800039e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	601a      	str	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	6892      	ldr	r2, [r2, #8]
 80003de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	6852      	ldr	r2, [r2, #4]
 80003e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d103      	bne.n	80003fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	689a      	ldr	r2, [r3, #8]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	1e5a      	subs	r2, r3, #1
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	681b      	ldr	r3, [r3, #0]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3714      	adds	r7, #20
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d109      	bne.n	8000444 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000434:	f383 8811 	msr	BASEPRI, r3
 8000438:	f3bf 8f6f 	isb	sy
 800043c:	f3bf 8f4f 	dsb	sy
 8000440:	60bb      	str	r3, [r7, #8]
 8000442:	e7fe      	b.n	8000442 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8000444:	f002 f864 	bl	8002510 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000450:	68f9      	ldr	r1, [r7, #12]
 8000452:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000454:	fb01 f303 	mul.w	r3, r1, r3
 8000458:	441a      	add	r2, r3
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2200      	movs	r2, #0
 8000462:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000474:	3b01      	subs	r3, #1
 8000476:	68f9      	ldr	r1, [r7, #12]
 8000478:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800047a:	fb01 f303 	mul.w	r3, r1, r3
 800047e:	441a      	add	r2, r3
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	22ff      	movs	r2, #255	; 0xff
 8000488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	22ff      	movs	r2, #255	; 0xff
 8000490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d114      	bne.n	80004c4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d01a      	beq.n	80004d8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3310      	adds	r3, #16
 80004a6:	4618      	mov	r0, r3
 80004a8:	f001 f94a 	bl	8001740 <xTaskRemoveFromEventList>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d012      	beq.n	80004d8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <xQueueGenericReset+0xcc>)
 80004b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	f3bf 8f4f 	dsb	sy
 80004be:	f3bf 8f6f 	isb	sy
 80004c2:	e009      	b.n	80004d8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3310      	adds	r3, #16
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fef3 	bl	80002b4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3324      	adds	r3, #36	; 0x24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff feee 	bl	80002b4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80004d8:	f002 f848 	bl	800256c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80004dc:	2301      	movs	r3, #1
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	e000ed04 	.word	0xe000ed04

080004ec <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b08c      	sub	sp, #48	; 0x30
 80004f0:	af02      	add	r7, sp, #8
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	4613      	mov	r3, r2
 80004f8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d109      	bne.n	8000514 <xQueueGenericCreate+0x28>
 8000500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000504:	f383 8811 	msr	BASEPRI, r3
 8000508:	f3bf 8f6f 	isb	sy
 800050c:	f3bf 8f4f 	dsb	sy
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	e7fe      	b.n	8000512 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	fb02 f303 	mul.w	r3, r2, r3
 800051c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d006      	beq.n	8000532 <xQueueGenericCreate+0x46>
 8000524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	fbb2 f3f3 	udiv	r3, r2, r3
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	429a      	cmp	r2, r3
 8000530:	d101      	bne.n	8000536 <xQueueGenericCreate+0x4a>
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <xQueueGenericCreate+0x4c>
 8000536:	2300      	movs	r3, #0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d109      	bne.n	8000550 <xQueueGenericCreate+0x64>
 800053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000540:	f383 8811 	msr	BASEPRI, r3
 8000544:	f3bf 8f6f 	isb	sy
 8000548:	f3bf 8f4f 	dsb	sy
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e7fe      	b.n	800054e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000556:	d909      	bls.n	800056c <xQueueGenericCreate+0x80>
 8000558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800055c:	f383 8811 	msr	BASEPRI, r3
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	f3bf 8f4f 	dsb	sy
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	e7fe      	b.n	800056a <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056e:	3350      	adds	r3, #80	; 0x50
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f8ef 	bl	8002754 <pvPortMalloc>
 8000576:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00d      	beq.n	800059a <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800057e:	6a3b      	ldr	r3, [r7, #32]
 8000580:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	3350      	adds	r3, #80	; 0x50
 8000586:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	4613      	mov	r3, r2
 8000590:	69fa      	ldr	r2, [r7, #28]
 8000592:	68b9      	ldr	r1, [r7, #8]
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f000 f805 	bl	80005a4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800059a:	6a3b      	ldr	r3, [r7, #32]
    }
 800059c:	4618      	mov	r0, r3
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d103      	bne.n	80005c0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	69ba      	ldr	r2, [r7, #24]
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	e002      	b.n	80005c6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80005d2:	2101      	movs	r1, #1
 80005d4:	69b8      	ldr	r0, [r7, #24]
 80005d6:	f7ff ff21 	bl	800041c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	78fa      	ldrb	r2, [r7, #3]
 80005de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80005e2:	78fb      	ldrb	r3, [r7, #3]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	2073      	movs	r0, #115	; 0x73
 80005ea:	f003 f8d5 	bl	8003798 <SEGGER_SYSVIEW_RecordU32x3>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	; 0x40
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000606:	2300      	movs	r3, #0
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000610:	2b00      	cmp	r3, #0
 8000612:	d109      	bne.n	8000628 <xQueueGenericSend+0x30>
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
 8000626:	e7fe      	b.n	8000626 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d103      	bne.n	8000636 <xQueueGenericSend+0x3e>
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	2b00      	cmp	r3, #0
 8000634:	d101      	bne.n	800063a <xQueueGenericSend+0x42>
 8000636:	2301      	movs	r3, #1
 8000638:	e000      	b.n	800063c <xQueueGenericSend+0x44>
 800063a:	2300      	movs	r3, #0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d109      	bne.n	8000654 <xQueueGenericSend+0x5c>
 8000640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000644:	f383 8811 	msr	BASEPRI, r3
 8000648:	f3bf 8f6f 	isb	sy
 800064c:	f3bf 8f4f 	dsb	sy
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
 8000652:	e7fe      	b.n	8000652 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d103      	bne.n	8000662 <xQueueGenericSend+0x6a>
 800065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800065e:	2b01      	cmp	r3, #1
 8000660:	d101      	bne.n	8000666 <xQueueGenericSend+0x6e>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <xQueueGenericSend+0x70>
 8000666:	2300      	movs	r3, #0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d109      	bne.n	8000680 <xQueueGenericSend+0x88>
 800066c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000670:	f383 8811 	msr	BASEPRI, r3
 8000674:	f3bf 8f6f 	isb	sy
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	623b      	str	r3, [r7, #32]
 800067e:	e7fe      	b.n	800067e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000680:	f001 f9fa 	bl	8001a78 <xTaskGetSchedulerState>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d102      	bne.n	8000690 <xQueueGenericSend+0x98>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <xQueueGenericSend+0x9c>
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <xQueueGenericSend+0x9e>
 8000694:	2300      	movs	r3, #0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d109      	bne.n	80006ae <xQueueGenericSend+0xb6>
 800069a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069e:	f383 8811 	msr	BASEPRI, r3
 80006a2:	f3bf 8f6f 	isb	sy
 80006a6:	f3bf 8f4f 	dsb	sy
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	e7fe      	b.n	80006ac <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006ae:	f001 ff2f 	bl	8002510 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80006b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d302      	bcc.n	80006c4 <xQueueGenericSend+0xcc>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d136      	bne.n	8000732 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 80006c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fdf0 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	460b      	mov	r3, r1
 80006d6:	4601      	mov	r1, r0
 80006d8:	205a      	movs	r0, #90	; 0x5a
 80006da:	f003 f8d3 	bl	8003884 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	68b9      	ldr	r1, [r7, #8]
 80006e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006e4:	f000 fa78 	bl	8000bd8 <prvCopyDataToQueue>
 80006e8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80006ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d010      	beq.n	8000714 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80006f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f4:	3324      	adds	r3, #36	; 0x24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f822 	bl	8001740 <xTaskRemoveFromEventList>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d013      	beq.n	800072a <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000702:	4b4d      	ldr	r3, [pc, #308]	; (8000838 <xQueueGenericSend+0x240>)
 8000704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	f3bf 8f6f 	isb	sy
 8000712:	e00a      	b.n	800072a <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800071a:	4b47      	ldr	r3, [pc, #284]	; (8000838 <xQueueGenericSend+0x240>)
 800071c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	f3bf 8f4f 	dsb	sy
 8000726:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800072a:	f001 ff1f 	bl	800256c <vPortExitCritical>
                return pdPASS;
 800072e:	2301      	movs	r3, #1
 8000730:	e07d      	b.n	800082e <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d110      	bne.n	800075a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000738:	f001 ff18 	bl	800256c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fdb4 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	460b      	mov	r3, r1
 800074e:	4601      	mov	r1, r0
 8000750:	205a      	movs	r0, #90	; 0x5a
 8000752:	f003 f897 	bl	8003884 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000756:	2300      	movs	r3, #0
 8000758:	e069      	b.n	800082e <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 800075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800075c:	2b00      	cmp	r3, #0
 800075e:	d106      	bne.n	800076e <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f851 	bl	800180c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800076a:	2301      	movs	r3, #1
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800076e:	f001 fefd 	bl	800256c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000772:	f000 fd9f 	bl	80012b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000776:	f001 fecb 	bl	8002510 <vPortEnterCritical>
 800077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800077c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000780:	b25b      	sxtb	r3, r3
 8000782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000786:	d103      	bne.n	8000790 <xQueueGenericSend+0x198>
 8000788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800079c:	d103      	bne.n	80007a6 <xQueueGenericSend+0x1ae>
 800079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80007a6:	f001 fee1 	bl	800256c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007aa:	1d3a      	adds	r2, r7, #4
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f840 	bl	8001838 <xTaskCheckForTimeOut>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d124      	bne.n	8000808 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80007be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007c0:	f000 fb02 	bl	8000dc8 <prvIsQueueFull>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d018      	beq.n	80007fc <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80007ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007cc:	3310      	adds	r3, #16
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 ff62 	bl	800169c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80007d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007da:	f000 fa8d 	bl	8000cf8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80007de:	f000 fd77 	bl	80012d0 <xTaskResumeAll>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f47f af62 	bne.w	80006ae <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <xQueueGenericSend+0x240>)
 80007ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	f3bf 8f4f 	dsb	sy
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	e758      	b.n	80006ae <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80007fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007fe:	f000 fa7b 	bl	8000cf8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000802:	f000 fd65 	bl	80012d0 <xTaskResumeAll>
 8000806:	e752      	b.n	80006ae <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800080a:	f000 fa75 	bl	8000cf8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800080e:	f000 fd5f 	bl	80012d0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fd49 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	6879      	ldr	r1, [r7, #4]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	4601      	mov	r1, r0
 8000826:	205a      	movs	r0, #90	; 0x5a
 8000828:	f003 f82c 	bl	8003884 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800082c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800082e:	4618      	mov	r0, r3
 8000830:	3738      	adds	r7, #56	; 0x38
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000ed04 	.word	0xe000ed04

0800083c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b090      	sub	sp, #64	; 0x40
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <xQueueGenericSendFromISR+0x2c>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
 8000866:	e7fe      	b.n	8000866 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d103      	bne.n	8000876 <xQueueGenericSendFromISR+0x3a>
 800086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <xQueueGenericSendFromISR+0x3e>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <xQueueGenericSendFromISR+0x40>
 800087a:	2300      	movs	r3, #0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d109      	bne.n	8000894 <xQueueGenericSendFromISR+0x58>
 8000880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000884:	f383 8811 	msr	BASEPRI, r3
 8000888:	f3bf 8f6f 	isb	sy
 800088c:	f3bf 8f4f 	dsb	sy
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
 8000892:	e7fe      	b.n	8000892 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d103      	bne.n	80008a2 <xQueueGenericSendFromISR+0x66>
 800089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800089c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d101      	bne.n	80008a6 <xQueueGenericSendFromISR+0x6a>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <xQueueGenericSendFromISR+0x6c>
 80008a6:	2300      	movs	r3, #0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <xQueueGenericSendFromISR+0x84>
 80008ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b0:	f383 8811 	msr	BASEPRI, r3
 80008b4:	f3bf 8f6f 	isb	sy
 80008b8:	f3bf 8f4f 	dsb	sy
 80008bc:	623b      	str	r3, [r7, #32]
 80008be:	e7fe      	b.n	80008be <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80008c0:	f001 ff0a 	bl	80026d8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80008c4:	f3ef 8211 	mrs	r2, BASEPRI
 80008c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008cc:	f383 8811 	msr	BASEPRI, r3
 80008d0:	f3bf 8f6f 	isb	sy
 80008d4:	f3bf 8f4f 	dsb	sy
 80008d8:	61fa      	str	r2, [r7, #28]
 80008da:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80008dc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d302      	bcc.n	80008f2 <xQueueGenericSendFromISR+0xb6>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d147      	bne.n	8000982 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80008f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fcd1 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 800090a:	4601      	mov	r1, r0
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	461a      	mov	r2, r3
 8000910:	2060      	movs	r0, #96	; 0x60
 8000912:	f002 fee7 	bl	80036e4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800091c:	f000 f95c 	bl	8000bd8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000920:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000928:	d112      	bne.n	8000950 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092e:	2b00      	cmp	r3, #0
 8000930:	d024      	beq.n	800097c <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000934:	3324      	adds	r3, #36	; 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ff02 	bl	8001740 <xTaskRemoveFromEventList>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01c      	beq.n	800097c <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d019      	beq.n	800097c <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e015      	b.n	800097c <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000950:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000954:	2b7f      	cmp	r3, #127	; 0x7f
 8000956:	d109      	bne.n	800096c <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8000958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095c:	f383 8811 	msr	BASEPRI, r3
 8000960:	f3bf 8f6f 	isb	sy
 8000964:	f3bf 8f4f 	dsb	sy
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e7fe      	b.n	800096a <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000970:	3301      	adds	r3, #1
 8000972:	b2db      	uxtb	r3, r3
 8000974:	b25a      	sxtb	r2, r3
 8000976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800097c:	2301      	movs	r3, #1
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000980:	e00b      	b.n	800099a <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fc91 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 800098a:	4601      	mov	r1, r0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	461a      	mov	r2, r3
 8000990:	2060      	movs	r0, #96	; 0x60
 8000992:	f002 fea7 	bl	80036e4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000996:	2300      	movs	r3, #0
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800099a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80009a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3740      	adds	r7, #64	; 0x40
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b08f      	sub	sp, #60	; 0x3c
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80009c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d109      	bne.n	80009de <xQueueReceive+0x2e>
        __asm volatile
 80009ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ce:	f383 8811 	msr	BASEPRI, r3
 80009d2:	f3bf 8f6f 	isb	sy
 80009d6:	f3bf 8f4f 	dsb	sy
 80009da:	623b      	str	r3, [r7, #32]
 80009dc:	e7fe      	b.n	80009dc <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <xQueueReceive+0x3c>
 80009e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <xQueueReceive+0x40>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <xQueueReceive+0x42>
 80009f0:	2300      	movs	r3, #0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d109      	bne.n	8000a0a <xQueueReceive+0x5a>
 80009f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009fa:	f383 8811 	msr	BASEPRI, r3
 80009fe:	f3bf 8f6f 	isb	sy
 8000a02:	f3bf 8f4f 	dsb	sy
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	e7fe      	b.n	8000a08 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a0a:	f001 f835 	bl	8001a78 <xTaskGetSchedulerState>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <xQueueReceive+0x6a>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <xQueueReceive+0x6e>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <xQueueReceive+0x70>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d109      	bne.n	8000a38 <xQueueReceive+0x88>
 8000a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a28:	f383 8811 	msr	BASEPRI, r3
 8000a2c:	f3bf 8f6f 	isb	sy
 8000a30:	f3bf 8f4f 	dsb	sy
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	e7fe      	b.n	8000a36 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000a38:	f001 fd6a 	bl	8002510 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d031      	beq.n	8000aac <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a4c:	f000 f92e 	bl	8000cac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 fc2a 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000a58:	4604      	mov	r4, r0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f003 fc26 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000a60:	4601      	mov	r1, r0
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	460a      	mov	r2, r1
 8000a6c:	4621      	mov	r1, r4
 8000a6e:	205c      	movs	r0, #92	; 0x5c
 8000a70:	f002 ff08 	bl	8003884 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	1e5a      	subs	r2, r3, #1
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00f      	beq.n	8000aa4 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	3310      	adds	r3, #16
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fe59 	bl	8001740 <xTaskRemoveFromEventList>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d007      	beq.n	8000aa4 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a94:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <xQueueReceive+0x224>)
 8000a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	f3bf 8f4f 	dsb	sy
 8000aa0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000aa4:	f001 fd62 	bl	800256c <vPortExitCritical>
                return pdPASS;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e08e      	b.n	8000bca <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d115      	bne.n	8000ade <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000ab2:	f001 fd5b 	bl	800256c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fbf7 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000abe:	4604      	mov	r4, r0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f003 fbf3 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	4621      	mov	r1, r4
 8000ad4:	205c      	movs	r0, #92	; 0x5c
 8000ad6:	f002 fed5 	bl	8003884 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e075      	b.n	8000bca <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d106      	bne.n	8000af2 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fe8f 	bl	800180c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000af2:	f001 fd3b 	bl	800256c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000af6:	f000 fbdd 	bl	80012b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000afa:	f001 fd09 	bl	8002510 <vPortEnterCritical>
 8000afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b0a:	d103      	bne.n	8000b14 <xQueueReceive+0x164>
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b20:	d103      	bne.n	8000b2a <xQueueReceive+0x17a>
 8000b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000b2a:	f001 fd1f 	bl	800256c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b2e:	1d3a      	adds	r2, r7, #4
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 fe7e 	bl	8001838 <xTaskCheckForTimeOut>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d124      	bne.n	8000b8c <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b44:	f000 f92a 	bl	8000d9c <prvIsQueueEmpty>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d018      	beq.n	8000b80 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b50:	3324      	adds	r3, #36	; 0x24
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fda0 	bl	800169c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b5e:	f000 f8cb 	bl	8000cf8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000b62:	f000 fbb5 	bl	80012d0 <xTaskResumeAll>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f47f af65 	bne.w	8000a38 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <xQueueReceive+0x224>)
 8000b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	f3bf 8f4f 	dsb	sy
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	e75b      	b.n	8000a38 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b82:	f000 f8b9 	bl	8000cf8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000b86:	f000 fba3 	bl	80012d0 <xTaskResumeAll>
 8000b8a:	e755      	b.n	8000a38 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b8e:	f000 f8b3 	bl	8000cf8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000b92:	f000 fb9d 	bl	80012d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000b98:	f000 f900 	bl	8000d9c <prvIsQueueEmpty>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f43f af4a 	beq.w	8000a38 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fb80 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000bac:	4604      	mov	r4, r0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f003 fb7c 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000bb4:	4601      	mov	r1, r0
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	4621      	mov	r1, r4
 8000bc2:	205c      	movs	r0, #92	; 0x5c
 8000bc4:	f002 fe5e 	bl	8003884 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000bc8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3734      	adds	r7, #52	; 0x34
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000ed04 	.word	0xe000ed04

08000bd8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10d      	bne.n	8000c12 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d14d      	bne.n	8000c9a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 ff56 	bl	8001ab4 <xTaskPriorityDisinherit>
 8000c08:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	e043      	b.n	8000c9a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d119      	bne.n	8000c4c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6858      	ldr	r0, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	461a      	mov	r2, r3
 8000c22:	68b9      	ldr	r1, [r7, #8]
 8000c24:	f004 faf5 	bl	8005212 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	441a      	add	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	d32b      	bcc.n	8000c9a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	e026      	b.n	8000c9a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	68d8      	ldr	r0, [r3, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	461a      	mov	r2, r3
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	f004 fadb 	bl	8005212 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	425b      	negs	r3, r3
 8000c66:	441a      	add	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	425b      	negs	r3, r3
 8000c82:	441a      	add	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d105      	bne.n	8000c9a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000ca2:	697b      	ldr	r3, [r7, #20]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d018      	beq.n	8000cf0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	441a      	add	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d303      	bcc.n	8000ce0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68d9      	ldr	r1, [r3, #12]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	461a      	mov	r2, r3
 8000cea:	6838      	ldr	r0, [r7, #0]
 8000cec:	f004 fa91 	bl	8005212 <memcpy>
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d00:	f001 fc06 	bl	8002510 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d0c:	e011      	b.n	8000d32 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d012      	beq.n	8000d3c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3324      	adds	r3, #36	; 0x24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fd10 	bl	8001740 <xTaskRemoveFromEventList>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000d26:	f000 fdeb 	bl	8001900 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	dce9      	bgt.n	8000d0e <prvUnlockQueue+0x16>
 8000d3a:	e000      	b.n	8000d3e <prvUnlockQueue+0x46>
                        break;
 8000d3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	22ff      	movs	r2, #255	; 0xff
 8000d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000d46:	f001 fc11 	bl	800256c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000d4a:	f001 fbe1 	bl	8002510 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d56:	e011      	b.n	8000d7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d012      	beq.n	8000d86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3310      	adds	r3, #16
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 fceb 	bl	8001740 <xTaskRemoveFromEventList>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000d70:	f000 fdc6 	bl	8001900 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dce9      	bgt.n	8000d58 <prvUnlockQueue+0x60>
 8000d84:	e000      	b.n	8000d88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000d86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000d90:	f001 fbec 	bl	800256c <vPortExitCritical>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000da4:	f001 fbb4 	bl	8002510 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e001      	b.n	8000dba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000dba:	f001 fbd7 	bl	800256c <vPortExitCritical>

    return xReturn;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000dd0:	f001 fb9e 	bl	8002510 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d102      	bne.n	8000de6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	e001      	b.n	8000dea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000dea:	f001 fbbf 	bl	800256c <vPortExitCritical>

    return xReturn;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e01e      	b.n	8000e46 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000e08:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <vQueueAddToRegistry+0x5c>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d115      	bne.n	8000e40 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000e14:	490f      	ldr	r1, [pc, #60]	; (8000e54 <vQueueAddToRegistry+0x5c>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000e1e:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <vQueueAddToRegistry+0x5c>)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fa3d 	bl	80042ac <SEGGER_SYSVIEW_ShrinkId>
 8000e32:	4601      	mov	r1, r0
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	2071      	movs	r0, #113	; 0x71
 8000e3a:	f002 fc53 	bl	80036e4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8000e3e:	e005      	b.n	8000e4c <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	d9dd      	bls.n	8000e08 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20015b94 	.word	0x20015b94

08000e58 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000e68:	f001 fb52 	bl	8002510 <vPortEnterCritical>
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e78:	d103      	bne.n	8000e82 <vQueueWaitForMessageRestricted+0x2a>
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e8e:	d103      	bne.n	8000e98 <vQueueWaitForMessageRestricted+0x40>
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e98:	f001 fb68 	bl	800256c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d106      	bne.n	8000eb2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	3324      	adds	r3, #36	; 0x24
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	68b9      	ldr	r1, [r7, #8]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fc19 	bl	80016e4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ff20 	bl	8000cf8 <prvUnlockQueue>
    }
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fc3d 	bl	8002754 <pvPortMalloc>
 8000eda:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00e      	beq.n	8000f00 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000ee2:	2058      	movs	r0, #88	; 0x58
 8000ee4:	f001 fc36 	bl	8002754 <pvPortMalloc>
 8000ee8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef6:	e005      	b.n	8000f04 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000ef8:	6978      	ldr	r0, [r7, #20]
 8000efa:	f001 fd07 	bl	800290c <vPortFree>
 8000efe:	e001      	b.n	8000f04 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d013      	beq.n	8000f32 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 f80e 	bl	8000f42 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000f26:	69f8      	ldr	r0, [r7, #28]
 8000f28:	f000 f8a0 	bl	800106c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	e002      	b.n	8000f38 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f36:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000f38:	69bb      	ldr	r3, [r7, #24]
    }
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b088      	sub	sp, #32
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	21a5      	movs	r1, #165	; 0xa5
 8000f5c:	f004 f964 	bl	8005228 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	f023 0307 	bic.w	r3, r3, #7
 8000f78:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <prvInitialiseNewTask+0x56>
 8000f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f88:	f383 8811 	msr	BASEPRI, r3
 8000f8c:	f3bf 8f6f 	isb	sy
 8000f90:	f3bf 8f4f 	dsb	sy
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e7fe      	b.n	8000f96 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01f      	beq.n	8000fde <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e012      	b.n	8000fca <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	4413      	add	r3, r2
 8000faa:	7819      	ldrb	r1, [r3, #0]
 8000fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3334      	adds	r3, #52	; 0x34
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	d9e9      	bls.n	8000fa4 <prvInitialiseNewTask+0x62>
 8000fd0:	e000      	b.n	8000fd4 <prvInitialiseNewTask+0x92>
            {
                break;
 8000fd2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000fdc:	e003      	b.n	8000fe6 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d901      	bls.n	8000ff0 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000fec:	2304      	movs	r3, #4
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ffa:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001004:	3304      	adds	r3, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff f974 	bl	80002f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100e:	3318      	adds	r3, #24
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f96f 	bl	80002f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101e:	f1c3 0205 	rsb	r2, r3, #5
 8001022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001024:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800102a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102e:	3350      	adds	r3, #80	; 0x50
 8001030:	2204      	movs	r2, #4
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f8f7 	bl	8005228 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103c:	3354      	adds	r3, #84	; 0x54
 800103e:	2201      	movs	r2, #1
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f004 f8f0 	bl	8005228 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	69b8      	ldr	r0, [r7, #24]
 800104e:	f001 f935 	bl	80022bc <pxPortInitialiseStack>
 8001052:	4602      	mov	r2, r0
 8001054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001056:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001062:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af02      	add	r7, sp, #8
 8001072:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001074:	f001 fa4c 	bl	8002510 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001078:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <prvAddNewTaskToReadyList+0xfc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <prvAddNewTaskToReadyList+0xfc>)
 8001080:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <prvAddNewTaskToReadyList+0x100>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d109      	bne.n	800109e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800108a:	4a38      	ldr	r2, [pc, #224]	; (800116c <prvAddNewTaskToReadyList+0x100>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <prvAddNewTaskToReadyList+0xfc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d110      	bne.n	80010ba <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001098:	f000 fc56 	bl	8001948 <prvInitialiseTaskLists>
 800109c:	e00d      	b.n	80010ba <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <prvAddNewTaskToReadyList+0x104>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <prvAddNewTaskToReadyList+0x100>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d802      	bhi.n	80010ba <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80010b4:	4a2d      	ldr	r2, [pc, #180]	; (800116c <prvAddNewTaskToReadyList+0x100>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <prvAddNewTaskToReadyList+0x108>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <prvAddNewTaskToReadyList+0x108>)
 80010c2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <prvAddNewTaskToReadyList+0x108>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d016      	beq.n	8001100 <prvAddNewTaskToReadyList+0x94>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 ffc3 	bl	8004060 <SEGGER_SYSVIEW_OnTaskCreate>
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	461d      	mov	r5, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	461c      	mov	r4, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	1ae3      	subs	r3, r4, r3
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	462b      	mov	r3, r5
 80010fc:	f001 fdca 	bl	8002c94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f830 	bl	8004168 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2201      	movs	r2, #1
 800110e:	409a      	lsls	r2, r3
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <prvAddNewTaskToReadyList+0x10c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4313      	orrs	r3, r2
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <prvAddNewTaskToReadyList+0x10c>)
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <prvAddNewTaskToReadyList+0x110>)
 8001128:	441a      	add	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f7ff f8ec 	bl	800030e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001136:	f001 fa19 	bl	800256c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <prvAddNewTaskToReadyList+0x104>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00e      	beq.n	8001160 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <prvAddNewTaskToReadyList+0x100>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <prvAddNewTaskToReadyList+0x114>)
 8001152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bdb0      	pop	{r4, r5, r7, pc}
 8001168:	20000124 	.word	0x20000124
 800116c:	2000004c 	.word	0x2000004c
 8001170:	20000130 	.word	0x20000130
 8001174:	20000140 	.word	0x20000140
 8001178:	2000012c 	.word	0x2000012c
 800117c:	20000050 	.word	0x20000050
 8001180:	e000ed04 	.word	0xe000ed04

08001184 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d01a      	beq.n	80011cc <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <vTaskDelay+0x68>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <vTaskDelay+0x2e>
 800119e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a2:	f383 8811 	msr	BASEPRI, r3
 80011a6:	f3bf 8f6f 	isb	sy
 80011aa:	f3bf 8f4f 	dsb	sy
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	e7fe      	b.n	80011b0 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80011b2:	f000 f87f 	bl	80012b4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2023      	movs	r0, #35	; 0x23
 80011ba:	f002 fa57 	bl	800366c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80011be:	2100      	movs	r1, #0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 fcf5 	bl	8001bb0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80011c6:	f000 f883 	bl	80012d0 <xTaskResumeAll>
 80011ca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d107      	bne.n	80011e2 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 80011d2:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <vTaskDelay+0x6c>)
 80011d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	f3bf 8f4f 	dsb	sy
 80011de:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000014c 	.word	0x2000014c
 80011f0:	e000ed04 	.word	0xe000ed04

080011f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <vTaskStartScheduler+0xa0>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	2300      	movs	r3, #0
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	2282      	movs	r2, #130	; 0x82
 8001206:	4924      	ldr	r1, [pc, #144]	; (8001298 <vTaskStartScheduler+0xa4>)
 8001208:	4824      	ldr	r0, [pc, #144]	; (800129c <vTaskStartScheduler+0xa8>)
 800120a:	f7ff fe59 	bl	8000ec0 <xTaskCreate>
 800120e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001216:	f000 fd43 	bl	8001ca0 <xTimerCreateTimerTask>
 800121a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d123      	bne.n	800126a <vTaskStartScheduler+0x76>
 8001222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001226:	f383 8811 	msr	BASEPRI, r3
 800122a:	f3bf 8f6f 	isb	sy
 800122e:	f3bf 8f4f 	dsb	sy
 8001232:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001234:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <vTaskStartScheduler+0xac>)
 8001236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800123a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <vTaskStartScheduler+0xb0>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <vTaskStartScheduler+0xb4>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001248:	4b18      	ldr	r3, [pc, #96]	; (80012ac <vTaskStartScheduler+0xb8>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <vTaskStartScheduler+0xa0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d102      	bne.n	800125a <vTaskStartScheduler+0x66>
 8001254:	f002 fee8 	bl	8004028 <SEGGER_SYSVIEW_OnIdle>
 8001258:	e004      	b.n	8001264 <vTaskStartScheduler+0x70>
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <vTaskStartScheduler+0xb8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f002 ff40 	bl	80040e4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001264:	f001 f8b6 	bl	80023d4 <xPortStartScheduler>
 8001268:	e00d      	b.n	8001286 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001270:	d109      	bne.n	8001286 <vTaskStartScheduler+0x92>
 8001272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001276:	f383 8811 	msr	BASEPRI, r3
 800127a:	f3bf 8f6f 	isb	sy
 800127e:	f3bf 8f4f 	dsb	sy
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	e7fe      	b.n	8001284 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <vTaskStartScheduler+0xbc>)
 8001288:	681b      	ldr	r3, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000148 	.word	0x20000148
 8001298:	08005250 	.word	0x08005250
 800129c:	08001919 	.word	0x08001919
 80012a0:	20000144 	.word	0x20000144
 80012a4:	20000130 	.word	0x20000130
 80012a8:	20000128 	.word	0x20000128
 80012ac:	2000004c 	.word	0x2000004c
 80012b0:	20000000 	.word	0x20000000

080012b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <vTaskSuspendAll+0x18>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	4a03      	ldr	r2, [pc, #12]	; (80012cc <vTaskSuspendAll+0x18>)
 80012c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	2000014c 	.word	0x2000014c

080012d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <xTaskResumeAll+0x11c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <xTaskResumeAll+0x2a>
 80012e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ea:	f383 8811 	msr	BASEPRI, r3
 80012ee:	f3bf 8f6f 	isb	sy
 80012f2:	f3bf 8f4f 	dsb	sy
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	e7fe      	b.n	80012f8 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80012fa:	f001 f909 	bl	8002510 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <xTaskResumeAll+0x11c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	4a39      	ldr	r2, [pc, #228]	; (80013ec <xTaskResumeAll+0x11c>)
 8001306:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <xTaskResumeAll+0x11c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d165      	bne.n	80013dc <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001310:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <xTaskResumeAll+0x120>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d061      	beq.n	80013dc <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001318:	e032      	b.n	8001380 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <xTaskResumeAll+0x124>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3318      	adds	r3, #24
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f84e 	bl	80003c8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3304      	adds	r3, #4
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f849 	bl	80003c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 ff15 	bl	8004168 <SEGGER_SYSVIEW_OnTaskStartReady>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	2201      	movs	r2, #1
 8001344:	409a      	lsls	r2, r3
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <xTaskResumeAll+0x128>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <xTaskResumeAll+0x128>)
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <xTaskResumeAll+0x12c>)
 800135e:	441a      	add	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3304      	adds	r3, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4610      	mov	r0, r2
 8001368:	f7fe ffd1 	bl	800030e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <xTaskResumeAll+0x130>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	429a      	cmp	r2, r3
 8001378:	d302      	bcc.n	8001380 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <xTaskResumeAll+0x134>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <xTaskResumeAll+0x124>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1c8      	bne.n	800131a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800138e:	f000 fb57 	bl	8001a40 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <xTaskResumeAll+0x138>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d010      	beq.n	80013c0 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800139e:	f000 f859 	bl	8001454 <xTaskIncrementTick>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <xTaskResumeAll+0x134>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f1      	bne.n	800139e <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <xTaskResumeAll+0x138>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80013c0:	4b10      	ldr	r3, [pc, #64]	; (8001404 <xTaskResumeAll+0x134>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d009      	beq.n	80013dc <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <xTaskResumeAll+0x13c>)
 80013ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	f3bf 8f4f 	dsb	sy
 80013d8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80013dc:	f001 f8c6 	bl	800256c <vPortExitCritical>

    return xAlreadyYielded;
 80013e0:	68bb      	ldr	r3, [r7, #8]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000014c 	.word	0x2000014c
 80013f0:	20000124 	.word	0x20000124
 80013f4:	200000e4 	.word	0x200000e4
 80013f8:	2000012c 	.word	0x2000012c
 80013fc:	20000050 	.word	0x20000050
 8001400:	2000004c 	.word	0x2000004c
 8001404:	20000138 	.word	0x20000138
 8001408:	20000134 	.word	0x20000134
 800140c:	e000ed04 	.word	0xe000ed04

08001410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <xTaskGetTickCount+0x1c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000128 	.word	0x20000128

08001430 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001436:	f001 f94f 	bl	80026d8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <xTaskGetTickCountFromISR+0x20>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001444:	683b      	ldr	r3, [r7, #0]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000128 	.word	0x20000128

08001454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <xTaskIncrementTick+0x14c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 8091 	bne.w	800158a <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001468:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <xTaskIncrementTick+0x150>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <xTaskIncrementTick+0x150>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d11f      	bne.n	80014bc <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <xTaskIncrementTick+0x154>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <xTaskIncrementTick+0x46>
 8001486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148a:	f383 8811 	msr	BASEPRI, r3
 800148e:	f3bf 8f6f 	isb	sy
 8001492:	f3bf 8f4f 	dsb	sy
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	e7fe      	b.n	8001498 <xTaskIncrementTick+0x44>
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <xTaskIncrementTick+0x154>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4b42      	ldr	r3, [pc, #264]	; (80015ac <xTaskIncrementTick+0x158>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a40      	ldr	r2, [pc, #256]	; (80015a8 <xTaskIncrementTick+0x154>)
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4a40      	ldr	r2, [pc, #256]	; (80015ac <xTaskIncrementTick+0x158>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <xTaskIncrementTick+0x15c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	4a3e      	ldr	r2, [pc, #248]	; (80015b0 <xTaskIncrementTick+0x15c>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	f000 fac2 	bl	8001a40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <xTaskIncrementTick+0x160>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d34c      	bcc.n	8001560 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <xTaskIncrementTick+0x154>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d104      	bne.n	80014da <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d0:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <xTaskIncrementTick+0x160>)
 80014d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d6:	601a      	str	r2, [r3, #0]
                    break;
 80014d8:	e042      	b.n	8001560 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <xTaskIncrementTick+0x154>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d203      	bcs.n	80014fa <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80014f2:	4a30      	ldr	r2, [pc, #192]	; (80015b4 <xTaskIncrementTick+0x160>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80014f8:	e032      	b.n	8001560 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3304      	adds	r3, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ff62 	bl	80003c8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3318      	adds	r3, #24
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff59 	bl	80003c8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fe25 	bl	8004168 <SEGGER_SYSVIEW_OnTaskStartReady>
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	2201      	movs	r2, #1
 8001524:	409a      	lsls	r2, r3
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <xTaskIncrementTick+0x164>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <xTaskIncrementTick+0x164>)
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <xTaskIncrementTick+0x168>)
 800153e:	441a      	add	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3304      	adds	r3, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7fe fee1 	bl	800030e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <xTaskIncrementTick+0x16c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	429a      	cmp	r2, r3
 8001558:	d3b5      	bcc.n	80014c6 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800155e:	e7b2      	b.n	80014c6 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <xTaskIncrementTick+0x16c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001566:	4915      	ldr	r1, [pc, #84]	; (80015bc <xTaskIncrementTick+0x168>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d901      	bls.n	800157c <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <xTaskIncrementTick+0x170>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e004      	b.n	8001594 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <xTaskIncrementTick+0x174>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <xTaskIncrementTick+0x174>)
 8001592:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001594:	697b      	ldr	r3, [r7, #20]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000014c 	.word	0x2000014c
 80015a4:	20000128 	.word	0x20000128
 80015a8:	200000dc 	.word	0x200000dc
 80015ac:	200000e0 	.word	0x200000e0
 80015b0:	2000013c 	.word	0x2000013c
 80015b4:	20000144 	.word	0x20000144
 80015b8:	2000012c 	.word	0x2000012c
 80015bc:	20000050 	.word	0x20000050
 80015c0:	2000004c 	.word	0x2000004c
 80015c4:	20000138 	.word	0x20000138
 80015c8:	20000134 	.word	0x20000134

080015cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <vTaskSwitchContext+0xb8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <vTaskSwitchContext+0xbc>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80015e0:	e04c      	b.n	800167c <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <vTaskSwitchContext+0xbc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <vTaskSwitchContext+0xc0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	f1c3 031f 	rsb	r3, r3, #31
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	4924      	ldr	r1, [pc, #144]	; (8001690 <vTaskSwitchContext+0xc4>)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <vTaskSwitchContext+0x5a>
        __asm volatile
 8001612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	e7fe      	b.n	8001624 <vTaskSwitchContext+0x58>
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <vTaskSwitchContext+0xc4>)
 8001632:	4413      	add	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3308      	adds	r3, #8
 8001648:	429a      	cmp	r2, r3
 800164a:	d104      	bne.n	8001656 <vTaskSwitchContext+0x8a>
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <vTaskSwitchContext+0xc8>)
 800165e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <vTaskSwitchContext+0xc8>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <vTaskSwitchContext+0xcc>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d102      	bne.n	8001672 <vTaskSwitchContext+0xa6>
 800166c:	f002 fcdc 	bl	8004028 <SEGGER_SYSVIEW_OnIdle>
}
 8001670:	e004      	b.n	800167c <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <vTaskSwitchContext+0xc8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fd34 	bl	80040e4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	2000014c 	.word	0x2000014c
 8001688:	20000138 	.word	0x20000138
 800168c:	2000012c 	.word	0x2000012c
 8001690:	20000050 	.word	0x20000050
 8001694:	2000004c 	.word	0x2000004c
 8001698:	20000148 	.word	0x20000148

0800169c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <vTaskPlaceOnEventList+0x24>
 80016ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016b0:	f383 8811 	msr	BASEPRI, r3
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e7fe      	b.n	80016be <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <vTaskPlaceOnEventList+0x44>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	3318      	adds	r3, #24
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7fe fe44 	bl	8000356 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016ce:	2101      	movs	r1, #1
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f000 fa6d 	bl	8001bb0 <prvAddCurrentTaskToDelayedList>
}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2000004c 	.word	0x2000004c

080016e4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <vTaskPlaceOnEventListRestricted+0x26>
 80016f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016fa:	f383 8811 	msr	BASEPRI, r3
 80016fe:	f3bf 8f6f 	isb	sy
 8001702:	f3bf 8f4f 	dsb	sy
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e7fe      	b.n	8001708 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <vTaskPlaceOnEventListRestricted+0x58>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	3318      	adds	r3, #24
 8001710:	4619      	mov	r1, r3
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7fe fdfb 	bl	800030e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001722:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001724:	2024      	movs	r0, #36	; 0x24
 8001726:	f001 ff83 	bl	8003630 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	68b8      	ldr	r0, [r7, #8]
 800172e:	f000 fa3f 	bl	8001bb0 <prvAddCurrentTaskToDelayedList>
    }
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000004c 	.word	0x2000004c

08001740 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <xTaskRemoveFromEventList+0x2a>
 8001756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e7fe      	b.n	8001768 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3318      	adds	r3, #24
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fe2a 	bl	80003c8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <xTaskRemoveFromEventList+0xb4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d120      	bne.n	80017be <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3304      	adds	r3, #4
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fe21 	bl	80003c8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fced 	bl	8004168 <SEGGER_SYSVIEW_OnTaskStartReady>
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	2201      	movs	r2, #1
 8001794:	409a      	lsls	r2, r3
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <xTaskRemoveFromEventList+0xb8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <xTaskRemoveFromEventList+0xb8>)
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <xTaskRemoveFromEventList+0xbc>)
 80017ae:	441a      	add	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	3304      	adds	r3, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7fe fda9 	bl	800030e <vListInsertEnd>
 80017bc:	e005      	b.n	80017ca <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	3318      	adds	r3, #24
 80017c2:	4619      	mov	r1, r3
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <xTaskRemoveFromEventList+0xc0>)
 80017c6:	f7fe fda2 	bl	800030e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <xTaskRemoveFromEventList+0xc4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d905      	bls.n	80017e4 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80017d8:	2301      	movs	r3, #1
 80017da:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <xTaskRemoveFromEventList+0xc8>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e001      	b.n	80017e8 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80017e8:	697b      	ldr	r3, [r7, #20]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000014c 	.word	0x2000014c
 80017f8:	2000012c 	.word	0x2000012c
 80017fc:	20000050 	.word	0x20000050
 8001800:	200000e4 	.word	0x200000e4
 8001804:	2000004c 	.word	0x2000004c
 8001808:	20000138 	.word	0x20000138

0800180c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <vTaskInternalSetTimeOutState+0x24>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <vTaskInternalSetTimeOutState+0x28>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	605a      	str	r2, [r3, #4]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	2000013c 	.word	0x2000013c
 8001834:	20000128 	.word	0x20000128

08001838 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <xTaskCheckForTimeOut+0x24>
 8001848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184c:	f383 8811 	msr	BASEPRI, r3
 8001850:	f3bf 8f6f 	isb	sy
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	e7fe      	b.n	800185a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <xTaskCheckForTimeOut+0x3e>
 8001862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001866:	f383 8811 	msr	BASEPRI, r3
 800186a:	f3bf 8f6f 	isb	sy
 800186e:	f3bf 8f4f 	dsb	sy
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e7fe      	b.n	8001874 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8001876:	f000 fe4b 	bl	8002510 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <xTaskCheckForTimeOut+0xc0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001892:	d102      	bne.n	800189a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	e026      	b.n	80018e8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <xTaskCheckForTimeOut+0xc4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d00a      	beq.n	80018bc <xTaskCheckForTimeOut+0x84>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d305      	bcc.n	80018bc <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	e015      	b.n	80018e8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20b      	bcs.n	80018de <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	1ad2      	subs	r2, r2, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff9a 	bl	800180c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	e004      	b.n	80018e8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80018e8:	f000 fe40 	bl	800256c <vPortExitCritical>

    return xReturn;
 80018ec:	69fb      	ldr	r3, [r7, #28]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000128 	.word	0x20000128
 80018fc:	2000013c 	.word	0x2000013c

08001900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <vTaskMissedYield+0x14>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	20000138 	.word	0x20000138

08001918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001920:	f000 f852 	bl	80019c8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <prvIdleTask+0x28>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d9f9      	bls.n	8001920 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <prvIdleTask+0x2c>)
 800192e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	f3bf 8f4f 	dsb	sy
 8001938:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800193c:	e7f0      	b.n	8001920 <prvIdleTask+0x8>
 800193e:	bf00      	nop
 8001940:	20000050 	.word	0x20000050
 8001944:	e000ed04 	.word	0xe000ed04

08001948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	e00c      	b.n	800196e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <prvInitialiseTaskLists+0x60>)
 8001960:	4413      	add	r3, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fca6 	bl	80002b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3301      	adds	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d9ef      	bls.n	8001954 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <prvInitialiseTaskLists+0x64>)
 8001976:	f7fe fc9d 	bl	80002b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800197a:	480d      	ldr	r0, [pc, #52]	; (80019b0 <prvInitialiseTaskLists+0x68>)
 800197c:	f7fe fc9a 	bl	80002b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <prvInitialiseTaskLists+0x6c>)
 8001982:	f7fe fc97 	bl	80002b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <prvInitialiseTaskLists+0x70>)
 8001988:	f7fe fc94 	bl	80002b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <prvInitialiseTaskLists+0x74>)
 800198e:	f7fe fc91 	bl	80002b4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <prvInitialiseTaskLists+0x78>)
 8001994:	4a05      	ldr	r2, [pc, #20]	; (80019ac <prvInitialiseTaskLists+0x64>)
 8001996:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <prvInitialiseTaskLists+0x7c>)
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <prvInitialiseTaskLists+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000050 	.word	0x20000050
 80019ac:	200000b4 	.word	0x200000b4
 80019b0:	200000c8 	.word	0x200000c8
 80019b4:	200000e4 	.word	0x200000e4
 80019b8:	200000f8 	.word	0x200000f8
 80019bc:	20000110 	.word	0x20000110
 80019c0:	200000dc 	.word	0x200000dc
 80019c4:	200000e0 	.word	0x200000e0

080019c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019ce:	e019      	b.n	8001a04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80019d0:	f000 fd9e 	bl	8002510 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <prvCheckTasksWaitingTermination+0x4c>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fcf1 	bl	80003c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <prvCheckTasksWaitingTermination+0x50>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <prvCheckTasksWaitingTermination+0x50>)
 80019ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <prvCheckTasksWaitingTermination+0x54>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <prvCheckTasksWaitingTermination+0x54>)
 80019f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80019fa:	f000 fdb7 	bl	800256c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f80e 	bl	8001a20 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <prvCheckTasksWaitingTermination+0x54>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e1      	bne.n	80019d0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200000f8 	.word	0x200000f8
 8001a18:	20000124 	.word	0x20000124
 8001a1c:	2000010c 	.word	0x2000010c

08001a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 ff6d 	bl	800290c <vPortFree>
                vPortFree( pxTCB );
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 ff6a 	bl	800290c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <prvResetNextTaskUnblockTime+0x30>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <prvResetNextTaskUnblockTime+0x34>)
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001a56:	e005      	b.n	8001a64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <prvResetNextTaskUnblockTime+0x30>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <prvResetNextTaskUnblockTime+0x34>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200000dc 	.word	0x200000dc
 8001a74:	20000144 	.word	0x20000144

08001a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <xTaskGetSchedulerState+0x34>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001a86:	2301      	movs	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	e008      	b.n	8001a9e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <xTaskGetSchedulerState+0x38>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001a94:	2302      	movs	r3, #2
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	e001      	b.n	8001a9e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001a9e:	687b      	ldr	r3, [r7, #4]
    }
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	20000130 	.word	0x20000130
 8001ab0:	2000014c 	.word	0x2000014c

08001ab4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d066      	beq.n	8001b98 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <xTaskPriorityDisinherit+0xf0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d009      	beq.n	8001ae8 <xTaskPriorityDisinherit+0x34>
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e7fe      	b.n	8001ae6 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <xTaskPriorityDisinherit+0x50>
 8001af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af4:	f383 8811 	msr	BASEPRI, r3
 8001af8:	f3bf 8f6f 	isb	sy
 8001afc:	f3bf 8f4f 	dsb	sy
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	e7fe      	b.n	8001b02 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	1e5a      	subs	r2, r3, #1
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d03e      	beq.n	8001b98 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d13a      	bne.n	8001b98 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	3304      	adds	r3, #4
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc4e 	bl	80003c8 <uxListRemove>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	2201      	movs	r2, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <xTaskPriorityDisinherit+0xf4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4013      	ands	r3, r2
 8001b44:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <xTaskPriorityDisinherit+0xf4>)
 8001b46:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	204a      	movs	r0, #74	; 0x4a
 8001b4e:	f001 fd8d 	bl	800366c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	f1c3 0205 	rsb	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	619a      	str	r2, [r3, #24]
//                    prvAddTaskToReadyList( pxTCB );
                    prvReaddTaskToReadyList( pxTCB );
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <xTaskPriorityDisinherit+0xf4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	4a0c      	ldr	r2, [pc, #48]	; (8001ba8 <xTaskPriorityDisinherit+0xf4>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <xTaskPriorityDisinherit+0xf8>)
 8001b86:	441a      	add	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7fe fbbd 	bl	800030e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001b98:	697b      	ldr	r3, [r7, #20]
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000004c 	.word	0x2000004c
 8001ba8:	2000012c 	.word	0x2000012c
 8001bac:	20000050 	.word	0x20000050

08001bb0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bc0:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fbfe 	bl	80003c8 <uxListRemove>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10b      	bne.n	8001bea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	2201      	movs	r2, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4013      	ands	r3, r2
 8001be6:	4a29      	ldr	r2, [pc, #164]	; (8001c8c <prvAddCurrentTaskToDelayedList+0xdc>)
 8001be8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf0:	d110      	bne.n	8001c14 <prvAddCurrentTaskToDelayedList+0x64>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
            	traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	211b      	movs	r1, #27
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 faf4 	bl	80041ec <SEGGER_SYSVIEW_OnTaskStopReady>
            	vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4820      	ldr	r0, [pc, #128]	; (8001c90 <prvAddCurrentTaskToDelayedList+0xe0>)
 8001c0e:	f7fe fb7e 	bl	800030e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001c12:	e032      	b.n	8001c7a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d20f      	bcs.n	8001c4c <prvAddCurrentTaskToDelayedList+0x9c>
                	traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2104      	movs	r1, #4
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fada 	bl	80041ec <SEGGER_SYSVIEW_OnTaskStopReady>
                	vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3304      	adds	r3, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7fe fb86 	bl	8000356 <vListInsert>
}
 8001c4a:	e016      	b.n	8001c7a <prvAddCurrentTaskToDelayedList+0xca>
                	traceMOVED_TASK_TO_DELAYED_LIST();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2104      	movs	r1, #4
 8001c52:	4618      	mov	r0, r3
 8001c54:	f002 faca 	bl	80041ec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	3304      	adds	r3, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4610      	mov	r0, r2
 8001c66:	f7fe fb76 	bl	8000356 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <prvAddCurrentTaskToDelayedList+0xec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d202      	bcs.n	8001c7a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <prvAddCurrentTaskToDelayedList+0xec>)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6013      	str	r3, [r2, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000128 	.word	0x20000128
 8001c88:	2000004c 	.word	0x2000004c
 8001c8c:	2000012c 	.word	0x2000012c
 8001c90:	20000110 	.word	0x20000110
 8001c94:	200000e0 	.word	0x200000e0
 8001c98:	200000dc 	.word	0x200000dc
 8001c9c:	20000144 	.word	0x20000144

08001ca0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001caa:	f000 fad1 	bl	8002250 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <xTimerCreateTimerTask+0x54>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <xTimerCreateTimerTask+0x58>)
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc4:	490d      	ldr	r1, [pc, #52]	; (8001cfc <xTimerCreateTimerTask+0x5c>)
 8001cc6:	480e      	ldr	r0, [pc, #56]	; (8001d00 <xTimerCreateTimerTask+0x60>)
 8001cc8:	f7ff f8fa 	bl	8000ec0 <xTaskCreate>
 8001ccc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <xTimerCreateTimerTask+0x48>
 8001cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	e7fe      	b.n	8001ce6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8001ce8:	687b      	ldr	r3, [r7, #4]
    }
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000180 	.word	0x20000180
 8001cf8:	20000184 	.word	0x20000184
 8001cfc:	08005258 	.word	0x08005258
 8001d00:	08001e35 	.word	0x08001e35

08001d04 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <xTimerGenericCommand+0x2c>
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	623b      	str	r3, [r7, #32]
 8001d2e:	e7fe      	b.n	8001d2e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <xTimerGenericCommand+0x94>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d02a      	beq.n	8001d8e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	dc18      	bgt.n	8001d7c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001d4a:	f7ff fe95 	bl	8001a78 <xTaskGetSchedulerState>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d109      	bne.n	8001d68 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <xTimerGenericCommand+0x94>)
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f107 0114 	add.w	r1, r7, #20
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d60:	f7fe fc4a 	bl	80005f8 <xQueueGenericSend>
 8001d64:	6278      	str	r0, [r7, #36]	; 0x24
 8001d66:	e012      	b.n	8001d8e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <xTimerGenericCommand+0x94>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	f107 0114 	add.w	r1, r7, #20
 8001d70:	2300      	movs	r3, #0
 8001d72:	2200      	movs	r2, #0
 8001d74:	f7fe fc40 	bl	80005f8 <xQueueGenericSend>
 8001d78:	6278      	str	r0, [r7, #36]	; 0x24
 8001d7a:	e008      	b.n	8001d8e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <xTimerGenericCommand+0x94>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	f107 0114 	add.w	r1, r7, #20
 8001d84:	2300      	movs	r3, #0
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	f7fe fd58 	bl	800083c <xQueueGenericSendFromISR>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001d90:	4618      	mov	r0, r3
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000180 	.word	0x20000180

08001d9c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <prvProcessExpiredTimer+0x94>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb07 	bl	80003c8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d021      	beq.n	8001e0c <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	18d1      	adds	r1, r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	6978      	ldr	r0, [r7, #20]
 8001dd6:	f000 f8d1 	bl	8001f7c <prvInsertTimerInActiveList>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01e      	beq.n	8001e1e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001de0:	2300      	movs	r3, #0
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	2100      	movs	r1, #0
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8a 	bl	8001d04 <xTimerGenericCommand>
 8001df0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d112      	bne.n	8001e1e <prvProcessExpiredTimer+0x82>
 8001df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfc:	f383 8811 	msr	BASEPRI, r3
 8001e00:	f3bf 8f6f 	isb	sy
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	e7fe      	b.n	8001e0a <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e12:	f023 0301 	bic.w	r3, r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	4798      	blx	r3
    }
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000178 	.word	0x20000178

08001e34 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f857 	bl	8001ef4 <prvGetNextExpireTime>
 8001e46:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 f803 	bl	8001e58 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001e52:	f000 f8d5 	bl	8002000 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e56:	e7f1      	b.n	8001e3c <prvTimerTask+0x8>

08001e58 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001e62:	f7ff fa27 	bl	80012b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f866 	bl	8001f3c <prvSampleTimeNow>
 8001e70:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d130      	bne.n	8001eda <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10a      	bne.n	8001e94 <prvProcessTimerOrBlockTask+0x3c>
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d806      	bhi.n	8001e94 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001e86:	f7ff fa23 	bl	80012d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff85 	bl	8001d9c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001e92:	e024      	b.n	8001ede <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <prvProcessTimerOrBlockTask+0x90>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <prvProcessTimerOrBlockTask+0x50>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <prvProcessTimerOrBlockTask+0x52>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <prvProcessTimerOrBlockTask+0x94>)
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe ffcd 	bl	8000e58 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001ebe:	f7ff fa07 	bl	80012d0 <xTaskResumeAll>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <prvProcessTimerOrBlockTask+0x98>)
 8001eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	f3bf 8f6f 	isb	sy
    }
 8001ed8:	e001      	b.n	8001ede <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001eda:	f7ff f9f9 	bl	80012d0 <xTaskResumeAll>
    }
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000017c 	.word	0x2000017c
 8001eec:	20000180 	.word	0x20000180
 8001ef0:	e000ed04 	.word	0xe000ed04

08001ef4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <prvGetNextExpireTime+0x44>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <prvGetNextExpireTime+0x16>
 8001f06:	2201      	movs	r2, #1
 8001f08:	e000      	b.n	8001f0c <prvGetNextExpireTime+0x18>
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d105      	bne.n	8001f24 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <prvGetNextExpireTime+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	e001      	b.n	8001f28 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001f28:	68fb      	ldr	r3, [r7, #12]
    }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000178 	.word	0x20000178

08001f3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001f44:	f7ff fa64 	bl	8001410 <xTaskGetTickCount>
 8001f48:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <prvSampleTimeNow+0x3c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d205      	bcs.n	8001f60 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001f54:	f000 f918 	bl	8002188 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e002      	b.n	8001f66 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <prvSampleTimeNow+0x3c>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    }
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000188 	.word	0x20000188

08001f7c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d812      	bhi.n	8001fc8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	1ad2      	subs	r2, r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d302      	bcc.n	8001fb6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e01b      	b.n	8001fee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <prvInsertTimerInActiveList+0x7c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	f7fe f9c8 	bl	8000356 <vListInsert>
 8001fc6:	e012      	b.n	8001fee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d206      	bcs.n	8001fde <prvInsertTimerInActiveList+0x62>
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d302      	bcc.n	8001fde <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	e007      	b.n	8001fee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <prvInsertTimerInActiveList+0x80>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4610      	mov	r0, r2
 8001fea:	f7fe f9b4 	bl	8000356 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001fee:	697b      	ldr	r3, [r7, #20]
    }
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000017c 	.word	0x2000017c
 8001ffc:	20000178 	.word	0x20000178

08002000 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002006:	e0ac      	b.n	8002162 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f2c0 80a8 	blt.w	8002160 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	3304      	adds	r3, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f9d1 	bl	80003c8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff87 	bl	8001f3c <prvSampleTimeNow>
 800202e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b09      	cmp	r3, #9
 8002034:	f200 8095 	bhi.w	8002162 <prvProcessReceivedCommands+0x162>
 8002038:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <prvProcessReceivedCommands+0x40>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002069 	.word	0x08002069
 8002044:	08002069 	.word	0x08002069
 8002048:	08002069 	.word	0x08002069
 800204c:	080020db 	.word	0x080020db
 8002050:	080020ef 	.word	0x080020ef
 8002054:	08002137 	.word	0x08002137
 8002058:	08002069 	.word	0x08002069
 800205c:	08002069 	.word	0x08002069
 8002060:	080020db 	.word	0x080020db
 8002064:	080020ef 	.word	0x080020ef
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	18d1      	adds	r1, r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6a3a      	ldr	r2, [r7, #32]
 8002086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002088:	f7ff ff78 	bl	8001f7c <prvInsertTimerInActiveList>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d067      	beq.n	8002162 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002098:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d05c      	beq.n	8002162 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	441a      	add	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2300      	movs	r3, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020ba:	f7ff fe23 	bl	8001d04 <xTimerGenericCommand>
 80020be:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d14d      	bne.n	8002162 <prvProcessReceivedCommands+0x162>
 80020c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	e7fe      	b.n	80020d8 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80020ec:	e039      	b.n	8002162 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <prvProcessReceivedCommands+0x122>
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e7fe      	b.n	8002120 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	699a      	ldr	r2, [r3, #24]
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	18d1      	adds	r1, r2, r3
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	6a3a      	ldr	r2, [r7, #32]
 800212e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002130:	f7ff ff24 	bl	8001f7c <prvInsertTimerInActiveList>
                        break;
 8002134:	e015      	b.n	8002162 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002146:	f000 fbe1 	bl	800290c <vPortFree>
 800214a:	e00a      	b.n	8002162 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800215e:	e000      	b.n	8002162 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002160:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <prvProcessReceivedCommands+0x184>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f107 0108 	add.w	r1, r7, #8
 800216a:	2200      	movs	r2, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fc1f 	bl	80009b0 <xQueueReceive>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	f47f af47 	bne.w	8002008 <prvProcessReceivedCommands+0x8>
        }
    }
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000180 	.word	0x20000180

08002188 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800218e:	e047      	b.n	8002220 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <prvSwitchTimerLists+0xc0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <prvSwitchTimerLists+0xc0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f90d 	bl	80003c8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d02d      	beq.n	8002220 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d90e      	bls.n	80021f4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <prvSwitchTimerLists+0xc0>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3304      	adds	r3, #4
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f7fe f8b2 	bl	8000356 <vListInsert>
 80021f2:	e015      	b.n	8002220 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80021f4:	2300      	movs	r3, #0
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	2100      	movs	r1, #0
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f7ff fd80 	bl	8001d04 <xTimerGenericCommand>
 8002204:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <prvSwitchTimerLists+0x98>
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	e7fe      	b.n	800221e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <prvSwitchTimerLists+0xc0>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1b2      	bne.n	8002190 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <prvSwitchTimerLists+0xc0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <prvSwitchTimerLists+0xc4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <prvSwitchTimerLists+0xc0>)
 8002236:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <prvSwitchTimerLists+0xc4>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	6013      	str	r3, [r2, #0]
    }
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000178 	.word	0x20000178
 800224c:	2000017c 	.word	0x2000017c

08002250 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002254:	f000 f95c 	bl	8002510 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <prvCheckForValidListAndQueue+0x54>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11d      	bne.n	800229c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002260:	4811      	ldr	r0, [pc, #68]	; (80022a8 <prvCheckForValidListAndQueue+0x58>)
 8002262:	f7fe f827 	bl	80002b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002266:	4811      	ldr	r0, [pc, #68]	; (80022ac <prvCheckForValidListAndQueue+0x5c>)
 8002268:	f7fe f824 	bl	80002b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800226c:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <prvCheckForValidListAndQueue+0x60>)
 800226e:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <prvCheckForValidListAndQueue+0x58>)
 8002270:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <prvCheckForValidListAndQueue+0x64>)
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <prvCheckForValidListAndQueue+0x5c>)
 8002276:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002278:	2200      	movs	r2, #0
 800227a:	210c      	movs	r1, #12
 800227c:	200a      	movs	r0, #10
 800227e:	f7fe f935 	bl	80004ec <xQueueGenericCreate>
 8002282:	4602      	mov	r2, r0
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <prvCheckForValidListAndQueue+0x54>)
 8002286:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <prvCheckForValidListAndQueue+0x54>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <prvCheckForValidListAndQueue+0x54>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4908      	ldr	r1, [pc, #32]	; (80022b8 <prvCheckForValidListAndQueue+0x68>)
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fdae 	bl	8000df8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800229c:	f000 f966 	bl	800256c <vPortExitCritical>
    }
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000180 	.word	0x20000180
 80022a8:	20000150 	.word	0x20000150
 80022ac:	20000164 	.word	0x20000164
 80022b0:	20000178 	.word	0x20000178
 80022b4:	2000017c 	.word	0x2000017c
 80022b8:	08005260 	.word	0x08005260

080022bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b04      	subs	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3b04      	subs	r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f023 0201 	bic.w	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3b04      	subs	r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80022ec:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <pxPortInitialiseStack+0x64>)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3b14      	subs	r3, #20
 80022f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3b04      	subs	r3, #4
 8002302:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f06f 0202 	mvn.w	r2, #2
 800230a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b20      	subs	r3, #32
 8002310:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002312:	68fb      	ldr	r3, [r7, #12]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	08002325 	.word	0x08002325

08002324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <prvTaskExitError+0x50>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002336:	d009      	beq.n	800234c <prvTaskExitError+0x28>
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e7fe      	b.n	800234a <prvTaskExitError+0x26>
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800235e:	bf00      	nop
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0fc      	beq.n	8002360 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000004 	.word	0x20000004
	...

08002380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <pxCurrentTCBConst2>)
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	6808      	ldr	r0, [r1, #0]
 8002386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238a:	f380 8809 	msr	PSP, r0
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f380 8811 	msr	BASEPRI, r0
 800239a:	4770      	bx	lr
 800239c:	f3af 8000 	nop.w

080023a0 <pxCurrentTCBConst2>:
 80023a0:	2000004c 	.word	0x2000004c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop

080023a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80023a8:	4808      	ldr	r0, [pc, #32]	; (80023cc <prvPortStartFirstTask+0x24>)
 80023aa:	6800      	ldr	r0, [r0, #0]
 80023ac:	6800      	ldr	r0, [r0, #0]
 80023ae:	f380 8808 	msr	MSP, r0
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	f380 8814 	msr	CONTROL, r0
 80023ba:	b662      	cpsie	i
 80023bc:	b661      	cpsie	f
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	df00      	svc	0
 80023c8:	bf00      	nop
 80023ca:	0000      	.short	0x0000
 80023cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop

080023d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <xPortStartScheduler+0x118>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <xPortStartScheduler+0x11c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d109      	bne.n	80023f8 <xPortStartScheduler+0x24>
 80023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e8:	f383 8811 	msr	BASEPRI, r3
 80023ec:	f3bf 8f6f 	isb	sy
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e7fe      	b.n	80023f6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <xPortStartScheduler+0x118>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3d      	ldr	r2, [pc, #244]	; (80024f4 <xPortStartScheduler+0x120>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d109      	bne.n	8002416 <xPortStartScheduler+0x42>
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e7fe      	b.n	8002414 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <xPortStartScheduler+0x124>)
 8002418:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <xPortStartScheduler+0x128>)
 800243c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <xPortStartScheduler+0x12c>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002444:	e009      	b.n	800245a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002446:	4b2e      	ldr	r3, [pc, #184]	; (8002500 <xPortStartScheduler+0x12c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <xPortStartScheduler+0x12c>)
 800244e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002462:	2b80      	cmp	r3, #128	; 0x80
 8002464:	d0ef      	beq.n	8002446 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <xPortStartScheduler+0x12c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	d009      	beq.n	8002486 <xPortStartScheduler+0xb2>
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	e7fe      	b.n	8002484 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <xPortStartScheduler+0x12c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <xPortStartScheduler+0x12c>)
 800248e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002490:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <xPortStartScheduler+0x12c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <xPortStartScheduler+0x12c>)
 800249a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80024a4:	4b17      	ldr	r3, [pc, #92]	; (8002504 <xPortStartScheduler+0x130>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a16      	ldr	r2, [pc, #88]	; (8002504 <xPortStartScheduler+0x130>)
 80024aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <xPortStartScheduler+0x130>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a13      	ldr	r2, [pc, #76]	; (8002504 <xPortStartScheduler+0x130>)
 80024b6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80024ba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80024bc:	f000 f8dc 	bl	8002678 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <xPortStartScheduler+0x134>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80024c6:	f000 f8fb 	bl	80026c0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <xPortStartScheduler+0x138>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <xPortStartScheduler+0x138>)
 80024d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80024d4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80024d6:	f7ff ff67 	bl	80023a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80024da:	f7ff f877 	bl	80015cc <vTaskSwitchContext>
    prvTaskExitError();
 80024de:	f7ff ff21 	bl	8002324 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	410fc271 	.word	0x410fc271
 80024f4:	410fc270 	.word	0x410fc270
 80024f8:	e000e400 	.word	0xe000e400
 80024fc:	2000018c 	.word	0x2000018c
 8002500:	20000190 	.word	0x20000190
 8002504:	e000ed20 	.word	0xe000ed20
 8002508:	20000004 	.word	0x20000004
 800250c:	e000ef34 	.word	0xe000ef34

08002510 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251a:	f383 8811 	msr	BASEPRI, r3
 800251e:	f3bf 8f6f 	isb	sy
 8002522:	f3bf 8f4f 	dsb	sy
 8002526:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <vPortEnterCritical+0x54>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	4a0d      	ldr	r2, [pc, #52]	; (8002564 <vPortEnterCritical+0x54>)
 8002530:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <vPortEnterCritical+0x54>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d10e      	bne.n	8002558 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <vPortEnterCritical+0x58>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <vPortEnterCritical+0x48>
 8002544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	e7fe      	b.n	8002556 <vPortEnterCritical+0x46>
    }
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	20000004 	.word	0x20000004
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <vPortExitCritical+0x4c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <vPortExitCritical+0x22>
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	e7fe      	b.n	800258c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <vPortExitCritical+0x4c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3b01      	subs	r3, #1
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <vPortExitCritical+0x4c>)
 8002596:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <vPortExitCritical+0x4c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <vPortExitCritical+0x3e>
 80025a0:	2300      	movs	r3, #0
 80025a2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000004 	.word	0x20000004
 80025bc:	00000000 	.word	0x00000000

080025c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80025c0:	f3ef 8009 	mrs	r0, PSP
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <pxCurrentTCBConst>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f01e 0f10 	tst.w	lr, #16
 80025d0:	bf08      	it	eq
 80025d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80025d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025da:	6010      	str	r0, [r2, #0]
 80025dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80025e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80025e4:	f380 8811 	msr	BASEPRI, r0
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f7fe ffec 	bl	80015cc <vTaskSwitchContext>
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f380 8811 	msr	BASEPRI, r0
 80025fc:	bc09      	pop	{r0, r3}
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	6808      	ldr	r0, [r1, #0]
 8002602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002606:	f01e 0f10 	tst.w	lr, #16
 800260a:	bf08      	it	eq
 800260c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002610:	f380 8809 	msr	PSP, r0
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	f3af 8000 	nop.w

08002620 <pxCurrentTCBConst>:
 8002620:	2000004c 	.word	0x2000004c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop

08002628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002640:	f001 fc78 	bl	8003f34 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002644:	f7fe ff06 	bl	8001454 <xTaskIncrementTick>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <SysTick_Handler+0x34>
        {
        	traceISR_EXIT_TO_SCHEDULER();
 800264e:	f001 fccf 	bl	8003ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
        	/* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <SysTick_Handler+0x4c>)
 8002654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e001      	b.n	8002660 <SysTick_Handler+0x38>
        }
        else{
        	traceISR_EXIT();
 800265c:	f001 fcac 	bl	8003fb8 <SEGGER_SYSVIEW_RecordExitISR>
 8002660:	2300      	movs	r3, #0
 8002662:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <vPortSetupTimerInterrupt+0x34>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <vPortSetupTimerInterrupt+0x38>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <vPortSetupTimerInterrupt+0x3c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <vPortSetupTimerInterrupt+0x40>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <vPortSetupTimerInterrupt+0x44>)
 8002696:	3b01      	subs	r3, #1
 8002698:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <vPortSetupTimerInterrupt+0x34>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010
 80026b0:	e000e018 	.word	0xe000e018
 80026b4:	2000001c 	.word	0x2000001c
 80026b8:	10624dd3 	.word	0x10624dd3
 80026bc:	e000e014 	.word	0xe000e014

080026c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80026c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80026d0 <vPortEnableVFP+0x10>
 80026c4:	6801      	ldr	r1, [r0, #0]
 80026c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026ca:	6001      	str	r1, [r0, #0]
 80026cc:	4770      	bx	lr
 80026ce:	0000      	.short	0x0000
 80026d0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop

080026d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80026de:	f3ef 8305 	mrs	r3, IPSR
 80026e2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	d913      	bls.n	8002712 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <vPortValidateInterruptPriority+0x6c>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <vPortValidateInterruptPriority+0x70>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	7afa      	ldrb	r2, [r7, #11]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d209      	bcs.n	8002712 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	e7fe      	b.n	8002710 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <vPortValidateInterruptPriority+0x74>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <vPortValidateInterruptPriority+0x78>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d909      	bls.n	8002736 <vPortValidateInterruptPriority+0x5e>
 8002722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002726:	f383 8811 	msr	BASEPRI, r3
 800272a:	f3bf 8f6f 	isb	sy
 800272e:	f3bf 8f4f 	dsb	sy
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	e7fe      	b.n	8002734 <vPortValidateInterruptPriority+0x5c>
    }
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000e3f0 	.word	0xe000e3f0
 8002748:	2000018c 	.word	0x2000018c
 800274c:	e000ed0c 	.word	0xe000ed0c
 8002750:	20000190 	.word	0x20000190

08002754 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002760:	f7fe fda8 	bl	80012b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002764:	4b63      	ldr	r3, [pc, #396]	; (80028f4 <pvPortMalloc+0x1a0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800276c:	f000 f92e 	bl	80029cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002770:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <pvPortMalloc+0x1a4>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	f040 80a5 	bne.w	80028c8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02c      	beq.n	80027de <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002784:	2208      	movs	r2, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	d226      	bcs.n	80027de <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002790:	2208      	movs	r2, #8
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f023 0307 	bic.w	r3, r3, #7
 80027a8:	3308      	adds	r3, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d213      	bcs.n	80027d8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	3308      	adds	r3, #8
 80027b8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00f      	beq.n	80027e4 <pvPortMalloc+0x90>
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e7fe      	b.n	80027d6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027dc:	e002      	b.n	80027e4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	e000      	b.n	80027e6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80027e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d06d      	beq.n	80028c8 <pvPortMalloc+0x174>
 80027ec:	4b43      	ldr	r3, [pc, #268]	; (80028fc <pvPortMalloc+0x1a8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d868      	bhi.n	80028c8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80027f6:	4b42      	ldr	r3, [pc, #264]	; (8002900 <pvPortMalloc+0x1ac>)
 80027f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <pvPortMalloc+0x1ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002800:	e004      	b.n	800280c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d903      	bls.n	800281e <pvPortMalloc+0xca>
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f1      	bne.n	8002802 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <pvPortMalloc+0x1a0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	429a      	cmp	r2, r3
 8002826:	d04f      	beq.n	80028c8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	4413      	add	r3, r2
 8002830:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	1ad2      	subs	r2, r2, r3
 8002842:	2308      	movs	r3, #8
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	429a      	cmp	r2, r3
 8002848:	d91e      	bls.n	8002888 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4413      	add	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	2b00      	cmp	r3, #0
 800285a:	d009      	beq.n	8002870 <pvPortMalloc+0x11c>
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e7fe      	b.n	800286e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	1ad2      	subs	r2, r2, r3
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002882:	69b8      	ldr	r0, [r7, #24]
 8002884:	f000 f904 	bl	8002a90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <pvPortMalloc+0x1a8>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <pvPortMalloc+0x1a8>)
 8002894:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <pvPortMalloc+0x1a8>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <pvPortMalloc+0x1b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d203      	bcs.n	80028aa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <pvPortMalloc+0x1a8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <pvPortMalloc+0x1b0>)
 80028a8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <pvPortMalloc+0x1a4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <pvPortMalloc+0x1b4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	4a10      	ldr	r2, [pc, #64]	; (8002908 <pvPortMalloc+0x1b4>)
 80028c6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80028c8:	f7fe fd02 	bl	80012d0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <pvPortMalloc+0x196>
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e7fe      	b.n	80028e8 <pvPortMalloc+0x194>
    return pvReturn;
 80028ea:	69fb      	ldr	r3, [r7, #28]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20012d9c 	.word	0x20012d9c
 80028f8:	20012db0 	.word	0x20012db0
 80028fc:	20012da0 	.word	0x20012da0
 8002900:	20012d94 	.word	0x20012d94
 8002904:	20012da4 	.word	0x20012da4
 8002908:	20012da8 	.word	0x20012da8

0800290c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04b      	beq.n	80029b6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800291e:	2308      	movs	r3, #8
 8002920:	425b      	negs	r3, r3
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4413      	add	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4b23      	ldr	r3, [pc, #140]	; (80029c0 <vPortFree+0xb4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <vPortFree+0x42>
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e7fe      	b.n	800294c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <vPortFree+0x5e>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	e7fe      	b.n	8002968 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	4b14      	ldr	r3, [pc, #80]	; (80029c0 <vPortFree+0xb4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01e      	beq.n	80029b6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11a      	bne.n	80029b6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <vPortFree+0xb4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002990:	f7fe fc90 	bl	80012b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <vPortFree+0xb8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4413      	add	r3, r2
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <vPortFree+0xb8>)
 80029a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80029a2:	6938      	ldr	r0, [r7, #16]
 80029a4:	f000 f874 	bl	8002a90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <vPortFree+0xbc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <vPortFree+0xbc>)
 80029b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80029b2:	f7fe fc8d 	bl	80012d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20012db0 	.word	0x20012db0
 80029c4:	20012da0 	.word	0x20012da0
 80029c8:	20012dac 	.word	0x20012dac

080029cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80029d2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80029d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <prvHeapInit+0xac>)
 80029da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3307      	adds	r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0307 	bic.w	r3, r3, #7
 80029f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <prvHeapInit+0xac>)
 80029fc:	4413      	add	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <prvHeapInit+0xb0>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <prvHeapInit+0xb0>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4413      	add	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002a18:	2208      	movs	r2, #8
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0307 	bic.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <prvHeapInit+0xb4>)
 8002a2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <prvHeapInit+0xb4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <prvHeapInit+0xb4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <prvHeapInit+0xb4>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <prvHeapInit+0xb8>)
 8002a5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <prvHeapInit+0xbc>)
 8002a62:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <prvHeapInit+0xc0>)
 8002a66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	20000194 	.word	0x20000194
 8002a7c:	20012d94 	.word	0x20012d94
 8002a80:	20012d9c 	.word	0x20012d9c
 8002a84:	20012da4 	.word	0x20012da4
 8002a88:	20012da0 	.word	0x20012da0
 8002a8c:	20012db0 	.word	0x20012db0

08002a90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <prvInsertBlockIntoFreeList+0xac>)
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	e002      	b.n	8002aa4 <prvInsertBlockIntoFreeList+0x14>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d8f7      	bhi.n	8002a9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d108      	bne.n	8002ad2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	441a      	add	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d118      	bne.n	8002b18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <prvInsertBlockIntoFreeList+0xb0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d00d      	beq.n	8002b0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e008      	b.n	8002b20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <prvInsertBlockIntoFreeList+0xb0>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e003      	b.n	8002b20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d002      	beq.n	8002b2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20012d94 	.word	0x20012d94
 8002b40:	20012d9c 	.word	0x20012d9c

08002b44 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <_cbSendSystemDesc+0x14>)
 8002b4a:	f001 f99f 	bl	8003e8c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002b4e:	4803      	ldr	r0, [pc, #12]	; (8002b5c <_cbSendSystemDesc+0x18>)
 8002b50:	f001 f99c 	bl	8003e8c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	08005268 	.word	0x08005268
 8002b5c:	080052a4 	.word	0x080052a4

08002b60 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002b64:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <SEGGER_SYSVIEW_Conf+0x20>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <SEGGER_SYSVIEW_Conf+0x20>)
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SEGGER_SYSVIEW_Conf+0x24>)
 8002b6e:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <SEGGER_SYSVIEW_Conf+0x28>)
 8002b70:	f000 fd0a 	bl	8003588 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002b74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002b78:	f000 fd4a 	bl	8003610 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000001c 	.word	0x2000001c
 8002b84:	08002b45 	.word	0x08002b45
 8002b88:	0800539c 	.word	0x0800539c

08002b8c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	e034      	b.n	8002c02 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002b98:	491e      	ldr	r1, [pc, #120]	; (8002c14 <_cbSendTaskList+0x88>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	491a      	ldr	r1, [pc, #104]	; (8002c14 <_cbSendTaskList+0x88>)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	4916      	ldr	r1, [pc, #88]	; (8002c14 <_cbSendTaskList+0x88>)
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3308      	adds	r3, #8
 8002bca:	681d      	ldr	r5, [r3, #0]
 8002bcc:	4911      	ldr	r1, [pc, #68]	; (8002c14 <_cbSendTaskList+0x88>)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	330c      	adds	r3, #12
 8002bdc:	681e      	ldr	r6, [r3, #0]
 8002bde:	490d      	ldr	r1, [pc, #52]	; (8002c14 <_cbSendTaskList+0x88>)
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3310      	adds	r3, #16
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4633      	mov	r3, r6
 8002bf4:	462a      	mov	r2, r5
 8002bf6:	4621      	mov	r1, r4
 8002bf8:	f000 f8b4 	bl	8002d64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <_cbSendTaskList+0x8c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3c5      	bcc.n	8002b98 <_cbSendTaskList+0xc>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c14:	20012db4 	.word	0x20012db4
 8002c18:	20012e54 	.word	0x20012e54

08002c1c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002c22:	f7fe fc05 	bl	8001430 <xTaskGetTickCountFromISR>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f04f 0400 	mov.w	r4, #0
 8002c2c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002c30:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002c34:	462b      	mov	r3, r5
 8002c36:	4634      	mov	r4, r6
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	0162      	lsls	r2, r4, #5
 8002c42:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8002c46:	0159      	lsls	r1, r3, #5
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4614      	mov	r4, r2
 8002c4c:	1b5b      	subs	r3, r3, r5
 8002c4e:	eb64 0406 	sbc.w	r4, r4, r6
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	00a2      	lsls	r2, r4, #2
 8002c5c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002c60:	0099      	lsls	r1, r3, #2
 8002c62:	460b      	mov	r3, r1
 8002c64:	4614      	mov	r4, r2
 8002c66:	195b      	adds	r3, r3, r5
 8002c68:	eb44 0406 	adc.w	r4, r4, r6
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	00e2      	lsls	r2, r4, #3
 8002c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c7a:	00d9      	lsls	r1, r3, #3
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4614      	mov	r4, r2
 8002c80:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002c84:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	492b      	ldr	r1, [pc, #172]	; (8002d54 <SYSVIEW_AddTask+0xc0>)
 8002ca6:	68b8      	ldr	r0, [r7, #8]
 8002ca8:	f002 faa4 	bl	80051f4 <memcmp>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d04b      	beq.n	8002d4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002cb2:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d903      	bls.n	8002cc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002cba:	4828      	ldr	r0, [pc, #160]	; (8002d5c <SYSVIEW_AddTask+0xc8>)
 8002cbc:	f001 fbe2 	bl	8004484 <SEGGER_SYSVIEW_Warn>
    return;
 8002cc0:	e044      	b.n	8002d4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4926      	ldr	r1, [pc, #152]	; (8002d60 <SYSVIEW_AddTask+0xcc>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4921      	ldr	r1, [pc, #132]	; (8002d60 <SYSVIEW_AddTask+0xcc>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002cec:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	491b      	ldr	r1, [pc, #108]	; (8002d60 <SYSVIEW_AddTask+0xcc>)
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4916      	ldr	r1, [pc, #88]	; (8002d60 <SYSVIEW_AddTask+0xcc>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	330c      	adds	r3, #12
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4910      	ldr	r1, [pc, #64]	; (8002d60 <SYSVIEW_AddTask+0xcc>)
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	3310      	adds	r3, #16
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <SYSVIEW_AddTask+0xc4>)
 8002d36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f80e 	bl	8002d64 <SYSVIEW_SendTaskInfo>
 8002d48:	e000      	b.n	8002d4c <SYSVIEW_AddTask+0xb8>
    return;
 8002d4a:	bf00      	nop

}
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	080052b4 	.word	0x080052b4
 8002d58:	20012e54 	.word	0x20012e54
 8002d5c:	080052bc 	.word	0x080052bc
 8002d60:	20012db4 	.word	0x20012db4

08002d64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	2214      	movs	r2, #20
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fa54 	bl	8005228 <memset>
  TaskInfo.TaskID     = TaskID;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 ff7f 	bl	8003c9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	; 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <_DoInit+0x98>)
 8002db0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <_DoInit+0x9c>)
 8002dc2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a20      	ldr	r2, [pc, #128]	; (8002e48 <_DoInit+0xa0>)
 8002dc8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <_DoInit+0x9c>)
 8002de8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <_DoInit+0xa4>)
 8002dee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2210      	movs	r2, #16
 8002df4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3307      	adds	r3, #7
 8002e0c:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <_DoInit+0xa8>)
 8002e0e:	6810      	ldr	r0, [r2, #0]
 8002e10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002e12:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a0e      	ldr	r2, [pc, #56]	; (8002e54 <_DoInit+0xac>)
 8002e1a:	6810      	ldr	r0, [r2, #0]
 8002e1c:	6018      	str	r0, [r3, #0]
 8002e1e:	8891      	ldrh	r1, [r2, #4]
 8002e20:	7992      	ldrb	r2, [r2, #6]
 8002e22:	8099      	strh	r1, [r3, #4]
 8002e24:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002e26:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8002e30:	f3bf 8f5f 	dmb	sy
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	20015bd4 	.word	0x20015bd4
 8002e44:	0800530c 	.word	0x0800530c
 8002e48:	20012e58 	.word	0x20012e58
 8002e4c:	20013258 	.word	0x20013258
 8002e50:	08005318 	.word	0x08005318
 8002e54:	0800531c 	.word	0x0800531c

08002e58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8002e64:	4b3e      	ldr	r3, [pc, #248]	; (8002f60 <SEGGER_RTT_ReadNoLock+0x108>)
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <SEGGER_RTT_ReadNoLock+0x1e>
 8002e72:	f7ff ff99 	bl	8002da8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	3360      	adds	r3, #96	; 0x60
 8002e82:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <SEGGER_RTT_ReadNoLock+0x108>)
 8002e84:	4413      	add	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d92b      	bls.n	8002efc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	bf28      	it	cs
 8002eb6:	4613      	movcs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	4413      	add	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6939      	ldr	r1, [r7, #16]
 8002ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eca:	f002 f9a2 	bl	8005212 <memcpy>
    NumBytesRead += NumBytesRem;
 8002ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	4413      	add	r3, r2
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	4413      	add	r3, r2
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d101      	bne.n	8002efc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bf28      	it	cs
 8002f0c:	4613      	movcs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	4413      	add	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	6939      	ldr	r1, [r7, #16]
 8002f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f26:	f002 f974 	bl	8005212 <memcpy>
    NumBytesRead += NumBytesRem;
 8002f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4413      	add	r3, r2
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8002f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4413      	add	r3, r2
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	4413      	add	r3, r2
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20015bd4 	.word	0x20015bd4

08002f64 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <SEGGER_RTT_AllocUpBuffer+0x20>
 8002f80:	f7ff ff12 	bl	8002da8 <_DoInit>
  SEGGER_RTT_LOCK();
 8002f84:	f3ef 8311 	mrs	r3, BASEPRI
 8002f88:	f04f 0120 	mov.w	r1, #32
 8002f8c:	f381 8811 	msr	BASEPRI, r1
 8002f90:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8002f94:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8002f9a:	6939      	ldr	r1, [r7, #16]
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	440b      	add	r3, r1
 8002faa:	3304      	adds	r3, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	dbeb      	blt.n	8002f9a <SEGGER_RTT_AllocUpBuffer+0x36>
 8002fc2:	e000      	b.n	8002fc6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8002fc4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	da3f      	bge.n	8003050 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8002fd0:	6939      	ldr	r1, [r7, #16]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002fe4:	6939      	ldr	r1, [r7, #16]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8002ffa:	6939      	ldr	r1, [r7, #16]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	3320      	adds	r3, #32
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800300e:	6939      	ldr	r1, [r7, #16]
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	3328      	adds	r3, #40	; 0x28
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003022:	6939      	ldr	r1, [r7, #16]
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3324      	adds	r3, #36	; 0x24
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003036:	6939      	ldr	r1, [r7, #16]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	332c      	adds	r3, #44	; 0x2c
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800304a:	f3bf 8f5f 	dmb	sy
 800304e:	e002      	b.n	8003056 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003054:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800305c:	69fb      	ldr	r3, [r7, #28]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20015bd4 	.word	0x20015bd4

0800306c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800307a:	4b33      	ldr	r3, [pc, #204]	; (8003148 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003088:	f7ff fe8e 	bl	8002da8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800308c:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800308e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	461a      	mov	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4293      	cmp	r3, r2
 800309a:	d24d      	bcs.n	8003138 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800309c:	f3ef 8311 	mrs	r3, BASEPRI
 80030a0:	f04f 0120 	mov.w	r1, #32
 80030a4:	f381 8811 	msr	BASEPRI, r1
 80030a8:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d031      	beq.n	8003114 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80030b0:	6979      	ldr	r1, [r7, #20]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	440b      	add	r3, r1
 80030be:	3360      	adds	r3, #96	; 0x60
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80030c4:	6979      	ldr	r1, [r7, #20]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	440b      	add	r3, r1
 80030d2:	3364      	adds	r3, #100	; 0x64
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80030d8:	6979      	ldr	r1, [r7, #20]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	440b      	add	r3, r1
 80030e6:	3368      	adds	r3, #104	; 0x68
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	3370      	adds	r3, #112	; 0x70
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003100:	6979      	ldr	r1, [r7, #20]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	440b      	add	r3, r1
 800310e:	336c      	adds	r3, #108	; 0x6c
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003114:	6979      	ldr	r1, [r7, #20]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3374      	adds	r3, #116	; 0x74
 8003124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003126:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003128:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e002      	b.n	800313e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800313c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800313e:	69fb      	ldr	r3, [r7, #28]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20015bd4 	.word	0x20015bd4

0800314c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800315c:	e002      	b.n	8003164 <_EncodeStr+0x18>
    Len++;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	3301      	adds	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f6      	bne.n	800315e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d901      	bls.n	800317c <_EncodeStr+0x30>
    Len = Limit;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2bfe      	cmp	r3, #254	; 0xfe
 8003180:	d806      	bhi.n	8003190 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	60fa      	str	r2, [r7, #12]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e011      	b.n	80031b4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	60fa      	str	r2, [r7, #12]
 8003196:	22ff      	movs	r2, #255	; 0xff
 8003198:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	0a19      	lsrs	r1, r3, #8
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	60fa      	str	r2, [r7, #12]
 80031b0:	b2ca      	uxtb	r2, r1
 80031b2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80031b8:	e00a      	b.n	80031d0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	1c53      	adds	r3, r2, #1
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	60f9      	str	r1, [r7, #12]
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	701a      	strb	r2, [r3, #0]
    n++;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d3f0      	bcc.n	80031ba <_EncodeStr+0x6e>
  }
  return pPayload;
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3304      	adds	r3, #4
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
	...

08003200 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <_HandleIncomingPacket+0xd4>)
 8003208:	7e1b      	ldrb	r3, [r3, #24]
 800320a:	4618      	mov	r0, r3
 800320c:	1cfb      	adds	r3, r7, #3
 800320e:	2201      	movs	r2, #1
 8003210:	4619      	mov	r1, r3
 8003212:	f7ff fe21 	bl	8002e58 <SEGGER_RTT_ReadNoLock>
 8003216:	4603      	mov	r3, r0
 8003218:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	dd4d      	ble.n	80032bc <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d022      	beq.n	800326c <_HandleIncomingPacket+0x6c>
 8003226:	2b05      	cmp	r3, #5
 8003228:	dc0b      	bgt.n	8003242 <_HandleIncomingPacket+0x42>
 800322a:	2b02      	cmp	r3, #2
 800322c:	d015      	beq.n	800325a <_HandleIncomingPacket+0x5a>
 800322e:	2b02      	cmp	r3, #2
 8003230:	dc02      	bgt.n	8003238 <_HandleIncomingPacket+0x38>
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00e      	beq.n	8003254 <_HandleIncomingPacket+0x54>
 8003236:	e034      	b.n	80032a2 <_HandleIncomingPacket+0xa2>
 8003238:	2b03      	cmp	r3, #3
 800323a:	d011      	beq.n	8003260 <_HandleIncomingPacket+0x60>
 800323c:	2b04      	cmp	r3, #4
 800323e:	d012      	beq.n	8003266 <_HandleIncomingPacket+0x66>
 8003240:	e02f      	b.n	80032a2 <_HandleIncomingPacket+0xa2>
 8003242:	2b07      	cmp	r3, #7
 8003244:	d018      	beq.n	8003278 <_HandleIncomingPacket+0x78>
 8003246:	2b07      	cmp	r3, #7
 8003248:	db13      	blt.n	8003272 <_HandleIncomingPacket+0x72>
 800324a:	2b7f      	cmp	r3, #127	; 0x7f
 800324c:	d038      	beq.n	80032c0 <_HandleIncomingPacket+0xc0>
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d015      	beq.n	800327e <_HandleIncomingPacket+0x7e>
 8003252:	e026      	b.n	80032a2 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003254:	f000 fba8 	bl	80039a8 <SEGGER_SYSVIEW_Start>
      break;
 8003258:	e037      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800325a:	f000 fc5f 	bl	8003b1c <SEGGER_SYSVIEW_Stop>
      break;
 800325e:	e034      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003260:	f000 fe38 	bl	8003ed4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003264:	e031      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003266:	f000 fdfd 	bl	8003e64 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800326a:	e02e      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800326c:	f000 fc7c 	bl	8003b68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003270:	e02b      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003272:	f001 f8c9 	bl	8004408 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003276:	e028      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003278:	f001 f8a8 	bl	80043cc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800327c:	e025      	b.n	80032ca <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <_HandleIncomingPacket+0xd4>)
 8003280:	7e1b      	ldrb	r3, [r3, #24]
 8003282:	4618      	mov	r0, r3
 8003284:	1cfb      	adds	r3, r7, #3
 8003286:	2201      	movs	r2, #1
 8003288:	4619      	mov	r1, r3
 800328a:	f7ff fde5 	bl	8002e58 <SEGGER_RTT_ReadNoLock>
 800328e:	4603      	mov	r3, r0
 8003290:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	dd15      	ble.n	80032c4 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f816 	bl	80042cc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80032a0:	e010      	b.n	80032c4 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da0e      	bge.n	80032c8 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <_HandleIncomingPacket+0xd4>)
 80032ac:	7e1b      	ldrb	r3, [r3, #24]
 80032ae:	4618      	mov	r0, r3
 80032b0:	1cfb      	adds	r3, r7, #3
 80032b2:	2201      	movs	r2, #1
 80032b4:	4619      	mov	r1, r3
 80032b6:	f7ff fdcf 	bl	8002e58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80032ba:	e005      	b.n	80032c8 <_HandleIncomingPacket+0xc8>
    }
  }
 80032bc:	bf00      	nop
 80032be:	e004      	b.n	80032ca <_HandleIncomingPacket+0xca>
      break;
 80032c0:	bf00      	nop
 80032c2:	e002      	b.n	80032ca <_HandleIncomingPacket+0xca>
      break;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <_HandleIncomingPacket+0xca>
      break;
 80032c8:	bf00      	nop
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20015a70 	.word	0x20015a70

080032d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80032de:	2301      	movs	r3, #1
 80032e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ec:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f2:	e00b      	b.n	800330c <_TrySendOverflowPacket+0x34>
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	1c59      	adds	r1, r3, #1
 80032fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80032fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	09db      	lsrs	r3, r3, #7
 800330a:	62bb      	str	r3, [r7, #40]	; 0x28
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	2b7f      	cmp	r3, #127	; 0x7f
 8003310:	d8f0      	bhi.n	80032f4 <_TrySendOverflowPacket+0x1c>
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003322:	4b25      	ldr	r3, [pc, #148]	; (80033b8 <_TrySendOverflowPacket+0xe0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	e00b      	b.n	8003354 <_TrySendOverflowPacket+0x7c>
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	6279      	str	r1, [r7, #36]	; 0x24
 8003346:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	09db      	lsrs	r3, r3, #7
 8003352:	623b      	str	r3, [r7, #32]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b7f      	cmp	r3, #127	; 0x7f
 8003358:	d8f0      	bhi.n	800333c <_TrySendOverflowPacket+0x64>
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	627a      	str	r2, [r7, #36]	; 0x24
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	4618      	mov	r0, r3
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	461a      	mov	r2, r3
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	4619      	mov	r1, r3
 800337c:	f7fc ff48 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003380:	4603      	mov	r3, r0
 8003382:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	b2da      	uxtb	r2, r3
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e004      	b.n	80033a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a03      	ldr	r2, [pc, #12]	; (80033b4 <_TrySendOverflowPacket+0xdc>)
 80033a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80033a8:	693b      	ldr	r3, [r7, #16]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3730      	adds	r7, #48	; 0x30
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20015a70 	.word	0x20015a70
 80033b8:	e0001004 	.word	0xe0001004

080033bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80033c8:	4b6c      	ldr	r3, [pc, #432]	; (800357c <_SendPacket+0x1c0>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d010      	beq.n	80033f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80033d0:	4b6a      	ldr	r3, [pc, #424]	; (800357c <_SendPacket+0x1c0>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a3 	beq.w	8003520 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80033da:	4b68      	ldr	r3, [pc, #416]	; (800357c <_SendPacket+0x1c0>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d109      	bne.n	80033f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80033e2:	f7ff ff79 	bl	80032d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80033e6:	4b65      	ldr	r3, [pc, #404]	; (800357c <_SendPacket+0x1c0>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	f040 809a 	bne.w	8003524 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80033f0:	e001      	b.n	80033f6 <_SendPacket+0x3a>
    goto Send;
 80033f2:	bf00      	nop
 80033f4:	e000      	b.n	80033f8 <_SendPacket+0x3c>
Send:
 80033f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b1f      	cmp	r3, #31
 80033fc:	d809      	bhi.n	8003412 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <_SendPacket+0x1c0>)
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 808b 	bne.w	8003528 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b17      	cmp	r3, #23
 8003416:	d807      	bhi.n	8003428 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3b01      	subs	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e03d      	b.n	80034a4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b7f      	cmp	r3, #127	; 0x7f
 8003434:	d912      	bls.n	800345c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	09da      	lsrs	r2, r3, #7
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3b01      	subs	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	3a01      	subs	r2, #1
 800344e:	60fa      	str	r2, [r7, #12]
 8003450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e006      	b.n	800346a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3b01      	subs	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b7f      	cmp	r3, #127	; 0x7f
 800346e:	d912      	bls.n	8003496 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	09da      	lsrs	r2, r3, #7
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3b01      	subs	r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	3a01      	subs	r2, #1
 8003488:	60fa      	str	r2, [r7, #12]
 800348a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800348e:	b2da      	uxtb	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e006      	b.n	80034a4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3b01      	subs	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80034a4:	4b36      	ldr	r3, [pc, #216]	; (8003580 <_SendPacket+0x1c4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80034aa:	4b34      	ldr	r3, [pc, #208]	; (800357c <_SendPacket+0x1c0>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	e00b      	b.n	80034d6 <_SendPacket+0x11a>
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	1c59      	adds	r1, r3, #1
 80034c6:	6279      	str	r1, [r7, #36]	; 0x24
 80034c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	09db      	lsrs	r3, r3, #7
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2b7f      	cmp	r3, #127	; 0x7f
 80034da:	d8f0      	bhi.n	80034be <_SendPacket+0x102>
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	627a      	str	r2, [r7, #36]	; 0x24
 80034e2:	6a3a      	ldr	r2, [r7, #32]
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <_SendPacket+0x1c0>)
 80034ee:	785b      	ldrb	r3, [r3, #1]
 80034f0:	4618      	mov	r0, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	f7fc fe88 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003500:	4603      	mov	r3, r0
 8003502:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800350a:	4a1c      	ldr	r2, [pc, #112]	; (800357c <_SendPacket+0x1c0>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	60d3      	str	r3, [r2, #12]
 8003510:	e00b      	b.n	800352a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <_SendPacket+0x1c0>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b2da      	uxtb	r2, r3
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <_SendPacket+0x1c0>)
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	e004      	b.n	800352a <_SendPacket+0x16e>
    goto SendDone;
 8003520:	bf00      	nop
 8003522:	e002      	b.n	800352a <_SendPacket+0x16e>
      goto SendDone;
 8003524:	bf00      	nop
 8003526:	e000      	b.n	800352a <_SendPacket+0x16e>
      goto SendDone;
 8003528:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <_SendPacket+0x1c0>)
 800352c:	7e1b      	ldrb	r3, [r3, #24]
 800352e:	4619      	mov	r1, r3
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <_SendPacket+0x1c8>)
 8003532:	460b      	mov	r3, r1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	440b      	add	r3, r1
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	336c      	adds	r3, #108	; 0x6c
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <_SendPacket+0x1c0>)
 8003542:	7e1b      	ldrb	r3, [r3, #24]
 8003544:	4618      	mov	r0, r3
 8003546:	490f      	ldr	r1, [pc, #60]	; (8003584 <_SendPacket+0x1c8>)
 8003548:	4603      	mov	r3, r0
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4403      	add	r3, r0
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	3370      	adds	r3, #112	; 0x70
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d00b      	beq.n	8003572 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <_SendPacket+0x1c0>)
 800355c:	789b      	ldrb	r3, [r3, #2]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d107      	bne.n	8003572 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <_SendPacket+0x1c0>)
 8003564:	2201      	movs	r2, #1
 8003566:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003568:	f7ff fe4a 	bl	8003200 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800356c:	4b03      	ldr	r3, [pc, #12]	; (800357c <_SendPacket+0x1c0>)
 800356e:	2200      	movs	r2, #0
 8003570:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003572:	bf00      	nop
 8003574:	3728      	adds	r7, #40	; 0x28
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20015a70 	.word	0x20015a70
 8003580:	e0001004 	.word	0xe0001004
 8003584:	20015bd4 	.word	0x20015bd4

08003588 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003596:	2300      	movs	r3, #0
 8003598:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800359c:	4917      	ldr	r1, [pc, #92]	; (80035fc <SEGGER_SYSVIEW_Init+0x74>)
 800359e:	4818      	ldr	r0, [pc, #96]	; (8003600 <SEGGER_SYSVIEW_Init+0x78>)
 80035a0:	f7ff fce0 	bl	8002f64 <SEGGER_RTT_AllocUpBuffer>
 80035a4:	4603      	mov	r3, r0
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	4b16      	ldr	r3, [pc, #88]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035aa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80035ac:	4b15      	ldr	r3, [pc, #84]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035ae:	785a      	ldrb	r2, [r3, #1]
 80035b0:	4b14      	ldr	r3, [pc, #80]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035b2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80035b4:	4b13      	ldr	r3, [pc, #76]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035b6:	7e1b      	ldrb	r3, [r3, #24]
 80035b8:	4618      	mov	r0, r3
 80035ba:	2300      	movs	r3, #0
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2308      	movs	r3, #8
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <SEGGER_SYSVIEW_Init+0x80>)
 80035c2:	490f      	ldr	r1, [pc, #60]	; (8003600 <SEGGER_SYSVIEW_Init+0x78>)
 80035c4:	f7ff fd52 	bl	800306c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80035c8:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <SEGGER_SYSVIEW_Init+0x84>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0c      	ldr	r2, [pc, #48]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035d4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80035d6:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80035dc:	4a09      	ldr	r2, [pc, #36]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80035e8:	4a06      	ldr	r2, [pc, #24]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <SEGGER_SYSVIEW_Init+0x7c>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	20013268 	.word	0x20013268
 8003600:	08005324 	.word	0x08005324
 8003604:	20015a70 	.word	0x20015a70
 8003608:	20015a68 	.word	0x20015a68
 800360c:	e0001004 	.word	0xe0001004

08003610 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6113      	str	r3, [r2, #16]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20015a70 	.word	0x20015a70

08003630 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003638:	f3ef 8311 	mrs	r3, BASEPRI
 800363c:	f04f 0120 	mov.w	r1, #32
 8003640:	f381 8811 	msr	BASEPRI, r1
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4808      	ldr	r0, [pc, #32]	; (8003668 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003648:	f7ff fdcd 	bl	80031e6 <_PreparePacket>
 800364c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68b8      	ldr	r0, [r7, #8]
 8003654:	f7ff feb2 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f383 8811 	msr	BASEPRI, r3
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20015aa0 	.word	0x20015aa0

0800366c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003676:	f3ef 8311 	mrs	r3, BASEPRI
 800367a:	f04f 0120 	mov.w	r1, #32
 800367e:	f381 8811 	msr	BASEPRI, r1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	4816      	ldr	r0, [pc, #88]	; (80036e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003686:	f7ff fdae 	bl	80031e6 <_PreparePacket>
 800368a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	e00b      	b.n	80036b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	1c59      	adds	r1, r3, #1
 80036a2:	61f9      	str	r1, [r7, #28]
 80036a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	09db      	lsrs	r3, r3, #7
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b7f      	cmp	r3, #127	; 0x7f
 80036b6:	d8f0      	bhi.n	800369a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	61fa      	str	r2, [r7, #28]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68f9      	ldr	r1, [r7, #12]
 80036cc:	6938      	ldr	r0, [r7, #16]
 80036ce:	f7ff fe75 	bl	80033bc <_SendPacket>
  RECORD_END();
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f383 8811 	msr	BASEPRI, r3
}
 80036d8:	bf00      	nop
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20015aa0 	.word	0x20015aa0

080036e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80036f0:	f3ef 8311 	mrs	r3, BASEPRI
 80036f4:	f04f 0120 	mov.w	r1, #32
 80036f8:	f381 8811 	msr	BASEPRI, r1
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	4825      	ldr	r0, [pc, #148]	; (8003794 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003700:	f7ff fd71 	bl	80031e6 <_PreparePacket>
 8003704:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
 8003712:	e00b      	b.n	800372c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	b2da      	uxtb	r2, r3
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800371e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	09db      	lsrs	r3, r3, #7
 800372a:	62bb      	str	r3, [r7, #40]	; 0x28
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	2b7f      	cmp	r3, #127	; 0x7f
 8003730:	d8f0      	bhi.n	8003714 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	e00b      	b.n	8003764 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1c59      	adds	r1, r3, #1
 8003754:	6279      	str	r1, [r7, #36]	; 0x24
 8003756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	09db      	lsrs	r3, r3, #7
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2b7f      	cmp	r3, #127	; 0x7f
 8003768:	d8f0      	bhi.n	800374c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	627a      	str	r2, [r7, #36]	; 0x24
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	69b8      	ldr	r0, [r7, #24]
 8003780:	f7ff fe1c 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f383 8811 	msr	BASEPRI, r3
}
 800378a:	bf00      	nop
 800378c:	3730      	adds	r7, #48	; 0x30
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20015aa0 	.word	0x20015aa0

08003798 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80037a6:	f3ef 8311 	mrs	r3, BASEPRI
 80037aa:	f04f 0120 	mov.w	r1, #32
 80037ae:	f381 8811 	msr	BASEPRI, r1
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	4832      	ldr	r0, [pc, #200]	; (8003880 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80037b6:	f7ff fd16 	bl	80031e6 <_PreparePacket>
 80037ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
 80037c8:	e00b      	b.n	80037e2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	6379      	str	r1, [r7, #52]	; 0x34
 80037d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	09db      	lsrs	r3, r3, #7
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	2b7f      	cmp	r3, #127	; 0x7f
 80037e6:	d8f0      	bhi.n	80037ca <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	637a      	str	r2, [r7, #52]	; 0x34
 80037ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003800:	e00b      	b.n	800381a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	b2da      	uxtb	r2, r3
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	1c59      	adds	r1, r3, #1
 800380a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800380c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	09db      	lsrs	r3, r3, #7
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
 800381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381c:	2b7f      	cmp	r3, #127	; 0x7f
 800381e:	d8f0      	bhi.n	8003802 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	623b      	str	r3, [r7, #32]
 8003838:	e00b      	b.n	8003852 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	1c59      	adds	r1, r3, #1
 8003842:	6279      	str	r1, [r7, #36]	; 0x24
 8003844:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	09db      	lsrs	r3, r3, #7
 8003850:	623b      	str	r3, [r7, #32]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2b7f      	cmp	r3, #127	; 0x7f
 8003856:	d8f0      	bhi.n	800383a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	627a      	str	r2, [r7, #36]	; 0x24
 800385e:	6a3a      	ldr	r2, [r7, #32]
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	69b8      	ldr	r0, [r7, #24]
 800386e:	f7ff fda5 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f383 8811 	msr	BASEPRI, r3
}
 8003878:	bf00      	nop
 800387a:	3738      	adds	r7, #56	; 0x38
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20015aa0 	.word	0x20015aa0

08003884 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b090      	sub	sp, #64	; 0x40
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003892:	f3ef 8311 	mrs	r3, BASEPRI
 8003896:	f04f 0120 	mov.w	r1, #32
 800389a:	f381 8811 	msr	BASEPRI, r1
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	4840      	ldr	r0, [pc, #256]	; (80039a4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80038a2:	f7ff fca0 	bl	80031e6 <_PreparePacket>
 80038a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b4:	e00b      	b.n	80038ce <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	1c59      	adds	r1, r3, #1
 80038be:	63f9      	str	r1, [r7, #60]	; 0x3c
 80038c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	09db      	lsrs	r3, r3, #7
 80038cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d0:	2b7f      	cmp	r3, #127	; 0x7f
 80038d2:	d8f0      	bhi.n	80038b6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80038d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	633b      	str	r3, [r7, #48]	; 0x30
 80038ec:	e00b      	b.n	8003906 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	1c59      	adds	r1, r3, #1
 80038f6:	6379      	str	r1, [r7, #52]	; 0x34
 80038f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	09db      	lsrs	r3, r3, #7
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	2b7f      	cmp	r3, #127	; 0x7f
 800390a:	d8f0      	bhi.n	80038ee <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	637a      	str	r2, [r7, #52]	; 0x34
 8003912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
 8003924:	e00b      	b.n	800393e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	b2da      	uxtb	r2, r3
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	1c59      	adds	r1, r3, #1
 800392e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	09db      	lsrs	r3, r3, #7
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	2b7f      	cmp	r3, #127	; 0x7f
 8003942:	d8f0      	bhi.n	8003926 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800394a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003952:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	e00b      	b.n	8003976 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1c59      	adds	r1, r3, #1
 8003966:	6279      	str	r1, [r7, #36]	; 0x24
 8003968:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	09db      	lsrs	r3, r3, #7
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	2b7f      	cmp	r3, #127	; 0x7f
 800397a:	d8f0      	bhi.n	800395e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	627a      	str	r2, [r7, #36]	; 0x24
 8003982:	6a3a      	ldr	r2, [r7, #32]
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	701a      	strb	r2, [r3, #0]
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	69b8      	ldr	r0, [r7, #24]
 8003992:	f7ff fd13 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f383 8811 	msr	BASEPRI, r3
}
 800399c:	bf00      	nop
 800399e:	3740      	adds	r7, #64	; 0x40
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	20015aa0 	.word	0x20015aa0

080039a8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80039ae:	4b58      	ldr	r3, [pc, #352]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80039b4:	f3ef 8311 	mrs	r3, BASEPRI
 80039b8:	f04f 0120 	mov.w	r1, #32
 80039bc:	f381 8811 	msr	BASEPRI, r1
 80039c0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80039c2:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	220a      	movs	r2, #10
 80039c8:	4952      	ldr	r1, [pc, #328]	; (8003b14 <SEGGER_SYSVIEW_Start+0x16c>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fc fc20 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80039d6:	200a      	movs	r0, #10
 80039d8:	f7ff fe2a 	bl	8003630 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80039dc:	f3ef 8311 	mrs	r3, BASEPRI
 80039e0:	f04f 0120 	mov.w	r1, #32
 80039e4:	f381 8811 	msr	BASEPRI, r1
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	484b      	ldr	r0, [pc, #300]	; (8003b18 <SEGGER_SYSVIEW_Start+0x170>)
 80039ec:	f7ff fbfb 	bl	80031e6 <_PreparePacket>
 80039f0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fa:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a00:	e00b      	b.n	8003a1a <SEGGER_SYSVIEW_Start+0x72>
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	1c59      	adds	r1, r3, #1
 8003a0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	701a      	strb	r2, [r3, #0]
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	09db      	lsrs	r3, r3, #7
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a1e:	d8f0      	bhi.n	8003a02 <SEGGER_SYSVIEW_Start+0x5a>
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	4b36      	ldr	r3, [pc, #216]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	e00b      	b.n	8003a54 <SEGGER_SYSVIEW_Start+0xac>
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	1c59      	adds	r1, r3, #1
 8003a44:	6279      	str	r1, [r7, #36]	; 0x24
 8003a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	09db      	lsrs	r3, r3, #7
 8003a52:	623b      	str	r3, [r7, #32]
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b7f      	cmp	r3, #127	; 0x7f
 8003a58:	d8f0      	bhi.n	8003a3c <SEGGER_SYSVIEW_Start+0x94>
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	e00b      	b.n	8003a8e <SEGGER_SYSVIEW_Start+0xe6>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	61f9      	str	r1, [r7, #28]
 8003a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b7f      	cmp	r3, #127	; 0x7f
 8003a92:	d8f0      	bhi.n	8003a76 <SEGGER_SYSVIEW_Start+0xce>
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	61fa      	str	r2, [r7, #28]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	e00b      	b.n	8003ac6 <SEGGER_SYSVIEW_Start+0x11e>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	1c59      	adds	r1, r3, #1
 8003ab6:	6179      	str	r1, [r7, #20]
 8003ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	09db      	lsrs	r3, r3, #7
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aca:	d8f0      	bhi.n	8003aae <SEGGER_SYSVIEW_Start+0x106>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	617a      	str	r2, [r7, #20]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003adc:	2218      	movs	r2, #24
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff fc6b 	bl	80033bc <_SendPacket>
      RECORD_END();
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <SEGGER_SYSVIEW_Start+0x168>)
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003afa:	f000 f9eb 	bl	8003ed4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003afe:	f000 f9b1 	bl	8003e64 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003b02:	f000 fc81 	bl	8004408 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003b06:	bf00      	nop
 8003b08:	3730      	adds	r7, #48	; 0x30
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20015a70 	.word	0x20015a70
 8003b14:	080053a4 	.word	0x080053a4
 8003b18:	20015aa0 	.word	0x20015aa0

08003b1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003b22:	f3ef 8311 	mrs	r3, BASEPRI
 8003b26:	f04f 0120 	mov.w	r1, #32
 8003b2a:	f381 8811 	msr	BASEPRI, r1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	480b      	ldr	r0, [pc, #44]	; (8003b60 <SEGGER_SYSVIEW_Stop+0x44>)
 8003b32:	f7ff fb58 	bl	80031e6 <_PreparePacket>
 8003b36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <SEGGER_SYSVIEW_Stop+0x48>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d007      	beq.n	8003b50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003b40:	220b      	movs	r2, #11
 8003b42:	6839      	ldr	r1, [r7, #0]
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	f7ff fc39 	bl	80033bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <SEGGER_SYSVIEW_Stop+0x48>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f383 8811 	msr	BASEPRI, r3
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20015aa0 	.word	0x20015aa0
 8003b64:	20015a70 	.word	0x20015a70

08003b68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	; 0x30
 8003b6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b72:	f04f 0120 	mov.w	r1, #32
 8003b76:	f381 8811 	msr	BASEPRI, r1
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	4845      	ldr	r0, [pc, #276]	; (8003c94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003b7e:	f7ff fb32 	bl	80031e6 <_PreparePacket>
 8003b82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b92:	e00b      	b.n	8003bac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2b7f      	cmp	r3, #127	; 0x7f
 8003bb0:	d8f0      	bhi.n	8003b94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	4b34      	ldr	r3, [pc, #208]	; (8003c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	e00b      	b.n	8003be6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8003bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	09db      	lsrs	r3, r3, #7
 8003be4:	623b      	str	r3, [r7, #32]
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bea:	d8f0      	bhi.n	8003bce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8003bf2:	6a3a      	ldr	r2, [r7, #32]
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e00b      	b.n	8003c20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	61f9      	str	r1, [r7, #28]
 8003c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	09db      	lsrs	r3, r3, #7
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	2b7f      	cmp	r3, #127	; 0x7f
 8003c24:	d8f0      	bhi.n	8003c08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	61fa      	str	r2, [r7, #28]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e00b      	b.n	8003c58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	6179      	str	r1, [r7, #20]
 8003c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	09db      	lsrs	r3, r3, #7
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c5c:	d8f0      	bhi.n	8003c40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	617a      	str	r2, [r7, #20]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c6e:	2218      	movs	r2, #24
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68b8      	ldr	r0, [r7, #8]
 8003c74:	f7ff fba2 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	4798      	blx	r3
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3730      	adds	r7, #48	; 0x30
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20015aa0 	.word	0x20015aa0
 8003c98:	20015a70 	.word	0x20015a70

08003c9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b092      	sub	sp, #72	; 0x48
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ca8:	f04f 0120 	mov.w	r1, #32
 8003cac:	f381 8811 	msr	BASEPRI, r1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	486a      	ldr	r0, [pc, #424]	; (8003e5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003cb4:	f7ff fa97 	bl	80031e6 <_PreparePacket>
 8003cb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cce:	e00b      	b.n	8003ce8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	6479      	str	r1, [r7, #68]	; 0x44
 8003cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce4:	09db      	lsrs	r3, r3, #7
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cea:	2b7f      	cmp	r3, #127	; 0x7f
 8003cec:	d8f0      	bhi.n	8003cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	647a      	str	r2, [r7, #68]	; 0x44
 8003cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d08:	e00b      	b.n	8003d22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	1c59      	adds	r1, r3, #1
 8003d12:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003d14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	09db      	lsrs	r3, r3, #7
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	2b7f      	cmp	r3, #127	; 0x7f
 8003d26:	d8f0      	bhi.n	8003d0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	4619      	mov	r1, r3
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff fa03 	bl	800314c <_EncodeStr>
 8003d46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003d48:	2209      	movs	r2, #9
 8003d4a:	68f9      	ldr	r1, [r7, #12]
 8003d4c:	6938      	ldr	r0, [r7, #16]
 8003d4e:	f7ff fb35 	bl	80033bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	633b      	str	r3, [r7, #48]	; 0x30
 8003d66:	e00b      	b.n	8003d80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	6379      	str	r1, [r7, #52]	; 0x34
 8003d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d82:	2b7f      	cmp	r3, #127	; 0x7f
 8003d84:	d8f0      	bhi.n	8003d68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da0:	e00b      	b.n	8003dba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	09db      	lsrs	r3, r3, #7
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8003dbe:	d8f0      	bhi.n	8003da2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	623b      	str	r3, [r7, #32]
 8003dda:	e00b      	b.n	8003df4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	6279      	str	r1, [r7, #36]	; 0x24
 8003de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	623b      	str	r3, [r7, #32]
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b7f      	cmp	r3, #127	; 0x7f
 8003df8:	d8f0      	bhi.n	8003ddc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	627a      	str	r2, [r7, #36]	; 0x24
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	e00b      	b.n	8003e2c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	61f9      	str	r1, [r7, #28]
 8003e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	09db      	lsrs	r3, r3, #7
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e30:	d8f0      	bhi.n	8003e14 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	61fa      	str	r2, [r7, #28]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003e42:	2215      	movs	r2, #21
 8003e44:	68f9      	ldr	r1, [r7, #12]
 8003e46:	6938      	ldr	r0, [r7, #16]
 8003e48:	f7ff fab8 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f383 8811 	msr	BASEPRI, r3
}
 8003e52:	bf00      	nop
 8003e54:	3748      	adds	r7, #72	; 0x48
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20015aa0 	.word	0x20015aa0
 8003e60:	20015a70 	.word	0x20015a70

08003e64 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003e7a:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4798      	blx	r3
  }
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20015a70 	.word	0x20015a70

08003e8c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e94:	f3ef 8311 	mrs	r3, BASEPRI
 8003e98:	f04f 0120 	mov.w	r1, #32
 8003e9c:	f381 8811 	msr	BASEPRI, r1
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003ea4:	f7ff f99f 	bl	80031e6 <_PreparePacket>
 8003ea8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	6938      	ldr	r0, [r7, #16]
 8003eb0:	f7ff f94c 	bl	800314c <_EncodeStr>
 8003eb4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003eb6:	220e      	movs	r2, #14
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	6938      	ldr	r0, [r7, #16]
 8003ebc:	f7ff fa7e 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f383 8811 	msr	BASEPRI, r3
}
 8003ec6:	bf00      	nop
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20015aa0 	.word	0x20015aa0

08003ed4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003ee2:	4b12      	ldr	r3, [pc, #72]	; (8003f2c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d014      	beq.n	8003f16 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4798      	blx	r3
 8003ef4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003ef8:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003efa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	f04f 0400 	mov.w	r4, #0
 8003f06:	0013      	movs	r3, r2
 8003f08:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	200d      	movs	r0, #13
 8003f10:	f7ff fbe8 	bl	80036e4 <SEGGER_SYSVIEW_RecordU32x2>
 8003f14:	e005      	b.n	8003f22 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	200c      	movs	r0, #12
 8003f1e:	f7ff fba5 	bl	800366c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20015a70 	.word	0x20015a70
 8003f30:	e0001004 	.word	0xe0001004

08003f34 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3e:	f04f 0120 	mov.w	r1, #32
 8003f42:	f381 8811 	msr	BASEPRI, r1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	4819      	ldr	r0, [pc, #100]	; (8003fb0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003f4a:	f7ff f94c 	bl	80031e6 <_PreparePacket>
 8003f4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003f54:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f5c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e00b      	b.n	8003f80 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	6179      	str	r1, [r7, #20]
 8003f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	09db      	lsrs	r3, r3, #7
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b7f      	cmp	r3, #127	; 0x7f
 8003f84:	d8f0      	bhi.n	8003f68 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	617a      	str	r2, [r7, #20]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003f96:	2202      	movs	r2, #2
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	68b8      	ldr	r0, [r7, #8]
 8003f9c:	f7ff fa0e 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f383 8811 	msr	BASEPRI, r3
}
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20015aa0 	.word	0x20015aa0
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8003fc2:	f04f 0120 	mov.w	r1, #32
 8003fc6:	f381 8811 	msr	BASEPRI, r1
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	4807      	ldr	r0, [pc, #28]	; (8003fec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003fce:	f7ff f90a 	bl	80031e6 <_PreparePacket>
 8003fd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	6838      	ldr	r0, [r7, #0]
 8003fda:	f7ff f9ef 	bl	80033bc <_SendPacket>
  RECORD_END();
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f383 8811 	msr	BASEPRI, r3
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20015aa0 	.word	0x20015aa0

08003ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8003ffa:	f04f 0120 	mov.w	r1, #32
 8003ffe:	f381 8811 	msr	BASEPRI, r1
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	4807      	ldr	r0, [pc, #28]	; (8004024 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004006:	f7ff f8ee 	bl	80031e6 <_PreparePacket>
 800400a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800400c:	2212      	movs	r2, #18
 800400e:	6839      	ldr	r1, [r7, #0]
 8004010:	6838      	ldr	r0, [r7, #0]
 8004012:	f7ff f9d3 	bl	80033bc <_SendPacket>
  RECORD_END();
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f383 8811 	msr	BASEPRI, r3
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20015aa0 	.word	0x20015aa0

08004028 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800402e:	f3ef 8311 	mrs	r3, BASEPRI
 8004032:	f04f 0120 	mov.w	r1, #32
 8004036:	f381 8811 	msr	BASEPRI, r1
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	4807      	ldr	r0, [pc, #28]	; (800405c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800403e:	f7ff f8d2 	bl	80031e6 <_PreparePacket>
 8004042:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004044:	2211      	movs	r2, #17
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	6838      	ldr	r0, [r7, #0]
 800404a:	f7ff f9b7 	bl	80033bc <_SendPacket>
  RECORD_END();
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f383 8811 	msr	BASEPRI, r3
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20015aa0 	.word	0x20015aa0

08004060 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004068:	f3ef 8311 	mrs	r3, BASEPRI
 800406c:	f04f 0120 	mov.w	r1, #32
 8004070:	f381 8811 	msr	BASEPRI, r1
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	4819      	ldr	r0, [pc, #100]	; (80040dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004078:	f7ff f8b5 	bl	80031e6 <_PreparePacket>
 800407c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e00b      	b.n	80040ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1c59      	adds	r1, r3, #1
 800409e:	61f9      	str	r1, [r7, #28]
 80040a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	09db      	lsrs	r3, r3, #7
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	2b7f      	cmp	r3, #127	; 0x7f
 80040b2:	d8f0      	bhi.n	8004096 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	61fa      	str	r2, [r7, #28]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80040c4:	2208      	movs	r2, #8
 80040c6:	68f9      	ldr	r1, [r7, #12]
 80040c8:	6938      	ldr	r0, [r7, #16]
 80040ca:	f7ff f977 	bl	80033bc <_SendPacket>
  RECORD_END();
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f383 8811 	msr	BASEPRI, r3
}
 80040d4:	bf00      	nop
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20015aa0 	.word	0x20015aa0
 80040e0:	20015a70 	.word	0x20015a70

080040e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040ec:	f3ef 8311 	mrs	r3, BASEPRI
 80040f0:	f04f 0120 	mov.w	r1, #32
 80040f4:	f381 8811 	msr	BASEPRI, r1
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	4819      	ldr	r0, [pc, #100]	; (8004160 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80040fc:	f7ff f873 	bl	80031e6 <_PreparePacket>
 8004100:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e00b      	b.n	8004132 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	61f9      	str	r1, [r7, #28]
 8004124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	09db      	lsrs	r3, r3, #7
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b7f      	cmp	r3, #127	; 0x7f
 8004136:	d8f0      	bhi.n	800411a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	61fa      	str	r2, [r7, #28]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004148:	2204      	movs	r2, #4
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	6938      	ldr	r0, [r7, #16]
 800414e:	f7ff f935 	bl	80033bc <_SendPacket>
  RECORD_END();
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f383 8811 	msr	BASEPRI, r3
}
 8004158:	bf00      	nop
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20015aa0 	.word	0x20015aa0
 8004164:	20015a70 	.word	0x20015a70

08004168 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004170:	f3ef 8311 	mrs	r3, BASEPRI
 8004174:	f04f 0120 	mov.w	r1, #32
 8004178:	f381 8811 	msr	BASEPRI, r1
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	4819      	ldr	r0, [pc, #100]	; (80041e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004180:	f7ff f831 	bl	80031e6 <_PreparePacket>
 8004184:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800418a:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	61bb      	str	r3, [r7, #24]
 800419c:	e00b      	b.n	80041b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	1c59      	adds	r1, r3, #1
 80041a6:	61f9      	str	r1, [r7, #28]
 80041a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	09db      	lsrs	r3, r3, #7
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b7f      	cmp	r3, #127	; 0x7f
 80041ba:	d8f0      	bhi.n	800419e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	61fa      	str	r2, [r7, #28]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80041cc:	2206      	movs	r2, #6
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	6938      	ldr	r0, [r7, #16]
 80041d2:	f7ff f8f3 	bl	80033bc <_SendPacket>
  RECORD_END();
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f383 8811 	msr	BASEPRI, r3
}
 80041dc:	bf00      	nop
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20015aa0 	.word	0x20015aa0
 80041e8:	20015a70 	.word	0x20015a70

080041ec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80041f6:	f3ef 8311 	mrs	r3, BASEPRI
 80041fa:	f04f 0120 	mov.w	r1, #32
 80041fe:	f381 8811 	msr	BASEPRI, r1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	4827      	ldr	r0, [pc, #156]	; (80042a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004206:	f7fe ffee 	bl	80031e6 <_PreparePacket>
 800420a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004210:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	623b      	str	r3, [r7, #32]
 8004222:	e00b      	b.n	800423c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	6279      	str	r1, [r7, #36]	; 0x24
 800422e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	09db      	lsrs	r3, r3, #7
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	2b7f      	cmp	r3, #127	; 0x7f
 8004240:	d8f0      	bhi.n	8004224 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	627a      	str	r2, [r7, #36]	; 0x24
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	e00b      	b.n	8004274 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	1c59      	adds	r1, r3, #1
 8004264:	61f9      	str	r1, [r7, #28]
 8004266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	09db      	lsrs	r3, r3, #7
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b7f      	cmp	r3, #127	; 0x7f
 8004278:	d8f0      	bhi.n	800425c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800428a:	2207      	movs	r2, #7
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	6938      	ldr	r0, [r7, #16]
 8004290:	f7ff f894 	bl	80033bc <_SendPacket>
  RECORD_END();
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f383 8811 	msr	BASEPRI, r3
}
 800429a:	bf00      	nop
 800429c:	3728      	adds	r7, #40	; 0x28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20015aa0 	.word	0x20015aa0
 80042a8:	20015a70 	.word	0x20015a70

080042ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	1ad3      	subs	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20015a70 	.word	0x20015a70

080042cc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08c      	sub	sp, #48	; 0x30
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06d      	beq.n	80043ba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e8:	e008      	b.n	80042fc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	3301      	adds	r3, #1
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004300:	429a      	cmp	r2, r3
 8004302:	d3f2      	bcc.n	80042ea <SEGGER_SYSVIEW_SendModule+0x1e>
 8004304:	e000      	b.n	8004308 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004306:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d055      	beq.n	80043ba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800430e:	f3ef 8311 	mrs	r3, BASEPRI
 8004312:	f04f 0120 	mov.w	r1, #32
 8004316:	f381 8811 	msr	BASEPRI, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	482a      	ldr	r0, [pc, #168]	; (80043c8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800431e:	f7fe ff62 	bl	80031e6 <_PreparePacket>
 8004322:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	e00b      	b.n	800434a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	6279      	str	r1, [r7, #36]	; 0x24
 800433c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	09db      	lsrs	r3, r3, #7
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	2b7f      	cmp	r3, #127	; 0x7f
 800434e:	d8f0      	bhi.n	8004332 <SEGGER_SYSVIEW_SendModule+0x66>
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	1c5a      	adds	r2, r3, #1
 8004354:	627a      	str	r2, [r7, #36]	; 0x24
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e00b      	b.n	8004384 <SEGGER_SYSVIEW_SendModule+0xb8>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	1c59      	adds	r1, r3, #1
 8004374:	61f9      	str	r1, [r7, #28]
 8004376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	09db      	lsrs	r3, r3, #7
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	2b7f      	cmp	r3, #127	; 0x7f
 8004388:	d8f0      	bhi.n	800436c <SEGGER_SYSVIEW_SendModule+0xa0>
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	61fa      	str	r2, [r7, #28]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2280      	movs	r2, #128	; 0x80
 80043a0:	4619      	mov	r1, r3
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7fe fed2 	bl	800314c <_EncodeStr>
 80043a8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80043aa:	2216      	movs	r2, #22
 80043ac:	68f9      	ldr	r1, [r7, #12]
 80043ae:	6938      	ldr	r0, [r7, #16]
 80043b0:	f7ff f804 	bl	80033bc <_SendPacket>
      RECORD_END();
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80043ba:	bf00      	nop
 80043bc:	3730      	adds	r7, #48	; 0x30
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20015a98 	.word	0x20015a98
 80043c8:	20015aa0 	.word	0x20015aa0

080043cc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00f      	beq.n	80043fa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80043da:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20015a98 	.word	0x20015a98

08004408 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800440e:	f3ef 8311 	mrs	r3, BASEPRI
 8004412:	f04f 0120 	mov.w	r1, #32
 8004416:	f381 8811 	msr	BASEPRI, r1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	4817      	ldr	r0, [pc, #92]	; (800447c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800441e:	f7fe fee2 	bl	80031e6 <_PreparePacket>
 8004422:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	e00b      	b.n	800444c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	6179      	str	r1, [r7, #20]
 800443e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	09db      	lsrs	r3, r3, #7
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b7f      	cmp	r3, #127	; 0x7f
 8004450:	d8f0      	bhi.n	8004434 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	617a      	str	r2, [r7, #20]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004462:	221b      	movs	r2, #27
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f7fe ffa8 	bl	80033bc <_SendPacket>
  RECORD_END();
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f383 8811 	msr	BASEPRI, r3
}
 8004472:	bf00      	nop
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20015aa0 	.word	0x20015aa0
 8004480:	20015a9c 	.word	0x20015a9c

08004484 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800448c:	f3ef 8311 	mrs	r3, BASEPRI
 8004490:	f04f 0120 	mov.w	r1, #32
 8004494:	f381 8811 	msr	BASEPRI, r1
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	4827      	ldr	r0, [pc, #156]	; (8004538 <SEGGER_SYSVIEW_Warn+0xb4>)
 800449c:	f7fe fea3 	bl	80031e6 <_PreparePacket>
 80044a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	6938      	ldr	r0, [r7, #16]
 80044a8:	f7fe fe50 	bl	800314c <_EncodeStr>
 80044ac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	2301      	movs	r3, #1
 80044b4:	623b      	str	r3, [r7, #32]
 80044b6:	e00b      	b.n	80044d0 <SEGGER_SYSVIEW_Warn+0x4c>
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	1c59      	adds	r1, r3, #1
 80044c0:	6279      	str	r1, [r7, #36]	; 0x24
 80044c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	09db      	lsrs	r3, r3, #7
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b7f      	cmp	r3, #127	; 0x7f
 80044d4:	d8f0      	bhi.n	80044b8 <SEGGER_SYSVIEW_Warn+0x34>
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	627a      	str	r2, [r7, #36]	; 0x24
 80044dc:	6a3a      	ldr	r2, [r7, #32]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e00b      	b.n	8004508 <SEGGER_SYSVIEW_Warn+0x84>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	1c59      	adds	r1, r3, #1
 80044f8:	61f9      	str	r1, [r7, #28]
 80044fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	09db      	lsrs	r3, r3, #7
 8004506:	61bb      	str	r3, [r7, #24]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b7f      	cmp	r3, #127	; 0x7f
 800450c:	d8f0      	bhi.n	80044f0 <SEGGER_SYSVIEW_Warn+0x6c>
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	61fa      	str	r2, [r7, #28]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800451e:	221a      	movs	r2, #26
 8004520:	68f9      	ldr	r1, [r7, #12]
 8004522:	6938      	ldr	r0, [r7, #16]
 8004524:	f7fe ff4a 	bl	80033bc <_SendPacket>
  RECORD_END();
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f383 8811 	msr	BASEPRI, r3
}
 800452e:	bf00      	nop
 8004530:	3728      	adds	r7, #40	; 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20015aa0 	.word	0x20015aa0

0800453c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e076      	b.n	8004646 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004558:	2201      	movs	r2, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	429a      	cmp	r2, r3
 8004572:	d165      	bne.n	8004640 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2103      	movs	r1, #3
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	401a      	ands	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	791b      	ldrb	r3, [r3, #4]
 8004592:	4619      	mov	r1, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	791b      	ldrb	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d003      	beq.n	80045b2 <GPIO_Init+0x76>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	791b      	ldrb	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d12e      	bne.n	8004610 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	2103      	movs	r1, #3
 80045bc:	fa01 f303 	lsl.w	r3, r1, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	401a      	ands	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	795b      	ldrb	r3, [r3, #5]
 80045d0:	4619      	mov	r1, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	408b      	lsls	r3, r1
 80045ee:	43db      	mvns	r3, r3
 80045f0:	401a      	ands	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	7992      	ldrb	r2, [r2, #6]
 80045fe:	4611      	mov	r1, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	b292      	uxth	r2, r2
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	b292      	uxth	r2, r2
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	b29b      	uxth	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	2103      	movs	r1, #3
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	401a      	ands	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	79db      	ldrb	r3, [r3, #7]
 8004630:	4619      	mov	r1, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3301      	adds	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b0f      	cmp	r3, #15
 800464a:	d985      	bls.n	8004558 <GPIO_Init+0x1c>
    }
  }
}
 800464c:	bf00      	nop
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	405a      	eors	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	615a      	str	r2, [r3, #20]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8004690:	2300      	movs	r3, #0
 8004692:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8004694:	787a      	ldrb	r2, [r7, #1]
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	08db      	lsrs	r3, r3, #3
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3208      	adds	r2, #8
 80046b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	210f      	movs	r1, #15
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	8879      	ldrh	r1, [r7, #2]
 80046c6:	08c9      	lsrs	r1, r1, #3
 80046c8:	b289      	uxth	r1, r1
 80046ca:	4608      	mov	r0, r1
 80046cc:	ea02 0103 	and.w	r1, r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f100 0208 	add.w	r2, r0, #8
 80046d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80046da:	887b      	ldrh	r3, [r7, #2]
 80046dc:	08db      	lsrs	r3, r3, #3
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3208      	adds	r2, #8
 80046e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	08db      	lsrs	r3, r3, #3
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3208      	adds	r2, #8
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004714:	4b16      	ldr	r3, [pc, #88]	; (8004770 <RCC_DeInit+0x60>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a15      	ldr	r2, [pc, #84]	; (8004770 <RCC_DeInit+0x60>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <RCC_DeInit+0x60>)
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <RCC_DeInit+0x60>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <RCC_DeInit+0x60>)
 800472c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004730:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004734:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <RCC_DeInit+0x60>)
 8004738:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <RCC_DeInit+0x64>)
 800473a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <RCC_DeInit+0x60>)
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <RCC_DeInit+0x68>)
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8004744:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <RCC_DeInit+0x60>)
 8004746:	4a0d      	ldr	r2, [pc, #52]	; (800477c <RCC_DeInit+0x6c>)
 8004748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <RCC_DeInit+0x60>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a07      	ldr	r2, [pc, #28]	; (8004770 <RCC_DeInit+0x60>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <RCC_DeInit+0x60>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800475e:	4b04      	ldr	r3, [pc, #16]	; (8004770 <RCC_DeInit+0x60>)
 8004760:	2200      	movs	r2, #0
 8004762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40023800 	.word	0x40023800
 8004774:	24003010 	.word	0x24003010
 8004778:	20003000 	.word	0x20003000
 800477c:	24003000 	.word	0x24003000

08004780 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <RCC_SYSCLKConfig+0x34>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0303 	bic.w	r3, r3, #3
 8004798:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <RCC_SYSCLKConfig+0x34>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6093      	str	r3, [r2, #8]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40023800 	.word	0x40023800

080047b8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
 80047cc:	2302      	movs	r3, #2
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	2302      	movs	r3, #2
 80047d6:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80047d8:	4b47      	ldr	r3, [pc, #284]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d007      	beq.n	80047f8 <RCC_GetClocksFreq+0x40>
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d009      	beq.n	8004800 <RCC_GetClocksFreq+0x48>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d13d      	bne.n	800486c <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a42      	ldr	r2, [pc, #264]	; (80048fc <RCC_GetClocksFreq+0x144>)
 80047f4:	601a      	str	r2, [r3, #0]
    break;
 80047f6:	e03d      	b.n	8004874 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a41      	ldr	r2, [pc, #260]	; (8004900 <RCC_GetClocksFreq+0x148>)
 80047fc:	601a      	str	r2, [r3, #0]
    break;
 80047fe:	e039      	b.n	8004874 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004800:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0d9b      	lsrs	r3, r3, #22
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800480c:	4b3a      	ldr	r3, [pc, #232]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00c      	beq.n	8004836 <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800481c:	4a38      	ldr	r2, [pc, #224]	; (8004900 <RCC_GetClocksFreq+0x148>)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a34      	ldr	r2, [pc, #208]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 8004826:	6852      	ldr	r2, [r2, #4]
 8004828:	0992      	lsrs	r2, r2, #6
 800482a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	e00b      	b.n	800484e <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004836:	4a31      	ldr	r2, [pc, #196]	; (80048fc <RCC_GetClocksFreq+0x144>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 8004840:	6852      	ldr	r2, [r2, #4]
 8004842:	0992      	lsrs	r2, r2, #6
 8004844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800484e:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	3301      	adds	r3, #1
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	fbb2 f2f3 	udiv	r2, r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	601a      	str	r2, [r3, #0]
    break;
 800486a:	e003      	b.n	8004874 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a23      	ldr	r2, [pc, #140]	; (80048fc <RCC_GetClocksFreq+0x144>)
 8004870:	601a      	str	r2, [r3, #0]
    break;
 8004872:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8004874:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8004884:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <RCC_GetClocksFreq+0x14c>)
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	4413      	add	r3, r2
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	40da      	lsrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80048a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	0a9b      	lsrs	r3, r3, #10
 80048aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <RCC_GetClocksFreq+0x14c>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	4413      	add	r3, r2
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	40da      	lsrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80048c4:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <RCC_GetClocksFreq+0x140>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80048cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	0b5b      	lsrs	r3, r3, #13
 80048d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80048d4:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <RCC_GetClocksFreq+0x14c>)
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4413      	add	r3, r2
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	40da      	lsrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]
}
 80048ec:	bf00      	nop
 80048ee:	3724      	adds	r7, #36	; 0x24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	40023800 	.word	0x40023800
 80048fc:	00f42400 	.word	0x00f42400
 8004900:	017d7840 	.word	0x017d7840
 8004904:	20000008 	.word	0x20000008

08004908 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <RCC_AHB1PeriphClockCmd+0x3c>)
 800491c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491e:	4909      	ldr	r1, [pc, #36]	; (8004944 <RCC_AHB1PeriphClockCmd+0x3c>)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4313      	orrs	r3, r2
 8004924:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8004926:	e006      	b.n	8004936 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8004928:	4b06      	ldr	r3, [pc, #24]	; (8004944 <RCC_AHB1PeriphClockCmd+0x3c>)
 800492a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	43db      	mvns	r3, r3
 8004930:	4904      	ldr	r1, [pc, #16]	; (8004944 <RCC_AHB1PeriphClockCmd+0x3c>)
 8004932:	4013      	ands	r3, r2
 8004934:	630b      	str	r3, [r1, #48]	; 0x30
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800

08004948 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <RCC_APB1PeriphClockCmd+0x3c>)
 800495c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495e:	4909      	ldr	r1, [pc, #36]	; (8004984 <RCC_APB1PeriphClockCmd+0x3c>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4313      	orrs	r3, r2
 8004964:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8004966:	e006      	b.n	8004976 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <RCC_APB1PeriphClockCmd+0x3c>)
 800496a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	43db      	mvns	r3, r3
 8004970:	4904      	ldr	r1, [pc, #16]	; (8004984 <RCC_APB1PeriphClockCmd+0x3c>)
 8004972:	4013      	ands	r3, r2
 8004974:	640b      	str	r3, [r1, #64]	; 0x40
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40023800 	.word	0x40023800

08004988 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8a1b      	ldrh	r3, [r3, #16]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	88db      	ldrh	r3, [r3, #6]
 80049b6:	461a      	mov	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	4313      	orrs	r3, r2
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	899b      	ldrh	r3, [r3, #12]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049d4:	f023 030c 	bic.w	r3, r3, #12
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	889a      	ldrh	r2, [r3, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	891b      	ldrh	r3, [r3, #8]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80049ea:	4313      	orrs	r3, r2
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	4313      	orrs	r3, r2
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8a9b      	ldrh	r3, [r3, #20]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	899b      	ldrh	r3, [r3, #12]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	4313      	orrs	r3, r2
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fec6 	bl	80047b8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a30      	ldr	r2, [pc, #192]	; (8004af0 <USART_Init+0x168>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <USART_Init+0xb4>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a2f      	ldr	r2, [pc, #188]	; (8004af4 <USART_Init+0x16c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d102      	bne.n	8004a42 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	e001      	b.n	8004a46 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	899b      	ldrh	r3, [r3, #12]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	da0c      	bge.n	8004a6c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009a      	lsls	r2, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	e00b      	b.n	8004a84 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8004a6c:	6a3a      	ldr	r2, [r7, #32]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	009a      	lsls	r2, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4a1c      	ldr	r2, [pc, #112]	; (8004af8 <USART_Init+0x170>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	2264      	movs	r2, #100	; 0x64
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	899b      	ldrh	r3, [r3, #12]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	b21b      	sxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da0c      	bge.n	8004ac8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	3332      	adds	r3, #50	; 0x32
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <USART_Init+0x170>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac6:	e00b      	b.n	8004ae0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	3332      	adds	r3, #50	; 0x32
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <USART_Init+0x170>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	4313      	orrs	r3, r2
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	811a      	strh	r2, [r3, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	3728      	adds	r7, #40	; 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40011000 	.word	0x40011000
 8004af4:	40011400 	.word	0x40011400
 8004af8:	51eb851f 	.word	0x51eb851f

08004afc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	899b      	ldrh	r3, [r3, #12]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8004b1e:	e007      	b.n	8004b30 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	899b      	ldrh	r3, [r3, #12]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	819a      	strh	r2, [r3, #12]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004b48:	887b      	ldrh	r3, [r7, #2]
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	809a      	strh	r2, [r3, #4]
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	887b      	ldrh	r3, [r7, #2]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	e001      	b.n	8004b8a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <main>:
void printmsg(char* msg);

uint8_t isUartfree = 1;

int main(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af02      	add	r7, sp, #8

	DWT->CTRL |= (1 << 0); //required by SEGGER to maintain timestamp information it enable to store cycle count information
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <main+0x88>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <main+0x88>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6013      	str	r3, [r2, #0]
	//By default the system clk is running at max speed which 168Mhz
	//this is done by setsysclk function
	//if it is not required then deinit the clk config and set it to desired value using functions provided in stm32f4xx_rcc.c
	RCC_DeInit();
 8004baa:	f7ff fdb1 	bl	8004710 <RCC_DeInit>
	//set HSE as default clk
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8004bae:	2001      	movs	r0, #1
 8004bb0:	f7ff fde6 	bl	8004780 <RCC_SYSCLKConfig>
	//call the systemcoreclk update function the SystemCoreClock variable to newly set clk frequency
	SystemCoreClockUpdate();
 8004bb4:	f000 f9d8 	bl	8004f68 <SystemCoreClockUpdate>

	//setup extra peripherals
	//init the LED GPIO
	Init_GPIO_LED();
 8004bb8:	f000 f8ec 	bl	8004d94 <Init_GPIO_LED>
	Init_UART();
 8004bbc:	f000 f91e 	bl	8004dfc <Init_UART>

	//start SEGGER recording
	SEGGER_SYSVIEW_Conf();
 8004bc0:	f7fd ffce 	bl	8002b60 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8004bc4:	f7fe fef0 	bl	80039a8 <SEGGER_SYSVIEW_Start>


	//create  task
	xTaskCreate(vTask1_Handler, "Led_1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &xTask1_Handle);
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <main+0x8c>)
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	2302      	movs	r3, #2
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2282      	movs	r2, #130	; 0x82
 8004bd4:	4914      	ldr	r1, [pc, #80]	; (8004c28 <main+0x90>)
 8004bd6:	4815      	ldr	r0, [pc, #84]	; (8004c2c <main+0x94>)
 8004bd8:	f7fc f972 	bl	8000ec0 <xTaskCreate>
	xTaskCreate(vTask2_Handler, "Led_2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &xTask2_Handle);
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <main+0x98>)
 8004bde:	9301      	str	r3, [sp, #4]
 8004be0:	2302      	movs	r3, #2
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2300      	movs	r3, #0
 8004be6:	2282      	movs	r2, #130	; 0x82
 8004be8:	4912      	ldr	r1, [pc, #72]	; (8004c34 <main+0x9c>)
 8004bea:	4813      	ldr	r0, [pc, #76]	; (8004c38 <main+0xa0>)
 8004bec:	f7fc f968 	bl	8000ec0 <xTaskCreate>
	xTaskCreate(vTask3_Handler, "Led_3", configMINIMAL_STACK_SIZE, NULL, TASK3_PRIORITY, &xTask3_Handle);
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <main+0xa4>)
 8004bf2:	9301      	str	r3, [sp, #4]
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2282      	movs	r2, #130	; 0x82
 8004bfc:	4910      	ldr	r1, [pc, #64]	; (8004c40 <main+0xa8>)
 8004bfe:	4811      	ldr	r0, [pc, #68]	; (8004c44 <main+0xac>)
 8004c00:	f7fc f95e 	bl	8000ec0 <xTaskCreate>
	xTaskCreate(vTask4_Handler, "Led_4", configMINIMAL_STACK_SIZE, NULL, TASK4_PRIORITY, &xTask4_Handle);
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <main+0xb0>)
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	2302      	movs	r3, #2
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2282      	movs	r2, #130	; 0x82
 8004c10:	490e      	ldr	r1, [pc, #56]	; (8004c4c <main+0xb4>)
 8004c12:	480f      	ldr	r0, [pc, #60]	; (8004c50 <main+0xb8>)
 8004c14:	f7fc f954 	bl	8000ec0 <xTaskCreate>

	//start the FreeRtos Task Scheduler
	vTaskStartScheduler();
 8004c18:	f7fc faec 	bl	80011f4 <vTaskStartScheduler>


	for(;;);
 8004c1c:	e7fe      	b.n	8004c1c <main+0x84>
 8004c1e:	bf00      	nop
 8004c20:	e0001000 	.word	0xe0001000
 8004c24:	20015b84 	.word	0x20015b84
 8004c28:	0800532c 	.word	0x0800532c
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	20015b88 	.word	0x20015b88
 8004c34:	08005334 	.word	0x08005334
 8004c38:	08004ca5 	.word	0x08004ca5
 8004c3c:	20015b8c 	.word	0x20015b8c
 8004c40:	0800533c 	.word	0x0800533c
 8004c44:	08004cf5 	.word	0x08004cf5
 8004c48:	20015b90 	.word	0x20015b90
 8004c4c:	08005344 	.word	0x08005344
 8004c50:	08004d45 	.word	0x08004d45

08004c54 <vTask1_Handler>:
}

void vTask1_Handler(void* params) //this will toggle pin 15 led
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 1){
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <vTask1_Handler+0x40>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d1fb      	bne.n	8004c5c <vTask1_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8004c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c68:	480b      	ldr	r0, [pc, #44]	; (8004c98 <vTask1_Handler+0x44>)
 8004c6a:	f7ff fcf5 	bl	8004658 <GPIO_ToggleBits>
			printmsg("Hello world led1\r\n");
 8004c6e:	480b      	ldr	r0, [pc, #44]	; (8004c9c <vTask1_Handler+0x48>)
 8004c70:	f000 f91c 	bl	8004eac <printmsg>
			vTaskDelay(50);
 8004c74:	2032      	movs	r0, #50	; 0x32
 8004c76:	f7fc fa85 	bl	8001184 <vTaskDelay>
			isUartfree = 2;
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <vTask1_Handler+0x40>)
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <vTask1_Handler+0x4c>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
		if(isUartfree == 1){
 8004c90:	e7e4      	b.n	8004c5c <vTask1_Handler+0x8>
 8004c92:	bf00      	nop
 8004c94:	20000018 	.word	0x20000018
 8004c98:	40020c00 	.word	0x40020c00
 8004c9c:	0800534c 	.word	0x0800534c
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <vTask2_Handler>:
	};
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself or can call the vtask1_handler
}
void vTask2_Handler(void* params) //this will toggle pin 14 led
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 2){
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <vTask2_Handler+0x40>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d1fb      	bne.n	8004cac <vTask2_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8004cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cb8:	480b      	ldr	r0, [pc, #44]	; (8004ce8 <vTask2_Handler+0x44>)
 8004cba:	f7ff fccd 	bl	8004658 <GPIO_ToggleBits>
			printmsg("Hello world led2\r\n");
 8004cbe:	480b      	ldr	r0, [pc, #44]	; (8004cec <vTask2_Handler+0x48>)
 8004cc0:	f000 f8f4 	bl	8004eac <printmsg>
			vTaskDelay(60);
 8004cc4:	203c      	movs	r0, #60	; 0x3c
 8004cc6:	f7fc fa5d 	bl	8001184 <vTaskDelay>
			isUartfree = 3;
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <vTask2_Handler+0x40>)
 8004ccc:	2203      	movs	r2, #3
 8004cce:	701a      	strb	r2, [r3, #0]
			taskYIELD(); //leave the mcpu and get in task ready state in the queue at last in same priority task lists
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <vTask2_Handler+0x4c>)
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
		if(isUartfree == 2){
 8004ce0:	e7e4      	b.n	8004cac <vTask2_Handler+0x8>
 8004ce2:	bf00      	nop
 8004ce4:	20000018 	.word	0x20000018
 8004ce8:	40020c00 	.word	0x40020c00
 8004cec:	08005360 	.word	0x08005360
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <vTask3_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(xTask2_Handle); //NULL means the task itself
}

void vTask3_Handler(void* params) //this will toggle pin 13 led
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 3){
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <vTask3_Handler+0x40>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d1fb      	bne.n	8004cfc <vTask3_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8004d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d08:	480b      	ldr	r0, [pc, #44]	; (8004d38 <vTask3_Handler+0x44>)
 8004d0a:	f7ff fca5 	bl	8004658 <GPIO_ToggleBits>
			printmsg("Hello world led3\r\n");
 8004d0e:	480b      	ldr	r0, [pc, #44]	; (8004d3c <vTask3_Handler+0x48>)
 8004d10:	f000 f8cc 	bl	8004eac <printmsg>
			vTaskDelay(70);
 8004d14:	2046      	movs	r0, #70	; 0x46
 8004d16:	f7fc fa35 	bl	8001184 <vTaskDelay>
			isUartfree = 4;
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <vTask3_Handler+0x40>)
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vTask3_Handler+0x4c>)
 8004d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	f3bf 8f6f 	isb	sy
		if(isUartfree == 3){
 8004d30:	e7e4      	b.n	8004cfc <vTask3_Handler+0x8>
 8004d32:	bf00      	nop
 8004d34:	20000018 	.word	0x20000018
 8004d38:	40020c00 	.word	0x40020c00
 8004d3c:	08005374 	.word	0x08005374
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <vTask4_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(xTask3_Handle); //NULL means the task itself
}

void vTask4_Handler(void* params) //this will toggle pin 13 led
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		if(isUartfree == 4){
 8004d4c:	4b0d      	ldr	r3, [pc, #52]	; (8004d84 <vTask4_Handler+0x40>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d1fb      	bne.n	8004d4c <vTask4_Handler+0x8>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 8004d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d58:	480b      	ldr	r0, [pc, #44]	; (8004d88 <vTask4_Handler+0x44>)
 8004d5a:	f7ff fc7d 	bl	8004658 <GPIO_ToggleBits>
			printmsg("Hello world led4\r\n");
 8004d5e:	480b      	ldr	r0, [pc, #44]	; (8004d8c <vTask4_Handler+0x48>)
 8004d60:	f000 f8a4 	bl	8004eac <printmsg>
			vTaskDelay(80);
 8004d64:	2050      	movs	r0, #80	; 0x50
 8004d66:	f7fc fa0d 	bl	8001184 <vTaskDelay>
			isUartfree = 1;
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <vTask4_Handler+0x40>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
			taskYIELD();
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <vTask4_Handler+0x4c>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
		if(isUartfree == 4){
 8004d80:	e7e4      	b.n	8004d4c <vTask4_Handler+0x8>
 8004d82:	bf00      	nop
 8004d84:	20000018 	.word	0x20000018
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	08005388 	.word	0x08005388
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <Init_GPIO_LED>:
	vTaskDelete(xTask4_Handle); //NULL means the task itself
}


void Init_GPIO_LED(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
		//Init GPIOD Peripheral
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	2008      	movs	r0, #8
 8004d9e:	f7ff fdb3 	bl	8004908 <RCC_AHB1PeriphClockCmd>
		GPIO_InitTypeDef gpio_led;
		gpio_led.GPIO_Mode = GPIO_Mode_OUT;
 8004da2:	2301      	movs	r3, #1
 8004da4:	713b      	strb	r3, [r7, #4]
		gpio_led.GPIO_OType = GPIO_OType_PP;
 8004da6:	2300      	movs	r3, #0
 8004da8:	71bb      	strb	r3, [r7, #6]
		gpio_led.GPIO_PuPd = GPIO_PuPd_UP;
 8004daa:	2301      	movs	r3, #1
 8004dac:	71fb      	strb	r3, [r7, #7]
		gpio_led.GPIO_Pin = GPIO_Pin_15; //blue led
 8004dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8004db4:	463b      	mov	r3, r7
 8004db6:	4619      	mov	r1, r3
 8004db8:	480f      	ldr	r0, [pc, #60]	; (8004df8 <Init_GPIO_LED+0x64>)
 8004dba:	f7ff fbbf 	bl	800453c <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_14; //red led
 8004dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dc2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	480b      	ldr	r0, [pc, #44]	; (8004df8 <Init_GPIO_LED+0x64>)
 8004dca:	f7ff fbb7 	bl	800453c <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_13; //orange led
 8004dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dd2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4807      	ldr	r0, [pc, #28]	; (8004df8 <Init_GPIO_LED+0x64>)
 8004dda:	f7ff fbaf 	bl	800453c <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_12; //green led
 8004dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004de2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8004de4:	463b      	mov	r3, r7
 8004de6:	4619      	mov	r1, r3
 8004de8:	4803      	ldr	r0, [pc, #12]	; (8004df8 <Init_GPIO_LED+0x64>)
 8004dea:	f7ff fba7 	bl	800453c <GPIO_Init>
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40020c00 	.word	0x40020c00

08004dfc <Init_UART>:

void Init_UART(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
	//Init uart 4 peripheral clk
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8004e02:	2101      	movs	r1, #1
 8004e04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e08:	f7ff fd9e 	bl	8004948 <RCC_APB1PeriphClockCmd>

	//pc10 tx :: pc11 rx
	//enable GPIOC peripheral port
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	2004      	movs	r0, #4
 8004e10:	f7ff fd7a 	bl	8004908 <RCC_AHB1PeriphClockCmd>
	//init the pins to alternate function mode
	GPIO_InitTypeDef gpio_uart4;
	memset(&gpio_uart4,0,sizeof(gpio_uart4));
 8004e14:	f107 0310 	add.w	r3, r7, #16
 8004e18:	2208      	movs	r2, #8
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fa03 	bl	8005228 <memset>
	gpio_uart4.GPIO_Pin = GPIO_Pin_10;
 8004e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e26:	613b      	str	r3, [r7, #16]
	gpio_uart4.GPIO_Mode = GPIO_Mode_AF;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	753b      	strb	r3, [r7, #20]
	gpio_uart4.GPIO_PuPd = GPIO_PuPd_UP;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOC, &gpio_uart4);
 8004e30:	f107 0310 	add.w	r3, r7, #16
 8004e34:	4619      	mov	r1, r3
 8004e36:	481b      	ldr	r0, [pc, #108]	; (8004ea4 <Init_UART+0xa8>)
 8004e38:	f7ff fb80 	bl	800453c <GPIO_Init>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 8004e3c:	2208      	movs	r2, #8
 8004e3e:	210a      	movs	r1, #10
 8004e40:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <Init_UART+0xa8>)
 8004e42:	f7ff fc1b 	bl	800467c <GPIO_PinAFConfig>

	gpio_uart4.GPIO_Pin = GPIO_Pin_11;
 8004e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e4a:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &gpio_uart4);
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	4619      	mov	r1, r3
 8004e52:	4814      	ldr	r0, [pc, #80]	; (8004ea4 <Init_UART+0xa8>)
 8004e54:	f7ff fb72 	bl	800453c <GPIO_Init>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 8004e58:	2208      	movs	r2, #8
 8004e5a:	210b      	movs	r1, #11
 8004e5c:	4811      	ldr	r0, [pc, #68]	; (8004ea4 <Init_UART+0xa8>)
 8004e5e:	f7ff fc0d 	bl	800467c <GPIO_PinAFConfig>

	//uart init
	USART_InitTypeDef uart4_init;
	memset(&uart4_init,0,sizeof(uart4_init));
 8004e62:	463b      	mov	r3, r7
 8004e64:	2210      	movs	r2, #16
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f9dd 	bl	8005228 <memset>
	uart4_init.USART_BaudRate = 115200;
 8004e6e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004e72:	603b      	str	r3, [r7, #0]
	uart4_init.USART_Mode = (USART_Mode_Rx | USART_Mode_Tx);
 8004e74:	230c      	movs	r3, #12
 8004e76:	817b      	strh	r3, [r7, #10]
	uart4_init.USART_Parity = USART_Parity_No;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	813b      	strh	r3, [r7, #8]
	uart4_init.USART_StopBits = USART_StopBits_1;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	80fb      	strh	r3, [r7, #6]
	uart4_init.USART_WordLength = USART_WordLength_8b;
 8004e80:	2300      	movs	r3, #0
 8004e82:	80bb      	strh	r3, [r7, #4]
	uart4_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004e84:	2300      	movs	r3, #0
 8004e86:	81bb      	strh	r3, [r7, #12]
	USART_Init(UART4, &uart4_init);
 8004e88:	463b      	mov	r3, r7
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4806      	ldr	r0, [pc, #24]	; (8004ea8 <Init_UART+0xac>)
 8004e8e:	f7ff fd7b 	bl	8004988 <USART_Init>

	//enable uart4 peripheral
	USART_Cmd(UART4, ENABLE);
 8004e92:	2101      	movs	r1, #1
 8004e94:	4804      	ldr	r0, [pc, #16]	; (8004ea8 <Init_UART+0xac>)
 8004e96:	f7ff fe31 	bl	8004afc <USART_Cmd>

}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40020800 	.word	0x40020800
 8004ea8:	40004c00 	.word	0x40004c00

08004eac <printmsg>:

void printmsg(char* msg)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<strlen(msg); i++){
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e013      	b.n	8004ee2 <printmsg+0x36>
		while(USART_GetFlagStatus(UART4, USART_FLAG_TXE) != SET); //wait until TXE is not 0
 8004eba:	bf00      	nop
 8004ebc:	2180      	movs	r1, #128	; 0x80
 8004ebe:	480e      	ldr	r0, [pc, #56]	; (8004ef8 <printmsg+0x4c>)
 8004ec0:	f7ff fe4e 	bl	8004b60 <USART_GetFlagStatus>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d1f8      	bne.n	8004ebc <printmsg+0x10>
		USART_SendData(UART4, msg[i]);
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4808      	ldr	r0, [pc, #32]	; (8004ef8 <printmsg+0x4c>)
 8004ed8:	f7ff fe30 	bl	8004b3c <USART_SendData>
	for(uint32_t i=0; i<strlen(msg); i++){
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fb f9de 	bl	80002a4 <strlen>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d3e4      	bcc.n	8004eba <printmsg+0xe>
	}
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40004c00 	.word	0x40004c00

08004efc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <SystemInit+0x60>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <SystemInit+0x60>)
 8004f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <SystemInit+0x64>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <SystemInit+0x64>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <SystemInit+0x64>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <SystemInit+0x64>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <SystemInit+0x64>)
 8004f28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <SystemInit+0x64>)
 8004f34:	4a0b      	ldr	r2, [pc, #44]	; (8004f64 <SystemInit+0x68>)
 8004f36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <SystemInit+0x64>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <SystemInit+0x64>)
 8004f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <SystemInit+0x64>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004f4a:	f000 f889 	bl	8005060 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f4e:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <SystemInit+0x60>)
 8004f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f54:	609a      	str	r2, [r3, #8]
#endif
}
 8004f56:	bf00      	nop
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed00 	.word	0xe000ed00
 8004f60:	40023800 	.word	0x40023800
 8004f64:	24003010 	.word	0x24003010

08004f68 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	2302      	movs	r3, #2
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	2302      	movs	r3, #2
 8004f80:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004f82:	4b32      	ldr	r3, [pc, #200]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d007      	beq.n	8004fa2 <SystemCoreClockUpdate+0x3a>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d009      	beq.n	8004faa <SystemCoreClockUpdate+0x42>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d13d      	bne.n	8005016 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004f9a:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <SystemCoreClockUpdate+0xe8>)
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	; (8005054 <SystemCoreClockUpdate+0xec>)
 8004f9e:	601a      	str	r2, [r3, #0]
      break;
 8004fa0:	e03d      	b.n	800501e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004fa2:	4b2b      	ldr	r3, [pc, #172]	; (8005050 <SystemCoreClockUpdate+0xe8>)
 8004fa4:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <SystemCoreClockUpdate+0xf0>)
 8004fa6:	601a      	str	r2, [r3, #0]
      break;
 8004fa8:	e039      	b.n	800501e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	0d9b      	lsrs	r3, r3, #22
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb6:	4b25      	ldr	r3, [pc, #148]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fbe:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <SystemCoreClockUpdate+0xf0>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	4a1f      	ldr	r2, [pc, #124]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8004fd0:	6852      	ldr	r2, [r2, #4]
 8004fd2:	0992      	lsrs	r2, r2, #6
 8004fd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e00b      	b.n	8004ff8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <SystemCoreClockUpdate+0xec>)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe8:	4a18      	ldr	r2, [pc, #96]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8004fea:	6852      	ldr	r2, [r2, #4]
 8004fec:	0992      	lsrs	r2, r2, #6
 8004fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff2:	fb02 f303 	mul.w	r3, r2, r3
 8004ff6:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	f003 0303 	and.w	r3, r3, #3
 8005002:	3301      	adds	r3, #1
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005010:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <SystemCoreClockUpdate+0xe8>)
 8005012:	6013      	str	r3, [r2, #0]
      break;
 8005014:	e003      	b.n	800501e <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8005016:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <SystemCoreClockUpdate+0xe8>)
 8005018:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <SystemCoreClockUpdate+0xec>)
 800501a:	601a      	str	r2, [r3, #0]
      break;
 800501c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <SystemCoreClockUpdate+0xe4>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	4a0c      	ldr	r2, [pc, #48]	; (800505c <SystemCoreClockUpdate+0xf4>)
 800502a:	5cd3      	ldrb	r3, [r2, r3]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <SystemCoreClockUpdate+0xe8>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	4a05      	ldr	r2, [pc, #20]	; (8005050 <SystemCoreClockUpdate+0xe8>)
 800503c:	6013      	str	r3, [r2, #0]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	2000001c 	.word	0x2000001c
 8005054:	00f42400 	.word	0x00f42400
 8005058:	017d7840 	.word	0x017d7840
 800505c:	20000020 	.word	0x20000020

08005060 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	2300      	movs	r3, #0
 800506c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <SetSysClock+0xe8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a35      	ldr	r2, [pc, #212]	; (8005148 <SetSysClock+0xe8>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800507a:	4b33      	ldr	r3, [pc, #204]	; (8005148 <SetSysClock+0xe8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3301      	adds	r3, #1
 8005088:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d103      	bne.n	8005098 <SetSysClock+0x38>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005096:	d1f0      	bne.n	800507a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005098:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <SetSysClock+0xe8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80050a4:	2301      	movs	r3, #1
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	e001      	b.n	80050ae <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80050aa:	2300      	movs	r3, #0
 80050ac:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d142      	bne.n	800513a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <SetSysClock+0xe8>)
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <SetSysClock+0xe8>)
 80050ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050be:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80050c0:	4b22      	ldr	r3, [pc, #136]	; (800514c <SetSysClock+0xec>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a21      	ldr	r2, [pc, #132]	; (800514c <SetSysClock+0xec>)
 80050c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ca:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80050cc:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <SetSysClock+0xe8>)
 80050ce:	4a1e      	ldr	r2, [pc, #120]	; (8005148 <SetSysClock+0xe8>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <SetSysClock+0xe8>)
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <SetSysClock+0xe8>)
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80050e0:	4b19      	ldr	r3, [pc, #100]	; (8005148 <SetSysClock+0xe8>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a18      	ldr	r2, [pc, #96]	; (8005148 <SetSysClock+0xe8>)
 80050e6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80050ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <SetSysClock+0xe8>)
 80050ee:	4a18      	ldr	r2, [pc, #96]	; (8005150 <SetSysClock+0xf0>)
 80050f0:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <SetSysClock+0xe8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a14      	ldr	r2, [pc, #80]	; (8005148 <SetSysClock+0xe8>)
 80050f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050fc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80050fe:	bf00      	nop
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <SetSysClock+0xe8>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f9      	beq.n	8005100 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800510c:	4b11      	ldr	r3, [pc, #68]	; (8005154 <SetSysClock+0xf4>)
 800510e:	f240 7205 	movw	r2, #1797	; 0x705
 8005112:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005114:	4b0c      	ldr	r3, [pc, #48]	; (8005148 <SetSysClock+0xe8>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4a0b      	ldr	r2, [pc, #44]	; (8005148 <SetSysClock+0xe8>)
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005120:	4b09      	ldr	r3, [pc, #36]	; (8005148 <SetSysClock+0xe8>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <SetSysClock+0xe8>)
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 800512c:	bf00      	nop
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <SetSysClock+0xe8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b08      	cmp	r3, #8
 8005138:	d1f9      	bne.n	800512e <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	40007000 	.word	0x40007000
 8005150:	07405419 	.word	0x07405419
 8005154:	40023c00 	.word	0x40023c00

08005158 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005158:	480d      	ldr	r0, [pc, #52]	; (8005190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800515a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800515c:	480d      	ldr	r0, [pc, #52]	; (8005194 <LoopForever+0x6>)
  ldr r1, =_edata
 800515e:	490e      	ldr	r1, [pc, #56]	; (8005198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005160:	4a0e      	ldr	r2, [pc, #56]	; (800519c <LoopForever+0xe>)
  movs r3, #0
 8005162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005164:	e002      	b.n	800516c <LoopCopyDataInit>

08005166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800516a:	3304      	adds	r3, #4

0800516c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800516c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800516e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005170:	d3f9      	bcc.n	8005166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005172:	4a0b      	ldr	r2, [pc, #44]	; (80051a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005174:	4c0b      	ldr	r4, [pc, #44]	; (80051a4 <LoopForever+0x16>)
  movs r3, #0
 8005176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005178:	e001      	b.n	800517e <LoopFillZerobss>

0800517a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800517a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800517c:	3204      	adds	r2, #4

0800517e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800517e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005180:	d3fb      	bcc.n	800517a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005182:	f7ff febb 	bl	8004efc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005186:	f000 f811 	bl	80051ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800518a:	f7ff fd05 	bl	8004b98 <main>

0800518e <LoopForever>:

LoopForever:
    b LoopForever
 800518e:	e7fe      	b.n	800518e <LoopForever>
  ldr   r0, =_estack
 8005190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005198:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800519c:	080053b8 	.word	0x080053b8
  ldr r2, =_sbss
 80051a0:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80051a4:	20015c7c 	.word	0x20015c7c

080051a8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80051a8:	e7fe      	b.n	80051a8 <ADC_IRQHandler>
	...

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4e0d      	ldr	r6, [pc, #52]	; (80051e4 <__libc_init_array+0x38>)
 80051b0:	4c0d      	ldr	r4, [pc, #52]	; (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1ba4      	subs	r4, r4, r6
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	2500      	movs	r5, #0
 80051b8:	42a5      	cmp	r5, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	4e0b      	ldr	r6, [pc, #44]	; (80051ec <__libc_init_array+0x40>)
 80051be:	4c0c      	ldr	r4, [pc, #48]	; (80051f0 <__libc_init_array+0x44>)
 80051c0:	f000 f83a 	bl	8005238 <_init>
 80051c4:	1ba4      	subs	r4, r4, r6
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	2500      	movs	r5, #0
 80051ca:	42a5      	cmp	r5, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051d4:	4798      	blx	r3
 80051d6:	3501      	adds	r5, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051de:	4798      	blx	r3
 80051e0:	3501      	adds	r5, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	080053b0 	.word	0x080053b0
 80051e8:	080053b0 	.word	0x080053b0
 80051ec:	080053b0 	.word	0x080053b0
 80051f0:	080053b4 	.word	0x080053b4

080051f4 <memcmp>:
 80051f4:	b530      	push	{r4, r5, lr}
 80051f6:	2400      	movs	r4, #0
 80051f8:	42a2      	cmp	r2, r4
 80051fa:	d101      	bne.n	8005200 <memcmp+0xc>
 80051fc:	2000      	movs	r0, #0
 80051fe:	e007      	b.n	8005210 <memcmp+0x1c>
 8005200:	5d03      	ldrb	r3, [r0, r4]
 8005202:	3401      	adds	r4, #1
 8005204:	190d      	adds	r5, r1, r4
 8005206:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800520a:	42ab      	cmp	r3, r5
 800520c:	d0f4      	beq.n	80051f8 <memcmp+0x4>
 800520e:	1b58      	subs	r0, r3, r5
 8005210:	bd30      	pop	{r4, r5, pc}

08005212 <memcpy>:
 8005212:	b510      	push	{r4, lr}
 8005214:	1e43      	subs	r3, r0, #1
 8005216:	440a      	add	r2, r1
 8005218:	4291      	cmp	r1, r2
 800521a:	d100      	bne.n	800521e <memcpy+0xc>
 800521c:	bd10      	pop	{r4, pc}
 800521e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005226:	e7f7      	b.n	8005218 <memcpy+0x6>

08005228 <memset>:
 8005228:	4402      	add	r2, r0
 800522a:	4603      	mov	r3, r0
 800522c:	4293      	cmp	r3, r2
 800522e:	d100      	bne.n	8005232 <memset+0xa>
 8005230:	4770      	bx	lr
 8005232:	f803 1b01 	strb.w	r1, [r3], #1
 8005236:	e7f9      	b.n	800522c <memset+0x4>

08005238 <_init>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr

08005244 <_fini>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr
