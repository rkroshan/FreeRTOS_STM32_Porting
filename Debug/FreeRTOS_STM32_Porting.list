
FreeRTOS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08006bbc  08006bbc  00016bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006da8  08006da8  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08006da8  08006da8  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006da8  08006da8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dac  08006dac  00016dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08006db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015c80  20000184  08006f34  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015e04  08006f34  00025e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ec1  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002661  00000000  00000000  00034075  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  000366d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f48  00000000  00000000  00037758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000040b7  00000000  00000000  000386a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ceff  00000000  00000000  0003c757  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000752ea  00000000  00000000  00049656  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a04  00000000  00000000  000be9bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000184 	.word	0x20000184
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006ba4 	.word	0x08006ba4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000188 	.word	0x20000188
 800020c:	08006ba4 	.word	0x08006ba4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20015d44 	.word	0x20015d44

080002a4 <strlen>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d1fb      	bne.n	80002a6 <strlen+0x2>
 80002ae:	1a18      	subs	r0, r3, r0
 80002b0:	3801      	subs	r0, #1
 80002b2:	4770      	bx	lr
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f103 0208 	add.w	r2, r3, #8
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000378:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f103 0208 	add.w	r2, r3, #8
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f103 0208 	add.w	r2, r3, #8
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003ba:	b480      	push	{r7}
 80003bc:	b085      	sub	sp, #20
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	689a      	ldr	r2, [r3, #8]
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	601a      	str	r2, [r3, #0]
}
 80003f6:	bf00      	nop
 80003f8:	3714      	adds	r7, #20
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000402:	b480      	push	{r7}
 8000404:	b085      	sub	sp, #20
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000418:	d103      	bne.n	8000422 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	e00c      	b.n	800043c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3308      	adds	r3, #8
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	e002      	b.n	8000430 <vListInsert+0x2e>
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	429a      	cmp	r2, r3
 800043a:	d2f6      	bcs.n	800042a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	685a      	ldr	r2, [r3, #4]
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	683a      	ldr	r2, [r7, #0]
 800044a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	68fa      	ldr	r2, [r7, #12]
 8000450:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	683a      	ldr	r2, [r7, #0]
 8000456:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	6892      	ldr	r2, [r2, #8]
 800048a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	6852      	ldr	r2, [r2, #4]
 8000494:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	d103      	bne.n	80004a8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689a      	ldr	r2, [r3, #8]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	1e5a      	subs	r2, r3, #1
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	681b      	ldr	r3, [r3, #0]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d109      	bne.n	80004f0 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80004dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004e0:	f383 8811 	msr	BASEPRI, r3
 80004e4:	f3bf 8f6f 	isb	sy
 80004e8:	f3bf 8f4f 	dsb	sy
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	e7fe      	b.n	80004ee <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 80004f0:	f002 fbb6 	bl	8002c60 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fc:	68f9      	ldr	r1, [r7, #12]
 80004fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000500:	fb01 f303 	mul.w	r3, r1, r3
 8000504:	441a      	add	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2200      	movs	r2, #0
 800050e:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000520:	3b01      	subs	r3, #1
 8000522:	68f9      	ldr	r1, [r7, #12]
 8000524:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	441a      	add	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	22ff      	movs	r2, #255	; 0xff
 8000534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	22ff      	movs	r2, #255	; 0xff
 800053c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d114      	bne.n	8000570 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d01a      	beq.n	8000584 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	3310      	adds	r3, #16
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f9ba 	bl	80018cc <xTaskRemoveFromEventList>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d012      	beq.n	8000584 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <xQueueGenericReset+0xcc>)
 8000560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	f3bf 8f4f 	dsb	sy
 800056a:	f3bf 8f6f 	isb	sy
 800056e:	e009      	b.n	8000584 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3310      	adds	r3, #16
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fef3 	bl	8000360 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3324      	adds	r3, #36	; 0x24
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff feee 	bl	8000360 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000584:	f002 fb9a 	bl	8002cbc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000588:	2301      	movs	r3, #1
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	e000ed04 	.word	0xe000ed04

08000598 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af02      	add	r7, sp, #8
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d109      	bne.n	80005c0 <xQueueGenericCreate+0x28>
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	61bb      	str	r3, [r7, #24]
 80005be:	e7fe      	b.n	80005be <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	fb02 f303 	mul.w	r3, r2, r3
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <xQueueGenericCreate+0x46>
 80005d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d101      	bne.n	80005e2 <xQueueGenericCreate+0x4a>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <xQueueGenericCreate+0x4c>
 80005e2:	2300      	movs	r3, #0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d109      	bne.n	80005fc <xQueueGenericCreate+0x64>
 80005e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ec:	f383 8811 	msr	BASEPRI, r3
 80005f0:	f3bf 8f6f 	isb	sy
 80005f4:	f3bf 8f4f 	dsb	sy
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	e7fe      	b.n	80005fa <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80005fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000602:	d909      	bls.n	8000618 <xQueueGenericCreate+0x80>
 8000604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000608:	f383 8811 	msr	BASEPRI, r3
 800060c:	f3bf 8f6f 	isb	sy
 8000610:	f3bf 8f4f 	dsb	sy
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	e7fe      	b.n	8000616 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061a:	3350      	adds	r3, #80	; 0x50
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fc41 	bl	8002ea4 <pvPortMalloc>
 8000622:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000624:	6a3b      	ldr	r3, [r7, #32]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00d      	beq.n	8000646 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3350      	adds	r3, #80	; 0x50
 8000632:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	6a3b      	ldr	r3, [r7, #32]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	4613      	mov	r3, r2
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	68b9      	ldr	r1, [r7, #8]
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	f000 f805 	bl	8000650 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000646:	6a3b      	ldr	r3, [r7, #32]
    }
 8000648:	4618      	mov	r0, r3
 800064a:	3728      	adds	r7, #40	; 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d103      	bne.n	800066c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	69ba      	ldr	r2, [r7, #24]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e002      	b.n	8000672 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800067e:	2101      	movs	r1, #1
 8000680:	69b8      	ldr	r0, [r7, #24]
 8000682:	f7ff ff21 	bl	80004c8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	78fa      	ldrb	r2, [r7, #3]
 800068a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	68ba      	ldr	r2, [r7, #8]
 8000692:	68f9      	ldr	r1, [r7, #12]
 8000694:	2073      	movs	r0, #115	; 0x73
 8000696:	f003 fce3 	bl	8004060 <SEGGER_SYSVIEW_RecordU32x3>
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b090      	sub	sp, #64	; 0x40
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80006b2:	2300      	movs	r3, #0
 80006b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d109      	bne.n	80006d4 <xQueueGenericSend+0x30>
 80006c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c4:	f383 8811 	msr	BASEPRI, r3
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d2:	e7fe      	b.n	80006d2 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <xQueueGenericSend+0x3e>
 80006da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <xQueueGenericSend+0x42>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <xQueueGenericSend+0x44>
 80006e6:	2300      	movs	r3, #0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d109      	bne.n	8000700 <xQueueGenericSend+0x5c>
 80006ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f0:	f383 8811 	msr	BASEPRI, r3
 80006f4:	f3bf 8f6f 	isb	sy
 80006f8:	f3bf 8f4f 	dsb	sy
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
 80006fe:	e7fe      	b.n	80006fe <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b02      	cmp	r3, #2
 8000704:	d103      	bne.n	800070e <xQueueGenericSend+0x6a>
 8000706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	2b01      	cmp	r3, #1
 800070c:	d101      	bne.n	8000712 <xQueueGenericSend+0x6e>
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <xQueueGenericSend+0x70>
 8000712:	2300      	movs	r3, #0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d109      	bne.n	800072c <xQueueGenericSend+0x88>
 8000718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800071c:	f383 8811 	msr	BASEPRI, r3
 8000720:	f3bf 8f6f 	isb	sy
 8000724:	f3bf 8f4f 	dsb	sy
 8000728:	623b      	str	r3, [r7, #32]
 800072a:	e7fe      	b.n	800072a <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800072c:	f001 fa6c 	bl	8001c08 <xTaskGetSchedulerState>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d102      	bne.n	800073c <xQueueGenericSend+0x98>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d101      	bne.n	8000740 <xQueueGenericSend+0x9c>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <xQueueGenericSend+0x9e>
 8000740:	2300      	movs	r3, #0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d109      	bne.n	800075a <xQueueGenericSend+0xb6>
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	61fb      	str	r3, [r7, #28]
 8000758:	e7fe      	b.n	8000758 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800075a:	f002 fa81 	bl	8002c60 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000766:	429a      	cmp	r2, r3
 8000768:	d302      	bcc.n	8000770 <xQueueGenericSend+0xcc>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d136      	bne.n	80007de <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8000770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000772:	4618      	mov	r0, r3
 8000774:	f004 faac 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000778:	68ba      	ldr	r2, [r7, #8]
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	460b      	mov	r3, r1
 8000782:	4601      	mov	r1, r0
 8000784:	205a      	movs	r0, #90	; 0x5a
 8000786:	f003 fce1 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000790:	f000 fa78 	bl	8000c84 <prvCopyDataToQueue>
 8000794:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079a:	2b00      	cmp	r3, #0
 800079c:	d010      	beq.n	80007c0 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007a0:	3324      	adds	r3, #36	; 0x24
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f892 	bl	80018cc <xTaskRemoveFromEventList>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d013      	beq.n	80007d6 <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80007ae:	4b4d      	ldr	r3, [pc, #308]	; (80008e4 <xQueueGenericSend+0x240>)
 80007b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	f3bf 8f4f 	dsb	sy
 80007ba:	f3bf 8f6f 	isb	sy
 80007be:	e00a      	b.n	80007d6 <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80007c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d007      	beq.n	80007d6 <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80007c6:	4b47      	ldr	r3, [pc, #284]	; (80008e4 <xQueueGenericSend+0x240>)
 80007c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	f3bf 8f4f 	dsb	sy
 80007d2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80007d6:	f002 fa71 	bl	8002cbc <vPortExitCritical>
                return pdPASS;
 80007da:	2301      	movs	r3, #1
 80007dc:	e07d      	b.n	80008da <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d110      	bne.n	8000806 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80007e4:	f002 fa6a 	bl	8002cbc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80007e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ea:	4618      	mov	r0, r3
 80007ec:	f004 fa70 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	460b      	mov	r3, r1
 80007fa:	4601      	mov	r1, r0
 80007fc:	205a      	movs	r0, #90	; 0x5a
 80007fe:	f003 fca5 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8000802:	2300      	movs	r3, #0
 8000804:	e069      	b.n	80008da <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000808:	2b00      	cmp	r3, #0
 800080a:	d106      	bne.n	800081a <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f001 f8c1 	bl	8001998 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000816:	2301      	movs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800081a:	f002 fa4f 	bl	8002cbc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800081e:	f000 fe0f 	bl	8001440 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000822:	f002 fa1d 	bl	8002c60 <vPortEnterCritical>
 8000826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800082c:	b25b      	sxtb	r3, r3
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000832:	d103      	bne.n	800083c <xQueueGenericSend+0x198>
 8000834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000842:	b25b      	sxtb	r3, r3
 8000844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000848:	d103      	bne.n	8000852 <xQueueGenericSend+0x1ae>
 800084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000852:	f002 fa33 	bl	8002cbc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000856:	1d3a      	adds	r2, r7, #4
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f8b0 	bl	80019c4 <xTaskCheckForTimeOut>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d124      	bne.n	80008b4 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800086a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800086c:	f000 fb02 	bl	8000e74 <prvIsQueueFull>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d018      	beq.n	80008a8 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000878:	3310      	adds	r3, #16
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f000 ffd2 	bl	8001828 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000886:	f000 fa8d 	bl	8000da4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800088a:	f000 fde7 	bl	800145c <xTaskResumeAll>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	f47f af62 	bne.w	800075a <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <xQueueGenericSend+0x240>)
 8000898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	f3bf 8f6f 	isb	sy
 80008a6:	e758      	b.n	800075a <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80008a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008aa:	f000 fa7b 	bl	8000da4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80008ae:	f000 fdd5 	bl	800145c <xTaskResumeAll>
 80008b2:	e752      	b.n	800075a <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80008b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008b6:	f000 fa75 	bl	8000da4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80008ba:	f000 fdcf 	bl	800145c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80008be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fa05 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	460b      	mov	r3, r1
 80008d0:	4601      	mov	r1, r0
 80008d2:	205a      	movs	r0, #90	; 0x5a
 80008d4:	f003 fc3a 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80008d8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3738      	adds	r7, #56	; 0x38
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	e000ed04 	.word	0xe000ed04

080008e8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b090      	sub	sp, #64	; 0x40
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80008fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d109      	bne.n	8000914 <xQueueGenericSendFromISR+0x2c>
 8000900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000904:	f383 8811 	msr	BASEPRI, r3
 8000908:	f3bf 8f6f 	isb	sy
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
 8000912:	e7fe      	b.n	8000912 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d103      	bne.n	8000922 <xQueueGenericSendFromISR+0x3a>
 800091a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <xQueueGenericSendFromISR+0x3e>
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <xQueueGenericSendFromISR+0x40>
 8000926:	2300      	movs	r3, #0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d109      	bne.n	8000940 <xQueueGenericSendFromISR+0x58>
 800092c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000930:	f383 8811 	msr	BASEPRI, r3
 8000934:	f3bf 8f6f 	isb	sy
 8000938:	f3bf 8f4f 	dsb	sy
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	e7fe      	b.n	800093e <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d103      	bne.n	800094e <xQueueGenericSendFromISR+0x66>
 8000946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094a:	2b01      	cmp	r3, #1
 800094c:	d101      	bne.n	8000952 <xQueueGenericSendFromISR+0x6a>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <xQueueGenericSendFromISR+0x6c>
 8000952:	2300      	movs	r3, #0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <xQueueGenericSendFromISR+0x84>
 8000958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800095c:	f383 8811 	msr	BASEPRI, r3
 8000960:	f3bf 8f6f 	isb	sy
 8000964:	f3bf 8f4f 	dsb	sy
 8000968:	623b      	str	r3, [r7, #32]
 800096a:	e7fe      	b.n	800096a <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800096c:	f002 fa5c 	bl	8002e28 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000970:	f3ef 8211 	mrs	r2, BASEPRI
 8000974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000978:	f383 8811 	msr	BASEPRI, r3
 800097c:	f3bf 8f6f 	isb	sy
 8000980:	f3bf 8f4f 	dsb	sy
 8000984:	61fa      	str	r2, [r7, #28]
 8000986:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000988:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000994:	429a      	cmp	r2, r3
 8000996:	d302      	bcc.n	800099e <xQueueGenericSendFromISR+0xb6>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d147      	bne.n	8000a2e <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80009ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 f98d 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 80009b6:	4601      	mov	r1, r0
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	461a      	mov	r2, r3
 80009bc:	2060      	movs	r0, #96	; 0x60
 80009be:	f003 faf5 	bl	8003fac <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80009c8:	f000 f95c 	bl	8000c84 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80009cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009d4:	d112      	bne.n	80009fc <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d024      	beq.n	8000a28 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e0:	3324      	adds	r3, #36	; 0x24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 ff72 	bl	80018cc <xTaskRemoveFromEventList>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d01c      	beq.n	8000a28 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d019      	beq.n	8000a28 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e015      	b.n	8000a28 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80009fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d109      	bne.n	8000a18 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8000a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a08:	f383 8811 	msr	BASEPRI, r3
 8000a0c:	f3bf 8f6f 	isb	sy
 8000a10:	f3bf 8f4f 	dsb	sy
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e7fe      	b.n	8000a16 <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	b25a      	sxtb	r2, r3
 8000a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000a2c:	e00b      	b.n	8000a46 <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 f94d 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000a36:	4601      	mov	r1, r0
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	2060      	movs	r0, #96	; 0x60
 8000a3e:	f003 fab5 	bl	8003fac <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a48:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3740      	adds	r7, #64	; 0x40
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08f      	sub	sp, #60	; 0x3c
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d109      	bne.n	8000a8a <xQueueReceive+0x2e>
        __asm volatile
 8000a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7a:	f383 8811 	msr	BASEPRI, r3
 8000a7e:	f3bf 8f6f 	isb	sy
 8000a82:	f3bf 8f4f 	dsb	sy
 8000a86:	623b      	str	r3, [r7, #32]
 8000a88:	e7fe      	b.n	8000a88 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d103      	bne.n	8000a98 <xQueueReceive+0x3c>
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <xQueueReceive+0x40>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <xQueueReceive+0x42>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d109      	bne.n	8000ab6 <xQueueReceive+0x5a>
 8000aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa6:	f383 8811 	msr	BASEPRI, r3
 8000aaa:	f3bf 8f6f 	isb	sy
 8000aae:	f3bf 8f4f 	dsb	sy
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	e7fe      	b.n	8000ab4 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ab6:	f001 f8a7 	bl	8001c08 <xTaskGetSchedulerState>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <xQueueReceive+0x6a>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d101      	bne.n	8000aca <xQueueReceive+0x6e>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <xQueueReceive+0x70>
 8000aca:	2300      	movs	r3, #0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d109      	bne.n	8000ae4 <xQueueReceive+0x88>
 8000ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad4:	f383 8811 	msr	BASEPRI, r3
 8000ad8:	f3bf 8f6f 	isb	sy
 8000adc:	f3bf 8f4f 	dsb	sy
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	e7fe      	b.n	8000ae2 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ae4:	f002 f8bc 	bl	8002c60 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d031      	beq.n	8000b58 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000af8:	f000 f92e 	bl	8000d58 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 f8e6 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000b04:	4604      	mov	r4, r0
 8000b06:	2000      	movs	r0, #0
 8000b08:	f004 f8e2 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	2301      	movs	r3, #1
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4613      	mov	r3, r2
 8000b16:	460a      	mov	r2, r1
 8000b18:	4621      	mov	r1, r4
 8000b1a:	205c      	movs	r0, #92	; 0x5c
 8000b1c:	f003 fb16 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	691b      	ldr	r3, [r3, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00f      	beq.n	8000b50 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b32:	3310      	adds	r3, #16
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fec9 	bl	80018cc <xTaskRemoveFromEventList>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d007      	beq.n	8000b50 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b40:	4b4f      	ldr	r3, [pc, #316]	; (8000c80 <xQueueReceive+0x224>)
 8000b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b50:	f002 f8b4 	bl	8002cbc <vPortExitCritical>
                return pdPASS;
 8000b54:	2301      	movs	r3, #1
 8000b56:	e08e      	b.n	8000c76 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d115      	bne.n	8000b8a <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b5e:	f002 f8ad 	bl	8002cbc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 f8b3 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f004 f8af 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000b72:	4601      	mov	r1, r0
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	2301      	movs	r3, #1
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	4621      	mov	r1, r4
 8000b80:	205c      	movs	r0, #92	; 0x5c
 8000b82:	f003 fae3 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e075      	b.n	8000c76 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d106      	bne.n	8000b9e <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 feff 	bl	8001998 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b9e:	f002 f88d 	bl	8002cbc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ba2:	f000 fc4d 	bl	8001440 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ba6:	f002 f85b 	bl	8002c60 <vPortEnterCritical>
 8000baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bb6:	d103      	bne.n	8000bc0 <xQueueReceive+0x164>
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bcc:	d103      	bne.n	8000bd6 <xQueueReceive+0x17a>
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000bd6:	f002 f871 	bl	8002cbc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 feee 	bl	80019c4 <xTaskCheckForTimeOut>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d124      	bne.n	8000c38 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000bf0:	f000 f92a 	bl	8000e48 <prvIsQueueEmpty>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d018      	beq.n	8000c2c <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfc:	3324      	adds	r3, #36	; 0x24
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fe10 	bl	8001828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c0a:	f000 f8cb 	bl	8000da4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c0e:	f000 fc25 	bl	800145c <xTaskResumeAll>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f47f af65 	bne.w	8000ae4 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <xQueueReceive+0x224>)
 8000c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	f3bf 8f4f 	dsb	sy
 8000c26:	f3bf 8f6f 	isb	sy
 8000c2a:	e75b      	b.n	8000ae4 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c2e:	f000 f8b9 	bl	8000da4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c32:	f000 fc13 	bl	800145c <xTaskResumeAll>
 8000c36:	e755      	b.n	8000ae4 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c3a:	f000 f8b3 	bl	8000da4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c3e:	f000 fc0d 	bl	800145c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c44:	f000 f900 	bl	8000e48 <prvIsQueueEmpty>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f43f af4a 	beq.w	8000ae4 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c52:	4618      	mov	r0, r3
 8000c54:	f004 f83c 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000c58:	4604      	mov	r4, r0
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f004 f838 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000c60:	4601      	mov	r1, r0
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	205c      	movs	r0, #92	; 0x5c
 8000c70:	f003 fa6c 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000c74:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3734      	adds	r7, #52	; 0x34
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd90      	pop	{r4, r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	e000ed04 	.word	0xe000ed04

08000c84 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c98:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10d      	bne.n	8000cbe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d14d      	bne.n	8000d46 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 ffc8 	bl	8001c44 <xTaskPriorityDisinherit>
 8000cb4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	e043      	b.n	8000d46 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d119      	bne.n	8000cf8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6858      	ldr	r0, [r3, #4]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	f005 fb59 	bl	8006386 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	441a      	add	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d32b      	bcc.n	8000d46 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	e026      	b.n	8000d46 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68d8      	ldr	r0, [r3, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	461a      	mov	r2, r3
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	f005 fb3f 	bl	8006386 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	425b      	negs	r3, r3
 8000d12:	441a      	add	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	441a      	add	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d105      	bne.n	8000d46 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000d4e:	697b      	ldr	r3, [r7, #20]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d018      	beq.n	8000d9c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	441a      	add	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d303      	bcc.n	8000d8c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68d9      	ldr	r1, [r3, #12]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	461a      	mov	r2, r3
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f005 faf5 	bl	8006386 <memcpy>
    }
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000dac:	f001 ff58 	bl	8002c60 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000db6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000db8:	e011      	b.n	8000dde <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3324      	adds	r3, #36	; 0x24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fd80 	bl	80018cc <xTaskRemoveFromEventList>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000dd2:	f000 fe5b 	bl	8001a8c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	dce9      	bgt.n	8000dba <prvUnlockQueue+0x16>
 8000de6:	e000      	b.n	8000dea <prvUnlockQueue+0x46>
                        break;
 8000de8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	22ff      	movs	r2, #255	; 0xff
 8000dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000df2:	f001 ff63 	bl	8002cbc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000df6:	f001 ff33 	bl	8002c60 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e02:	e011      	b.n	8000e28 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d012      	beq.n	8000e32 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3310      	adds	r3, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fd5b 	bl	80018cc <xTaskRemoveFromEventList>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e1c:	f000 fe36 	bl	8001a8c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dce9      	bgt.n	8000e04 <prvUnlockQueue+0x60>
 8000e30:	e000      	b.n	8000e34 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e32:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	22ff      	movs	r2, #255	; 0xff
 8000e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e3c:	f001 ff3e 	bl	8002cbc <vPortExitCritical>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e50:	f001 ff06 	bl	8002c60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	e001      	b.n	8000e66 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e66:	f001 ff29 	bl	8002cbc <vPortExitCritical>

    return xReturn;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e7c:	f001 fef0 	bl	8002c60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d102      	bne.n	8000e92 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	e001      	b.n	8000e96 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e96:	f001 ff11 	bl	8002cbc <vPortExitCritical>

    return xReturn;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	e01e      	b.n	8000ef2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <vQueueAddToRegistry+0x5c>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d115      	bne.n	8000eec <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000ec0:	490f      	ldr	r1, [pc, #60]	; (8000f00 <vQueueAddToRegistry+0x5c>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000eca:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <vQueueAddToRegistry+0x5c>)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fef9 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8000ede:	4601      	mov	r1, r0
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	2071      	movs	r0, #113	; 0x71
 8000ee6:	f003 f861 	bl	8003fac <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8000eea:	e005      	b.n	8000ef8 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d9dd      	bls.n	8000eb4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20015d04 	.word	0x20015d04

08000f04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000f14:	f001 fea4 	bl	8002c60 <vPortEnterCritical>
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f24:	d103      	bne.n	8000f2e <vQueueWaitForMessageRestricted+0x2a>
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f3a:	d103      	bne.n	8000f44 <vQueueWaitForMessageRestricted+0x40>
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f44:	f001 feba 	bl	8002cbc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d106      	bne.n	8000f5e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3324      	adds	r3, #36	; 0x24
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f000 fc89 	bl	8001870 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff20 	bl	8000da4 <prvUnlockQueue>
    }
 8000f64:	bf00      	nop
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 ff8f 	bl	8002ea4 <pvPortMalloc>
 8000f86:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00e      	beq.n	8000fac <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000f8e:	2058      	movs	r0, #88	; 0x58
 8000f90:	f001 ff88 	bl	8002ea4 <pvPortMalloc>
 8000f94:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa2:	e005      	b.n	8000fb0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000fa4:	6978      	ldr	r0, [r7, #20]
 8000fa6:	f002 f859 	bl	800305c <vPortFree>
 8000faa:	e001      	b.n	8000fb0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d013      	beq.n	8000fde <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f000 f80e 	bl	8000fee <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000fd2:	69f8      	ldr	r0, [r7, #28]
 8000fd4:	f000 f8a0 	bl	8001118 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	e002      	b.n	8000fe4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fe2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
    }
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b088      	sub	sp, #32
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	461a      	mov	r2, r3
 8001006:	21a5      	movs	r1, #165	; 0xa5
 8001008:	f005 f9c8 	bl	800639c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001016:	3b01      	subs	r3, #1
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	f023 0307 	bic.w	r3, r3, #7
 8001024:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <prvInitialiseNewTask+0x56>
 8001030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001034:	f383 8811 	msr	BASEPRI, r3
 8001038:	f3bf 8f6f 	isb	sy
 800103c:	f3bf 8f4f 	dsb	sy
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e7fe      	b.n	8001042 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01f      	beq.n	800108a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e012      	b.n	8001076 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4413      	add	r3, r2
 8001056:	7819      	ldrb	r1, [r3, #0]
 8001058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4413      	add	r3, r2
 800105e:	3334      	adds	r3, #52	; 0x34
 8001060:	460a      	mov	r2, r1
 8001062:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	3301      	adds	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	2b09      	cmp	r3, #9
 800107a:	d9e9      	bls.n	8001050 <prvInitialiseNewTask+0x62>
 800107c:	e000      	b.n	8001080 <prvInitialiseNewTask+0x92>
            {
                break;
 800107e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001088:	e003      	b.n	8001092 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001094:	2b04      	cmp	r3, #4
 8001096:	d901      	bls.n	800109c <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001098:	2304      	movs	r3, #4
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80010a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80010a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010aa:	2200      	movs	r2, #0
 80010ac:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	3304      	adds	r3, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f974 	bl	80003a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ba:	3318      	adds	r3, #24
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f96f 	bl	80003a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010c6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	f1c3 0205 	rsb	r2, r3, #5
 80010ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	3350      	adds	r3, #80	; 0x50
 80010dc:	2204      	movs	r2, #4
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 f95b 	bl	800639c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	3354      	adds	r3, #84	; 0x54
 80010ea:	2201      	movs	r2, #1
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f005 f954 	bl	800639c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	68f9      	ldr	r1, [r7, #12]
 80010f8:	69b8      	ldr	r0, [r7, #24]
 80010fa:	f001 fc89 	bl	8002a10 <pxPortInitialiseStack>
 80010fe:	4602      	mov	r2, r0
 8001100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001102:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800110e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af02      	add	r7, sp, #8
 800111e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001120:	f001 fd9e 	bl	8002c60 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <prvAddNewTaskToReadyList+0xfc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a3a      	ldr	r2, [pc, #232]	; (8001214 <prvAddNewTaskToReadyList+0xfc>)
 800112c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <prvAddNewTaskToReadyList+0x100>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001136:	4a38      	ldr	r2, [pc, #224]	; (8001218 <prvAddNewTaskToReadyList+0x100>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <prvAddNewTaskToReadyList+0xfc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d110      	bne.n	8001166 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001144:	f000 fcc8 	bl	8001ad8 <prvInitialiseTaskLists>
 8001148:	e00d      	b.n	8001166 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <prvAddNewTaskToReadyList+0x104>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <prvAddNewTaskToReadyList+0x100>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	429a      	cmp	r2, r3
 800115e:	d802      	bhi.n	8001166 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001160:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <prvAddNewTaskToReadyList+0x100>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001166:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <prvAddNewTaskToReadyList+0x108>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <prvAddNewTaskToReadyList+0x108>)
 800116e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <prvAddNewTaskToReadyList+0x108>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d016      	beq.n	80011ac <prvAddNewTaskToReadyList+0x94>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fc7f 	bl	8004a84 <SEGGER_SYSVIEW_OnTaskCreate>
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	461d      	mov	r5, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	461c      	mov	r4, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	1ae3      	subs	r3, r4, r3
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	462b      	mov	r3, r5
 80011a8:	f002 f91c 	bl	80033e4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fcec 	bl	8004b8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	2201      	movs	r2, #1
 80011ba:	409a      	lsls	r2, r3
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <prvAddNewTaskToReadyList+0x10c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <prvAddNewTaskToReadyList+0x10c>)
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <prvAddNewTaskToReadyList+0x110>)
 80011d4:	441a      	add	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4610      	mov	r0, r2
 80011de:	f7ff f8ec 	bl	80003ba <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80011e2:	f001 fd6b 	bl	8002cbc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <prvAddNewTaskToReadyList+0x104>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00e      	beq.n	800120c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <prvAddNewTaskToReadyList+0x100>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <prvAddNewTaskToReadyList+0x114>)
 80011fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	f3bf 8f4f 	dsb	sy
 8001208:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bdb0      	pop	{r4, r5, r7, pc}
 8001214:	20000278 	.word	0x20000278
 8001218:	200001a0 	.word	0x200001a0
 800121c:	20000284 	.word	0x20000284
 8001220:	20000294 	.word	0x20000294
 8001224:	20000280 	.word	0x20000280
 8001228:	200001a4 	.word	0x200001a4
 800122c:	e000ed04 	.word	0xe000ed04

08001230 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001238:	f001 fd12 	bl	8002c60 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <vTaskDelete+0x18>
 8001242:	4b45      	ldr	r3, [pc, #276]	; (8001358 <vTaskDelete+0x128>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	e000      	b.n	800124a <vTaskDelete+0x1a>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3304      	adds	r3, #4
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f90f 	bl	8000474 <uxListRemove>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d115      	bne.n	8001288 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	493e      	ldr	r1, [pc, #248]	; (800135c <vTaskDelete+0x12c>)
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10a      	bne.n	8001288 <vTaskDelete+0x58>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	2201      	movs	r2, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43da      	mvns	r2, r3
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <vTaskDelete+0x130>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4013      	ands	r3, r2
 8001284:	4a36      	ldr	r2, [pc, #216]	; (8001360 <vTaskDelete+0x130>)
 8001286:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	3318      	adds	r3, #24
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f8ed 	bl	8000474 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <vTaskDelete+0x134>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a30      	ldr	r2, [pc, #192]	; (8001364 <vTaskDelete+0x134>)
 80012a2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80012a4:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <vTaskDelete+0x128>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d118      	bne.n	80012e0 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3304      	adds	r3, #4
 80012b2:	4619      	mov	r1, r3
 80012b4:	482c      	ldr	r0, [pc, #176]	; (8001368 <vTaskDelete+0x138>)
 80012b6:	f7ff f880 	bl	80003ba <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <vTaskDelete+0x13c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3301      	adds	r3, #1
 80012c0:	4a2a      	ldr	r2, [pc, #168]	; (800136c <vTaskDelete+0x13c>)
 80012c2:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 fd02 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4619      	mov	r1, r3
 80012d0:	2022      	movs	r0, #34	; 0x22
 80012d2:	f002 fe2f 	bl	8003f34 <SEGGER_SYSVIEW_RecordU32>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 f8eb 	bl	80034b4 <SYSVIEW_DeleteTask>
 80012de:	e016      	b.n	800130e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80012e0:	4b23      	ldr	r3, [pc, #140]	; (8001370 <vTaskDelete+0x140>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <vTaskDelete+0x140>)
 80012e8:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fcef 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4619      	mov	r1, r3
 80012f6:	2022      	movs	r0, #34	; 0x22
 80012f8:	f002 fe1c 	bl	8003f34 <SEGGER_SYSVIEW_RecordU32>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 f8d8 	bl	80034b4 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 fc53 	bl	8001bb0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800130a:	f000 fc61 	bl	8001bd0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800130e:	f001 fcd5 	bl	8002cbc <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <vTaskDelete+0x144>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01a      	beq.n	8001350 <vTaskDelete+0x120>
        {
            if( pxTCB == pxCurrentTCB )
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <vTaskDelete+0x128>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	429a      	cmp	r2, r3
 8001322:	d115      	bne.n	8001350 <vTaskDelete+0x120>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <vTaskDelete+0x148>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d009      	beq.n	8001340 <vTaskDelete+0x110>
 800132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001330:	f383 8811 	msr	BASEPRI, r3
 8001334:	f3bf 8f6f 	isb	sy
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	e7fe      	b.n	800133e <vTaskDelete+0x10e>
                portYIELD_WITHIN_API();
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <vTaskDelete+0x14c>)
 8001342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	f3bf 8f4f 	dsb	sy
 800134c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200001a0 	.word	0x200001a0
 800135c:	200001a4 	.word	0x200001a4
 8001360:	20000280 	.word	0x20000280
 8001364:	20000294 	.word	0x20000294
 8001368:	2000024c 	.word	0x2000024c
 800136c:	20000260 	.word	0x20000260
 8001370:	20000278 	.word	0x20000278
 8001374:	20000284 	.word	0x20000284
 8001378:	200002a0 	.word	0x200002a0
 800137c:	e000ed04 	.word	0xe000ed04

08001380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <vTaskStartScheduler+0xa0>)
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	2282      	movs	r2, #130	; 0x82
 8001392:	4924      	ldr	r1, [pc, #144]	; (8001424 <vTaskStartScheduler+0xa4>)
 8001394:	4824      	ldr	r0, [pc, #144]	; (8001428 <vTaskStartScheduler+0xa8>)
 8001396:	f7ff fde9 	bl	8000f6c <xTaskCreate>
 800139a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80013a2:	f000 ffcb 	bl	800233c <xTimerCreateTimerTask>
 80013a6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d123      	bne.n	80013f6 <vTaskStartScheduler+0x76>
 80013ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b2:	f383 8811 	msr	BASEPRI, r3
 80013b6:	f3bf 8f6f 	isb	sy
 80013ba:	f3bf 8f4f 	dsb	sy
 80013be:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <vTaskStartScheduler+0xac>)
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <vTaskStartScheduler+0xb0>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <vTaskStartScheduler+0xb4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <vTaskStartScheduler+0xb8>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <vTaskStartScheduler+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d102      	bne.n	80013e6 <vTaskStartScheduler+0x66>
 80013e0:	f003 fb34 	bl	8004a4c <SEGGER_SYSVIEW_OnIdle>
 80013e4:	e004      	b.n	80013f0 <vTaskStartScheduler+0x70>
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <vTaskStartScheduler+0xb8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fb8c 	bl	8004b08 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80013f0:	f001 fb98 	bl	8002b24 <xPortStartScheduler>
 80013f4:	e00d      	b.n	8001412 <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013fc:	d109      	bne.n	8001412 <vTaskStartScheduler+0x92>
 80013fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001402:	f383 8811 	msr	BASEPRI, r3
 8001406:	f3bf 8f6f 	isb	sy
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	e7fe      	b.n	8001410 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <vTaskStartScheduler+0xbc>)
 8001414:	681b      	ldr	r3, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000029c 	.word	0x2000029c
 8001424:	08006bbc 	.word	0x08006bbc
 8001428:	08001aa5 	.word	0x08001aa5
 800142c:	20000298 	.word	0x20000298
 8001430:	20000284 	.word	0x20000284
 8001434:	2000027c 	.word	0x2000027c
 8001438:	200001a0 	.word	0x200001a0
 800143c:	20000000 	.word	0x20000000

08001440 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <vTaskSuspendAll+0x18>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <vTaskSuspendAll+0x18>)
 800144c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	200002a0 	.word	0x200002a0

0800145c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <xTaskResumeAll+0x11c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <xTaskResumeAll+0x2a>
 8001472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001476:	f383 8811 	msr	BASEPRI, r3
 800147a:	f3bf 8f6f 	isb	sy
 800147e:	f3bf 8f4f 	dsb	sy
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	e7fe      	b.n	8001484 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001486:	f001 fbeb 	bl	8002c60 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <xTaskResumeAll+0x11c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	4a39      	ldr	r2, [pc, #228]	; (8001578 <xTaskResumeAll+0x11c>)
 8001492:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <xTaskResumeAll+0x11c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d165      	bne.n	8001568 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <xTaskResumeAll+0x120>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d061      	beq.n	8001568 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014a4:	e032      	b.n	800150c <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <xTaskResumeAll+0x124>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3318      	adds	r3, #24
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe ffde 	bl	8000474 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3304      	adds	r3, #4
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffd9 	bl	8000474 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 fb61 	bl	8004b8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <xTaskResumeAll+0x128>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <xTaskResumeAll+0x128>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <xTaskResumeAll+0x12c>)
 80014ea:	441a      	add	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3304      	adds	r3, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7fe ff61 	bl	80003ba <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <xTaskResumeAll+0x130>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <xTaskResumeAll+0x134>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <xTaskResumeAll+0x124>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1c8      	bne.n	80014a6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800151a:	f000 fb59 	bl	8001bd0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <xTaskResumeAll+0x138>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800152a:	f000 f859 	bl	80015e0 <xTaskIncrementTick>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <xTaskResumeAll+0x134>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3b01      	subs	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <xTaskResumeAll+0x138>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <xTaskResumeAll+0x134>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001554:	2301      	movs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <xTaskResumeAll+0x13c>)
 800155a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001568:	f001 fba8 	bl	8002cbc <vPortExitCritical>

    return xAlreadyYielded;
 800156c:	68bb      	ldr	r3, [r7, #8]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200002a0 	.word	0x200002a0
 800157c:	20000278 	.word	0x20000278
 8001580:	20000238 	.word	0x20000238
 8001584:	20000280 	.word	0x20000280
 8001588:	200001a4 	.word	0x200001a4
 800158c:	200001a0 	.word	0x200001a0
 8001590:	2000028c 	.word	0x2000028c
 8001594:	20000288 	.word	0x20000288
 8001598:	e000ed04 	.word	0xe000ed04

0800159c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <xTaskGetTickCount+0x1c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000027c 	.word	0x2000027c

080015bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80015c2:	f001 fc31 	bl	8002e28 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <xTaskGetTickCountFromISR+0x20>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80015d0:	683b      	ldr	r3, [r7, #0]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000027c 	.word	0x2000027c

080015e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015ea:	4b50      	ldr	r3, [pc, #320]	; (800172c <xTaskIncrementTick+0x14c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f040 8091 	bne.w	8001716 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80015f4:	4b4e      	ldr	r3, [pc, #312]	; (8001730 <xTaskIncrementTick+0x150>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80015fc:	4a4c      	ldr	r2, [pc, #304]	; (8001730 <xTaskIncrementTick+0x150>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11f      	bne.n	8001648 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001608:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <xTaskIncrementTick+0x154>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d009      	beq.n	8001626 <xTaskIncrementTick+0x46>
 8001612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	e7fe      	b.n	8001624 <xTaskIncrementTick+0x44>
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <xTaskIncrementTick+0x154>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4b42      	ldr	r3, [pc, #264]	; (8001738 <xTaskIncrementTick+0x158>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a40      	ldr	r2, [pc, #256]	; (8001734 <xTaskIncrementTick+0x154>)
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <xTaskIncrementTick+0x158>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <xTaskIncrementTick+0x15c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a3e      	ldr	r2, [pc, #248]	; (800173c <xTaskIncrementTick+0x15c>)
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	f000 fac4 	bl	8001bd0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001648:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <xTaskIncrementTick+0x160>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	429a      	cmp	r2, r3
 8001650:	d34c      	bcc.n	80016ec <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <xTaskIncrementTick+0x154>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <xTaskIncrementTick+0x160>)
 800165e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001662:	601a      	str	r2, [r3, #0]
                    break;
 8001664:	e042      	b.n	80016ec <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <xTaskIncrementTick+0x154>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	429a      	cmp	r2, r3
 800167c:	d203      	bcs.n	8001686 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800167e:	4a30      	ldr	r2, [pc, #192]	; (8001740 <xTaskIncrementTick+0x160>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001684:	e032      	b.n	80016ec <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3304      	adds	r3, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fef2 	bl	8000474 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	3318      	adds	r3, #24
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fee9 	bl	8000474 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 fa71 	bl	8004b8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	2201      	movs	r2, #1
 80016b0:	409a      	lsls	r2, r3
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <xTaskIncrementTick+0x164>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <xTaskIncrementTick+0x164>)
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <xTaskIncrementTick+0x168>)
 80016ca:	441a      	add	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3304      	adds	r3, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7fe fe71 	bl	80003ba <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <xTaskIncrementTick+0x16c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3b5      	bcc.n	8001652 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016ea:	e7b2      	b.n	8001652 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <xTaskIncrementTick+0x16c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f2:	4915      	ldr	r1, [pc, #84]	; (8001748 <xTaskIncrementTick+0x168>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d901      	bls.n	8001708 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8001704:	2301      	movs	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <xTaskIncrementTick+0x170>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d007      	beq.n	8001720 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8001710:	2301      	movs	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e004      	b.n	8001720 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <xTaskIncrementTick+0x174>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <xTaskIncrementTick+0x174>)
 800171e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001720:	697b      	ldr	r3, [r7, #20]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200002a0 	.word	0x200002a0
 8001730:	2000027c 	.word	0x2000027c
 8001734:	20000230 	.word	0x20000230
 8001738:	20000234 	.word	0x20000234
 800173c:	20000290 	.word	0x20000290
 8001740:	20000298 	.word	0x20000298
 8001744:	20000280 	.word	0x20000280
 8001748:	200001a4 	.word	0x200001a4
 800174c:	200001a0 	.word	0x200001a0
 8001750:	2000028c 	.word	0x2000028c
 8001754:	20000288 	.word	0x20000288

08001758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800175e:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <vTaskSwitchContext+0xb8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <vTaskSwitchContext+0xbc>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800176c:	e04c      	b.n	8001808 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <vTaskSwitchContext+0xbc>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <vTaskSwitchContext+0xc0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	f1c3 031f 	rsb	r3, r3, #31
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	4924      	ldr	r1, [pc, #144]	; (800181c <vTaskSwitchContext+0xc4>)
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <vTaskSwitchContext+0x5a>
        __asm volatile
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	e7fe      	b.n	80017b0 <vTaskSwitchContext+0x58>
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <vTaskSwitchContext+0xc4>)
 80017be:	4413      	add	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	3308      	adds	r3, #8
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d104      	bne.n	80017e2 <vTaskSwitchContext+0x8a>
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <vTaskSwitchContext+0xc8>)
 80017ea:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <vTaskSwitchContext+0xc8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <vTaskSwitchContext+0xcc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d102      	bne.n	80017fe <vTaskSwitchContext+0xa6>
 80017f8:	f003 f928 	bl	8004a4c <SEGGER_SYSVIEW_OnIdle>
}
 80017fc:	e004      	b.n	8001808 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <vTaskSwitchContext+0xc8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f980 	bl	8004b08 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200002a0 	.word	0x200002a0
 8001814:	2000028c 	.word	0x2000028c
 8001818:	20000280 	.word	0x20000280
 800181c:	200001a4 	.word	0x200001a4
 8001820:	200001a0 	.word	0x200001a0
 8001824:	2000029c 	.word	0x2000029c

08001828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <vTaskPlaceOnEventList+0x24>
 8001838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e7fe      	b.n	800184a <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <vTaskPlaceOnEventList+0x44>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	3318      	adds	r3, #24
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7fe fdd4 	bl	8000402 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800185a:	2101      	movs	r1, #1
 800185c:	6838      	ldr	r0, [r7, #0]
 800185e:	f000 fcf5 	bl	800224c <prvAddCurrentTaskToDelayedList>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200001a0 	.word	0x200001a0

08001870 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <vTaskPlaceOnEventListRestricted+0x26>
 8001882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001886:	f383 8811 	msr	BASEPRI, r3
 800188a:	f3bf 8f6f 	isb	sy
 800188e:	f3bf 8f4f 	dsb	sy
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e7fe      	b.n	8001894 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <vTaskPlaceOnEventListRestricted+0x58>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3318      	adds	r3, #24
 800189c:	4619      	mov	r1, r3
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7fe fd8b 	bl	80003ba <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ae:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80018b0:	2024      	movs	r0, #36	; 0x24
 80018b2:	f002 fb21 	bl	8003ef8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	68b8      	ldr	r0, [r7, #8]
 80018ba:	f000 fcc7 	bl	800224c <prvAddCurrentTaskToDelayedList>
    }
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001a0 	.word	0x200001a0

080018cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <xTaskRemoveFromEventList+0x2a>
 80018e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e6:	f383 8811 	msr	BASEPRI, r3
 80018ea:	f3bf 8f6f 	isb	sy
 80018ee:	f3bf 8f4f 	dsb	sy
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e7fe      	b.n	80018f4 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	3318      	adds	r3, #24
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fdba 	bl	8000474 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <xTaskRemoveFromEventList+0xb4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d120      	bne.n	800194a <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3304      	adds	r3, #4
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fdb1 	bl	8000474 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4618      	mov	r0, r3
 8001916:	f003 f939 	bl	8004b8c <SEGGER_SYSVIEW_OnTaskStartReady>
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	2201      	movs	r2, #1
 8001920:	409a      	lsls	r2, r3
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <xTaskRemoveFromEventList+0xb8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	4a16      	ldr	r2, [pc, #88]	; (8001984 <xTaskRemoveFromEventList+0xb8>)
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4a13      	ldr	r2, [pc, #76]	; (8001988 <xTaskRemoveFromEventList+0xbc>)
 800193a:	441a      	add	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f7fe fd39 	bl	80003ba <vListInsertEnd>
 8001948:	e005      	b.n	8001956 <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	3318      	adds	r3, #24
 800194e:	4619      	mov	r1, r3
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <xTaskRemoveFromEventList+0xc0>)
 8001952:	f7fe fd32 	bl	80003ba <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <xTaskRemoveFromEventList+0xc4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	429a      	cmp	r2, r3
 8001962:	d905      	bls.n	8001970 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <xTaskRemoveFromEventList+0xc8>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e001      	b.n	8001974 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001974:	697b      	ldr	r3, [r7, #20]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002a0 	.word	0x200002a0
 8001984:	20000280 	.word	0x20000280
 8001988:	200001a4 	.word	0x200001a4
 800198c:	20000238 	.word	0x20000238
 8001990:	200001a0 	.word	0x200001a0
 8001994:	2000028c 	.word	0x2000028c

08001998 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <vTaskInternalSetTimeOutState+0x24>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <vTaskInternalSetTimeOutState+0x28>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	605a      	str	r2, [r3, #4]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	20000290 	.word	0x20000290
 80019c0:	2000027c 	.word	0x2000027c

080019c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <xTaskCheckForTimeOut+0x24>
 80019d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d8:	f383 8811 	msr	BASEPRI, r3
 80019dc:	f3bf 8f6f 	isb	sy
 80019e0:	f3bf 8f4f 	dsb	sy
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e7fe      	b.n	80019e6 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <xTaskCheckForTimeOut+0x3e>
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e7fe      	b.n	8001a00 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8001a02:	f001 f92d 	bl	8002c60 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <xTaskCheckForTimeOut+0xc0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a1e:	d102      	bne.n	8001a26 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	e026      	b.n	8001a74 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <xTaskCheckForTimeOut+0xc4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d00a      	beq.n	8001a48 <xTaskCheckForTimeOut+0x84>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d305      	bcc.n	8001a48 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e015      	b.n	8001a74 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20b      	bcs.n	8001a6a <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	1ad2      	subs	r2, r2, r3
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff9a 	bl	8001998 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e004      	b.n	8001a74 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a74:	f001 f922 	bl	8002cbc <vPortExitCritical>

    return xReturn;
 8001a78:	69fb      	ldr	r3, [r7, #28]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	2000027c 	.word	0x2000027c
 8001a88:	20000290 	.word	0x20000290

08001a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <vTaskMissedYield+0x14>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	2000028c 	.word	0x2000028c

08001aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001aac:	f000 f854 	bl	8001b58 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <prvIdleTask+0x2c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d907      	bls.n	8001ac8 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <prvIdleTask+0x30>)
 8001aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	f3bf 8f4f 	dsb	sy
 8001ac4:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8001ac8:	f004 fa98 	bl	8005ffc <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8001acc:	e7ee      	b.n	8001aac <prvIdleTask+0x8>
 8001ace:	bf00      	nop
 8001ad0:	200001a4 	.word	0x200001a4
 8001ad4:	e000ed04 	.word	0xe000ed04

08001ad8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	e00c      	b.n	8001afe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <prvInitialiseTaskLists+0x60>)
 8001af0:	4413      	add	r3, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fc34 	bl	8000360 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3301      	adds	r3, #1
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d9ef      	bls.n	8001ae4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <prvInitialiseTaskLists+0x64>)
 8001b06:	f7fe fc2b 	bl	8000360 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b0a:	480d      	ldr	r0, [pc, #52]	; (8001b40 <prvInitialiseTaskLists+0x68>)
 8001b0c:	f7fe fc28 	bl	8000360 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <prvInitialiseTaskLists+0x6c>)
 8001b12:	f7fe fc25 	bl	8000360 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <prvInitialiseTaskLists+0x70>)
 8001b18:	f7fe fc22 	bl	8000360 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <prvInitialiseTaskLists+0x74>)
 8001b1e:	f7fe fc1f 	bl	8000360 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <prvInitialiseTaskLists+0x78>)
 8001b24:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <prvInitialiseTaskLists+0x64>)
 8001b26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b28:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <prvInitialiseTaskLists+0x7c>)
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <prvInitialiseTaskLists+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200001a4 	.word	0x200001a4
 8001b3c:	20000208 	.word	0x20000208
 8001b40:	2000021c 	.word	0x2000021c
 8001b44:	20000238 	.word	0x20000238
 8001b48:	2000024c 	.word	0x2000024c
 8001b4c:	20000264 	.word	0x20000264
 8001b50:	20000230 	.word	0x20000230
 8001b54:	20000234 	.word	0x20000234

08001b58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b5e:	e019      	b.n	8001b94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001b60:	f001 f87e 	bl	8002c60 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <prvCheckTasksWaitingTermination+0x4c>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc7f 	bl	8000474 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <prvCheckTasksWaitingTermination+0x50>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <prvCheckTasksWaitingTermination+0x50>)
 8001b7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <prvCheckTasksWaitingTermination+0x54>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <prvCheckTasksWaitingTermination+0x54>)
 8001b88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001b8a:	f001 f897 	bl	8002cbc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f80e 	bl	8001bb0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <prvCheckTasksWaitingTermination+0x54>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e1      	bne.n	8001b60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000024c 	.word	0x2000024c
 8001ba8:	20000278 	.word	0x20000278
 8001bac:	20000260 	.word	0x20000260

08001bb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 fa4d 	bl	800305c <vPortFree>
                vPortFree( pxTCB );
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f001 fa4a 	bl	800305c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <prvResetNextTaskUnblockTime+0x30>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <prvResetNextTaskUnblockTime+0x34>)
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001be6:	e005      	b.n	8001bf4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <prvResetNextTaskUnblockTime+0x30>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <prvResetNextTaskUnblockTime+0x34>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000230 	.word	0x20000230
 8001c04:	20000298 	.word	0x20000298

08001c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <xTaskGetSchedulerState+0x34>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d102      	bne.n	8001c1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c16:	2301      	movs	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	e008      	b.n	8001c2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <xTaskGetSchedulerState+0x38>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001c24:	2302      	movs	r3, #2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	e001      	b.n	8001c2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001c2e:	687b      	ldr	r3, [r7, #4]
    }
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	20000284 	.word	0x20000284
 8001c40:	200002a0 	.word	0x200002a0

08001c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d066      	beq.n	8001d28 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001c5a:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <xTaskPriorityDisinherit+0xf0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d009      	beq.n	8001c78 <xTaskPriorityDisinherit+0x34>
 8001c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	e7fe      	b.n	8001c76 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <xTaskPriorityDisinherit+0x50>
 8001c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c84:	f383 8811 	msr	BASEPRI, r3
 8001c88:	f3bf 8f6f 	isb	sy
 8001c8c:	f3bf 8f4f 	dsb	sy
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	e7fe      	b.n	8001c92 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d03e      	beq.n	8001d28 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13a      	bne.n	8001d28 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbdc 	bl	8000474 <uxListRemove>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <xTaskPriorityDisinherit+0xf4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <xTaskPriorityDisinherit+0xf4>)
 8001cd6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	204a      	movs	r0, #74	; 0x4a
 8001cde:	f002 f929 	bl	8003f34 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f1c3 0205 	rsb	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	619a      	str	r2, [r3, #24]
//                    prvAddTaskToReadyList( pxTCB );
                    prvReaddTaskToReadyList( pxTCB );
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <xTaskPriorityDisinherit+0xf4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <xTaskPriorityDisinherit+0xf4>)
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4a09      	ldr	r2, [pc, #36]	; (8001d3c <xTaskPriorityDisinherit+0xf8>)
 8001d16:	441a      	add	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7fe fb4b 	bl	80003ba <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001d28:	697b      	ldr	r3, [r7, #20]
    }
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001a0 	.word	0x200001a0
 8001d38:	20000280 	.word	0x20000280
 8001d3c:	200001a4 	.word	0x200001a4

08001d40 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d009      	beq.n	8001d68 <xTaskGenericNotifyWait+0x28>
 8001d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	e7fe      	b.n	8001d66 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8001d68:	f000 ff7a 	bl	8002c60 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	3354      	adds	r3, #84	; 0x54
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d022      	beq.n	8001dc4 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001d7e:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	3214      	adds	r2, #20
 8001d86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	43d2      	mvns	r2, r2
 8001d8e:	4011      	ands	r1, r2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	3214      	adds	r2, #20
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001d98:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	3354      	adds	r3, #84	; 0x54
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dac:	2101      	movs	r1, #1
 8001dae:	6a38      	ldr	r0, [r7, #32]
 8001db0:	f000 fa4c 	bl	800224c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <xTaskGenericNotifyWait+0x10c>)
 8001db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001dc4:	f000 ff7a 	bl	8002cbc <vPortExitCritical>

        taskENTER_CRITICAL();
 8001dc8:	f000 ff4a 	bl	8002c60 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	2040      	movs	r0, #64	; 0x40
 8001dda:	f002 f9b7 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	3214      	adds	r2, #20
 8001dec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3354      	adds	r3, #84	; 0x54
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d002      	beq.n	8001e0c <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e00e      	b.n	8001e2a <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	3214      	adds	r2, #20
 8001e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	43d2      	mvns	r2, r2
 8001e1c:	4011      	ands	r1, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	3214      	adds	r2, #20
 8001e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001e26:	2301      	movs	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <xTaskGenericNotifyWait+0x108>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	3354      	adds	r3, #84	; 0x54
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001e38:	f000 ff40 	bl	8002cbc <vPortExitCritical>

        return xReturn;
 8001e3c:	697b      	ldr	r3, [r7, #20]
    }
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200001a0 	.word	0x200001a0
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d009      	beq.n	8001e7c <xTaskGenericNotify+0x2c>
 8001e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6c:	f383 8811 	msr	BASEPRI, r3
 8001e70:	f3bf 8f6f 	isb	sy
 8001e74:	f3bf 8f4f 	dsb	sy
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	e7fe      	b.n	8001e7a <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <xTaskGenericNotify+0x46>
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	e7fe      	b.n	8001e94 <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001e9a:	f000 fee1 	bl	8002c60 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	3214      	adds	r2, #20
 8001eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3354      	adds	r3, #84	; 0x54
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3354      	adds	r3, #84	; 0x54
 8001ec8:	2202      	movs	r2, #2
 8001eca:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d83b      	bhi.n	8001f4a <xTaskGenericNotify+0xfa>
 8001ed2:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <xTaskGenericNotify+0x88>)
 8001ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed8:	08001f67 	.word	0x08001f67
 8001edc:	08001eed 	.word	0x08001eed
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	08001f21 	.word	0x08001f21
 8001ee8:	08001f2f 	.word	0x08001f2f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	3214      	adds	r2, #20
 8001ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	ea42 0103 	orr.w	r1, r2, r3
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	3214      	adds	r2, #20
 8001f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f06:	e031      	b.n	8001f6c <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	3214      	adds	r2, #20
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	3214      	adds	r2, #20
 8001f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f1e:	e025      	b.n	8001f6c <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	3214      	adds	r2, #20
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001f2c:	e01e      	b.n	8001f6c <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d006      	beq.n	8001f44 <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	3214      	adds	r2, #20
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001f42:	e013      	b.n	8001f6c <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001f48:	e010      	b.n	8001f6c <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001f4a:	4b33      	ldr	r3, [pc, #204]	; (8002018 <xTaskGenericNotify+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <xTaskGenericNotify+0x11a>
 8001f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	e7fe      	b.n	8001f64 <xTaskGenericNotify+0x114>
                    break;
 8001f66:	bf00      	nop
 8001f68:	e000      	b.n	8001f6c <xTaskGenericNotify+0x11c>

                    break;
 8001f6a:	bf00      	nop
            }

            traceTASK_NOTIFY( uxIndexToNotify );
 8001f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 feae 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 8001f74:	4601      	mov	r1, r0
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	203e      	movs	r0, #62	; 0x3e
 8001f82:	f002 f8e3 	bl	800414c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8001f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d13c      	bne.n	8002008 <xTaskGenericNotify+0x1b8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	3304      	adds	r3, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fa6e 	bl	8000474 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fdf6 	bl	8004b8c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <xTaskGenericNotify+0x1cc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	4a1b      	ldr	r2, [pc, #108]	; (800201c <xTaskGenericNotify+0x1cc>)
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <xTaskGenericNotify+0x1d0>)
 8001fc0:	441a      	add	r2, r3
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f7fe f9f6 	bl	80003ba <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <xTaskGenericNotify+0x19a>
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e7fe      	b.n	8001fe8 <xTaskGenericNotify+0x198>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <xTaskGenericNotify+0x1d4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d907      	bls.n	8002008 <xTaskGenericNotify+0x1b8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <xTaskGenericNotify+0x1d8>)
 8001ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002008:	f000 fe58 	bl	8002cbc <vPortExitCritical>

        return xReturn;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800200e:	4618      	mov	r0, r3
 8002010:	3730      	adds	r7, #48	; 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000027c 	.word	0x2000027c
 800201c:	20000280 	.word	0x20000280
 8002020:	200001a4 	.word	0x200001a4
 8002024:	200001a0 	.word	0x200001a0
 8002028:	e000ed04 	.word	0xe000ed04

0800202c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800202c:	b580      	push	{r7, lr}
 800202e:	b092      	sub	sp, #72	; 0x48
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800203a:	2301      	movs	r3, #1
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <xTaskGenericNotifyFromISR+0x2c>
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002056:	e7fe      	b.n	8002056 <xTaskGenericNotifyFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <xTaskGenericNotifyFromISR+0x46>
 800205e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002062:	f383 8811 	msr	BASEPRI, r3
 8002066:	f3bf 8f6f 	isb	sy
 800206a:	f3bf 8f4f 	dsb	sy
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002070:	e7fe      	b.n	8002070 <xTaskGenericNotifyFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002072:	f000 fed9 	bl	8002e28 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800207a:	f3ef 8211 	mrs	r2, BASEPRI
 800207e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	627a      	str	r2, [r7, #36]	; 0x24
 8002090:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8002096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <xTaskGenericNotifyFromISR+0x7e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	3214      	adds	r2, #20
 80020a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80020aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	3354      	adds	r3, #84	; 0x54
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80020b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	4413      	add	r3, r2
 80020be:	3354      	adds	r3, #84	; 0x54
 80020c0:	2202      	movs	r2, #2
 80020c2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d83b      	bhi.n	8002142 <xTaskGenericNotifyFromISR+0x116>
 80020ca:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <xTaskGenericNotifyFromISR+0xa4>)
 80020cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d0:	0800215f 	.word	0x0800215f
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	08002101 	.word	0x08002101
 80020dc:	08002119 	.word	0x08002119
 80020e0:	08002127 	.word	0x08002127
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80020e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	3214      	adds	r2, #20
 80020ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	3214      	adds	r2, #20
 80020fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80020fe:	e031      	b.n	8002164 <xTaskGenericNotifyFromISR+0x138>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	3214      	adds	r2, #20
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	1c59      	adds	r1, r3, #1
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	3214      	adds	r2, #20
 8002112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002116:	e025      	b.n	8002164 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	3214      	adds	r2, #20
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002124:	e01e      	b.n	8002164 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800212a:	2b02      	cmp	r3, #2
 800212c:	d006      	beq.n	800213c <xTaskGenericNotifyFromISR+0x110>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	3214      	adds	r2, #20
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800213a:	e013      	b.n	8002164 <xTaskGenericNotifyFromISR+0x138>
                        xReturn = pdFAIL;
 800213c:	2300      	movs	r3, #0
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8002140:	e010      	b.n	8002164 <xTaskGenericNotifyFromISR+0x138>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <xTaskGenericNotifyFromISR+0x204>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <xTaskGenericNotifyFromISR+0x136>
        __asm volatile
 800214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214e:	f383 8811 	msr	BASEPRI, r3
 8002152:	f3bf 8f6f 	isb	sy
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e7fe      	b.n	800215c <xTaskGenericNotifyFromISR+0x130>
                    break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <xTaskGenericNotifyFromISR+0x138>
                    break;
 8002162:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fdb2 	bl	8004cd0 <SEGGER_SYSVIEW_ShrinkId>
 800216c:	78f9      	ldrb	r1, [r7, #3]
 800216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002172:	9201      	str	r2, [sp, #4]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	460b      	mov	r3, r1
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4601      	mov	r1, r0
 800217c:	203f      	movs	r0, #63	; 0x3f
 800217e:	f002 f877 	bl	8004270 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002186:	2b01      	cmp	r3, #1
 8002188:	d148      	bne.n	800221c <xTaskGenericNotifyFromISR+0x1f0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <xTaskGenericNotifyFromISR+0x17a>
 8002192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	f3bf 8f6f 	isb	sy
 800219e:	f3bf 8f4f 	dsb	sy
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	e7fe      	b.n	80021a4 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <xTaskGenericNotifyFromISR+0x208>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d120      	bne.n	80021f0 <xTaskGenericNotifyFromISR+0x1c4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b0:	3304      	adds	r3, #4
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f95e 	bl	8000474 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fce6 	bl	8004b8c <SEGGER_SYSVIEW_OnTaskStartReady>
 80021c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	2201      	movs	r2, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <xTaskGenericNotifyFromISR+0x20c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <xTaskGenericNotifyFromISR+0x20c>)
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <xTaskGenericNotifyFromISR+0x210>)
 80021e0:	441a      	add	r2, r3
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	3304      	adds	r3, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7fe f8e6 	bl	80003ba <vListInsertEnd>
 80021ee:	e005      	b.n	80021fc <xTaskGenericNotifyFromISR+0x1d0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80021f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f2:	3318      	adds	r3, #24
 80021f4:	4619      	mov	r1, r3
 80021f6:	4812      	ldr	r0, [pc, #72]	; (8002240 <xTaskGenericNotifyFromISR+0x214>)
 80021f8:	f7fe f8df 	bl	80003ba <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <xTaskGenericNotifyFromISR+0x218>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d908      	bls.n	800221c <xTaskGenericNotifyFromISR+0x1f0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <xTaskGenericNotifyFromISR+0x1ea>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <xTaskGenericNotifyFromISR+0x21c>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f383 8811 	msr	BASEPRI, r3
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8002226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8002228:	4618      	mov	r0, r3
 800222a:	3740      	adds	r7, #64	; 0x40
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2000027c 	.word	0x2000027c
 8002234:	200002a0 	.word	0x200002a0
 8002238:	20000280 	.word	0x20000280
 800223c:	200001a4 	.word	0x200001a4
 8002240:	20000238 	.word	0x20000238
 8002244:	200001a0 	.word	0x200001a0
 8002248:	2000028c 	.word	0x2000028c

0800224c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3304      	adds	r3, #4
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f906 	bl	8000474 <uxListRemove>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	2201      	movs	r2, #1
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <prvAddCurrentTaskToDelayedList+0xdc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4013      	ands	r3, r2
 8002282:	4a29      	ldr	r2, [pc, #164]	; (8002328 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002284:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800228c:	d110      	bne.n	80022b0 <prvAddCurrentTaskToDelayedList+0x64>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
            	traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002294:	4b23      	ldr	r3, [pc, #140]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	211b      	movs	r1, #27
 800229a:	4618      	mov	r0, r3
 800229c:	f002 fcb8 	bl	8004c10 <SEGGER_SYSVIEW_OnTaskStopReady>
            	vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3304      	adds	r3, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4820      	ldr	r0, [pc, #128]	; (800232c <prvAddCurrentTaskToDelayedList+0xe0>)
 80022aa:	f7fe f886 	bl	80003ba <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80022ae:	e032      	b.n	8002316 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022b8:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d20f      	bcs.n	80022e8 <prvAddCurrentTaskToDelayedList+0x9c>
                	traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2104      	movs	r1, #4
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fc9e 	bl	8004c10 <SEGGER_SYSVIEW_OnTaskStopReady>
                	vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022d4:	4b16      	ldr	r3, [pc, #88]	; (8002330 <prvAddCurrentTaskToDelayedList+0xe4>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3304      	adds	r3, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f7fe f88e 	bl	8000402 <vListInsert>
}
 80022e6:	e016      	b.n	8002316 <prvAddCurrentTaskToDelayedList+0xca>
                	traceMOVED_TASK_TO_DELAYED_LIST();
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2104      	movs	r1, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fc8e 	bl	8004c10 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <prvAddCurrentTaskToDelayedList+0xe8>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <prvAddCurrentTaskToDelayedList+0xd8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3304      	adds	r3, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	4610      	mov	r0, r2
 8002302:	f7fe f87e 	bl	8000402 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <prvAddCurrentTaskToDelayedList+0xec>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d202      	bcs.n	8002316 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <prvAddCurrentTaskToDelayedList+0xec>)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000027c 	.word	0x2000027c
 8002324:	200001a0 	.word	0x200001a0
 8002328:	20000280 	.word	0x20000280
 800232c:	20000264 	.word	0x20000264
 8002330:	20000234 	.word	0x20000234
 8002334:	20000230 	.word	0x20000230
 8002338:	20000298 	.word	0x20000298

0800233c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002346:	f000 fb2d 	bl	80029a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <xTimerCreateTimerTask+0x54>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <xTimerCreateTimerTask+0x58>)
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	2302      	movs	r3, #2
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002360:	490d      	ldr	r1, [pc, #52]	; (8002398 <xTimerCreateTimerTask+0x5c>)
 8002362:	480e      	ldr	r0, [pc, #56]	; (800239c <xTimerCreateTimerTask+0x60>)
 8002364:	f7fe fe02 	bl	8000f6c <xTaskCreate>
 8002368:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	e7fe      	b.n	8002382 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002384:	687b      	ldr	r3, [r7, #4]
    }
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200002d4 	.word	0x200002d4
 8002394:	200002d8 	.word	0x200002d8
 8002398:	08006bc4 	.word	0x08006bc4
 800239c:	08002589 	.word	0x08002589

080023a0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80023ae:	202c      	movs	r0, #44	; 0x2c
 80023b0:	f000 fd78 	bl	8002ea4 <pvPortMalloc>
 80023b4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f805 	bl	80023e2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80023d8:	697b      	ldr	r3, [r7, #20]
        }
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <prvInitialiseNewTimer+0x28>
 80023f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fa:	f383 8811 	msr	BASEPRI, r3
 80023fe:	f3bf 8f6f 	isb	sy
 8002402:	f3bf 8f4f 	dsb	sy
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e7fe      	b.n	8002408 <prvInitialiseNewTimer+0x26>

        if( pxNewTimer != NULL )
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01e      	beq.n	800244e <prvInitialiseNewTimer+0x6c>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8002410:	f000 fac8 	bl	80029a4 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3304      	adds	r3, #4
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd ffb5 	bl	80003a0 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <prvInitialiseNewTimer+0x6c>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	b2da      	uxtb	r2, r3
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <xTimerGenericCommand+0x2c>
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	e7fe      	b.n	8002482 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <xTimerGenericCommand+0x94>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02a      	beq.n	80024e2 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b05      	cmp	r3, #5
 800249c:	dc18      	bgt.n	80024d0 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800249e:	f7ff fbb3 	bl	8001c08 <xTaskGetSchedulerState>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d109      	bne.n	80024bc <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <xTimerGenericCommand+0x94>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	f107 0114 	add.w	r1, r7, #20
 80024b0:	2300      	movs	r3, #0
 80024b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b4:	f7fe f8f6 	bl	80006a4 <xQueueGenericSend>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24
 80024ba:	e012      	b.n	80024e2 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80024bc:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <xTimerGenericCommand+0x94>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	f107 0114 	add.w	r1, r7, #20
 80024c4:	2300      	movs	r3, #0
 80024c6:	2200      	movs	r2, #0
 80024c8:	f7fe f8ec 	bl	80006a4 <xQueueGenericSend>
 80024cc:	6278      	str	r0, [r7, #36]	; 0x24
 80024ce:	e008      	b.n	80024e2 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <xTimerGenericCommand+0x94>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	f107 0114 	add.w	r1, r7, #20
 80024d8:	2300      	movs	r3, #0
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	f7fe fa04 	bl	80008e8 <xQueueGenericSendFromISR>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024e4:	4618      	mov	r0, r3
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200002d4 	.word	0x200002d4

080024f0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024fa:	4b22      	ldr	r3, [pc, #136]	; (8002584 <prvProcessExpiredTimer+0x94>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3304      	adds	r3, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd ffb3 	bl	8000474 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d021      	beq.n	8002560 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	699a      	ldr	r2, [r3, #24]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	18d1      	adds	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6978      	ldr	r0, [r7, #20]
 800252a:	f000 f8d1 	bl	80026d0 <prvInsertTimerInActiveList>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01e      	beq.n	8002572 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	2100      	movs	r1, #0
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8a 	bl	8002458 <xTimerGenericCommand>
 8002544:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d112      	bne.n	8002572 <prvProcessExpiredTimer+0x82>
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e7fe      	b.n	800255e <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	4798      	blx	r3
    }
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200002cc 	.word	0x200002cc

08002588 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002590:	f107 0308 	add.w	r3, r7, #8
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f857 	bl	8002648 <prvGetNextExpireTime>
 800259a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4619      	mov	r1, r3
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f803 	bl	80025ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80025a6:	f000 f8d5 	bl	8002754 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80025aa:	e7f1      	b.n	8002590 <prvTimerTask+0x8>

080025ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80025b6:	f7fe ff43 	bl	8001440 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f866 	bl	8002690 <prvSampleTimeNow>
 80025c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d130      	bne.n	800262e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <prvProcessTimerOrBlockTask+0x3c>
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d806      	bhi.n	80025e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80025da:	f7fe ff3f 	bl	800145c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff85 	bl	80024f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80025e6:	e024      	b.n	8002632 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <prvProcessTimerOrBlockTask+0x90>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <prvProcessTimerOrBlockTask+0x50>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <prvProcessTimerOrBlockTask+0x52>
 80025fc:	2300      	movs	r3, #0
 80025fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <prvProcessTimerOrBlockTask+0x94>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fc79 	bl	8000f04 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002612:	f7fe ff23 	bl	800145c <xTaskResumeAll>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <prvProcessTimerOrBlockTask+0x98>)
 800261e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	f3bf 8f6f 	isb	sy
    }
 800262c:	e001      	b.n	8002632 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800262e:	f7fe ff15 	bl	800145c <xTaskResumeAll>
    }
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002d0 	.word	0x200002d0
 8002640:	200002d4 	.word	0x200002d4
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002650:	4b0e      	ldr	r3, [pc, #56]	; (800268c <prvGetNextExpireTime+0x44>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <prvGetNextExpireTime+0x16>
 800265a:	2201      	movs	r2, #1
 800265c:	e000      	b.n	8002660 <prvGetNextExpireTime+0x18>
 800265e:	2200      	movs	r2, #0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <prvGetNextExpireTime+0x44>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e001      	b.n	800267c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800267c:	68fb      	ldr	r3, [r7, #12]
    }
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200002cc 	.word	0x200002cc

08002690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002698:	f7fe ff80 	bl	800159c <xTaskGetTickCount>
 800269c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <prvSampleTimeNow+0x3c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d205      	bcs.n	80026b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80026a8:	f000 f918 	bl	80028dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e002      	b.n	80026ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80026ba:	4a04      	ldr	r2, [pc, #16]	; (80026cc <prvSampleTimeNow+0x3c>)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80026c0:	68fb      	ldr	r3, [r7, #12]
    }
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200002dc 	.word	0x200002dc

080026d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d812      	bhi.n	800271c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	429a      	cmp	r2, r3
 8002702:	d302      	bcc.n	800270a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002704:	2301      	movs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e01b      	b.n	8002742 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <prvInsertTimerInActiveList+0x7c>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3304      	adds	r3, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f7fd fe74 	bl	8000402 <vListInsert>
 800271a:	e012      	b.n	8002742 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d206      	bcs.n	8002732 <prvInsertTimerInActiveList+0x62>
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d302      	bcc.n	8002732 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800272c:	2301      	movs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	e007      	b.n	8002742 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <prvInsertTimerInActiveList+0x80>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3304      	adds	r3, #4
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f7fd fe60 	bl	8000402 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002742:	697b      	ldr	r3, [r7, #20]
    }
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200002d0 	.word	0x200002d0
 8002750:	200002cc 	.word	0x200002cc

08002754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	; 0x30
 8002758:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800275a:	e0ac      	b.n	80028b6 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f2c0 80a8 	blt.w	80028b4 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	3304      	adds	r3, #4
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fe7d 	bl	8000474 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff87 	bl	8002690 <prvSampleTimeNow>
 8002782:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b09      	cmp	r3, #9
 8002788:	f200 8095 	bhi.w	80028b6 <prvProcessReceivedCommands+0x162>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <prvProcessReceivedCommands+0x40>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027bd 	.word	0x080027bd
 8002798:	080027bd 	.word	0x080027bd
 800279c:	080027bd 	.word	0x080027bd
 80027a0:	0800282f 	.word	0x0800282f
 80027a4:	08002843 	.word	0x08002843
 80027a8:	0800288b 	.word	0x0800288b
 80027ac:	080027bd 	.word	0x080027bd
 80027b0:	080027bd 	.word	0x080027bd
 80027b4:	0800282f 	.word	0x0800282f
 80027b8:	08002843 	.word	0x08002843
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	18d1      	adds	r1, r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027dc:	f7ff ff78 	bl	80026d0 <prvInsertTimerInActiveList>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d067      	beq.n	80028b6 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ec:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d05c      	beq.n	80028b6 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	441a      	add	r2, r3
 8002804:	2300      	movs	r3, #0
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2100      	movs	r1, #0
 800280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800280e:	f7ff fe23 	bl	8002458 <xTimerGenericCommand>
 8002812:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d14d      	bne.n	80028b6 <prvProcessReceivedCommands+0x162>
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	e7fe      	b.n	800282c <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	b2da      	uxtb	r2, r3
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002840:	e039      	b.n	80028b6 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	b2da      	uxtb	r2, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <prvProcessReceivedCommands+0x122>
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e7fe      	b.n	8002874 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	18d1      	adds	r1, r2, r3
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002884:	f7ff ff24 	bl	80026d0 <prvInsertTimerInActiveList>
                        break;
 8002888:	e015      	b.n	80028b6 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800289a:	f000 fbdf 	bl	800305c <vPortFree>
 800289e:	e00a      	b.n	80028b6 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80028b2:	e000      	b.n	80028b6 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80028b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <prvProcessReceivedCommands+0x184>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f107 0108 	add.w	r1, r7, #8
 80028be:	2200      	movs	r2, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe f8cb 	bl	8000a5c <xQueueReceive>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f af47 	bne.w	800275c <prvProcessReceivedCommands+0x8>
        }
    }
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200002d4 	.word	0x200002d4

080028dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028e2:	e047      	b.n	8002974 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <prvSwitchTimerLists+0xc0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <prvSwitchTimerLists+0xc0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fdb9 	bl	8000474 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02d      	beq.n	8002974 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	429a      	cmp	r2, r3
 8002928:	d90e      	bls.n	8002948 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <prvSwitchTimerLists+0xc0>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3304      	adds	r3, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f7fd fd5e 	bl	8000402 <vListInsert>
 8002946:	e015      	b.n	8002974 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002948:	2300      	movs	r3, #0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2300      	movs	r3, #0
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	2100      	movs	r1, #0
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff fd80 	bl	8002458 <xTimerGenericCommand>
 8002958:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d109      	bne.n	8002974 <prvSwitchTimerLists+0x98>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	e7fe      	b.n	8002972 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <prvSwitchTimerLists+0xc0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1b2      	bne.n	80028e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <prvSwitchTimerLists+0xc0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <prvSwitchTimerLists+0xc4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <prvSwitchTimerLists+0xc0>)
 800298a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800298c:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <prvSwitchTimerLists+0xc4>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	6013      	str	r3, [r2, #0]
    }
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200002cc 	.word	0x200002cc
 80029a0:	200002d0 	.word	0x200002d0

080029a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80029a8:	f000 f95a 	bl	8002c60 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <prvCheckForValidListAndQueue+0x54>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11d      	bne.n	80029f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80029b4:	4811      	ldr	r0, [pc, #68]	; (80029fc <prvCheckForValidListAndQueue+0x58>)
 80029b6:	f7fd fcd3 	bl	8000360 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80029ba:	4811      	ldr	r0, [pc, #68]	; (8002a00 <prvCheckForValidListAndQueue+0x5c>)
 80029bc:	f7fd fcd0 	bl	8000360 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80029c0:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <prvCheckForValidListAndQueue+0x60>)
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <prvCheckForValidListAndQueue+0x58>)
 80029c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <prvCheckForValidListAndQueue+0x64>)
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <prvCheckForValidListAndQueue+0x5c>)
 80029ca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80029cc:	2200      	movs	r2, #0
 80029ce:	210c      	movs	r1, #12
 80029d0:	200a      	movs	r0, #10
 80029d2:	f7fd fde1 	bl	8000598 <xQueueGenericCreate>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <prvCheckForValidListAndQueue+0x54>)
 80029da:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <prvCheckForValidListAndQueue+0x54>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <prvCheckForValidListAndQueue+0x54>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4908      	ldr	r1, [pc, #32]	; (8002a0c <prvCheckForValidListAndQueue+0x68>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fa5a 	bl	8000ea4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80029f0:	f000 f964 	bl	8002cbc <vPortExitCritical>
    }
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200002d4 	.word	0x200002d4
 80029fc:	200002a4 	.word	0x200002a4
 8002a00:	200002b8 	.word	0x200002b8
 8002a04:	200002cc 	.word	0x200002cc
 8002a08:	200002d0 	.word	0x200002d0
 8002a0c:	08006bcc 	.word	0x08006bcc

08002a10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3b04      	subs	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	3b04      	subs	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <pxPortInitialiseStack+0x64>)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b14      	subs	r3, #20
 8002a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3b04      	subs	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f06f 0202 	mvn.w	r2, #2
 8002a5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b20      	subs	r3, #32
 8002a64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	08002a79 	.word	0x08002a79

08002a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <prvTaskExitError+0x50>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a8a:	d009      	beq.n	8002aa0 <prvTaskExitError+0x28>
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	e7fe      	b.n	8002a9e <prvTaskExitError+0x26>
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002ab2:	bf00      	nop
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0fc      	beq.n	8002ab4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000004 	.word	0x20000004
 8002acc:	00000000 	.word	0x00000000

08002ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <pxCurrentTCBConst2>)
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	6808      	ldr	r0, [r1, #0]
 8002ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ada:	f380 8809 	msr	PSP, r0
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f380 8811 	msr	BASEPRI, r0
 8002aea:	4770      	bx	lr
 8002aec:	f3af 8000 	nop.w

08002af0 <pxCurrentTCBConst2>:
 8002af0:	200001a0 	.word	0x200001a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop

08002af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <prvPortStartFirstTask+0x24>)
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	6800      	ldr	r0, [r0, #0]
 8002afe:	f380 8808 	msr	MSP, r0
 8002b02:	f04f 0000 	mov.w	r0, #0
 8002b06:	f380 8814 	msr	CONTROL, r0
 8002b0a:	b662      	cpsie	i
 8002b0c:	b661      	cpsie	f
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	df00      	svc	0
 8002b18:	bf00      	nop
 8002b1a:	0000      	.short	0x0000
 8002b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002b20:	bf00      	nop
 8002b22:	bf00      	nop

08002b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002b2a:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <xPortStartScheduler+0x118>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a44      	ldr	r2, [pc, #272]	; (8002c40 <xPortStartScheduler+0x11c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d109      	bne.n	8002b48 <xPortStartScheduler+0x24>
 8002b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	e7fe      	b.n	8002b46 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b48:	4b3c      	ldr	r3, [pc, #240]	; (8002c3c <xPortStartScheduler+0x118>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3d      	ldr	r2, [pc, #244]	; (8002c44 <xPortStartScheduler+0x120>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d109      	bne.n	8002b66 <xPortStartScheduler+0x42>
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e7fe      	b.n	8002b64 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <xPortStartScheduler+0x124>)
 8002b68:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	22ff      	movs	r2, #255	; 0xff
 8002b76:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <xPortStartScheduler+0x128>)
 8002b8c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b94:	e009      	b.n	8002baa <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	4a2c      	ldr	r2, [pc, #176]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002b9e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d0ef      	beq.n	8002b96 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d009      	beq.n	8002bd6 <xPortStartScheduler+0xb2>
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	e7fe      	b.n	8002bd4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002bde:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <xPortStartScheduler+0x12c>)
 8002bea:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <xPortStartScheduler+0x130>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <xPortStartScheduler+0x130>)
 8002bfa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <xPortStartScheduler+0x130>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a13      	ldr	r2, [pc, #76]	; (8002c54 <xPortStartScheduler+0x130>)
 8002c06:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c0c:	f000 f8dc 	bl	8002dc8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <xPortStartScheduler+0x134>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c16:	f000 f8fb 	bl	8002e10 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <xPortStartScheduler+0x138>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <xPortStartScheduler+0x138>)
 8002c20:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c24:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c26:	f7ff ff67 	bl	8002af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c2a:	f7fe fd95 	bl	8001758 <vTaskSwitchContext>
    prvTaskExitError();
 8002c2e:	f7ff ff23 	bl	8002a78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	e000ed00 	.word	0xe000ed00
 8002c40:	410fc271 	.word	0x410fc271
 8002c44:	410fc270 	.word	0x410fc270
 8002c48:	e000e400 	.word	0xe000e400
 8002c4c:	200002e0 	.word	0x200002e0
 8002c50:	200002e4 	.word	0x200002e4
 8002c54:	e000ed20 	.word	0xe000ed20
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	e000ef34 	.word	0xe000ef34

08002c60 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <vPortEnterCritical+0x54>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <vPortEnterCritical+0x54>)
 8002c80:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <vPortEnterCritical+0x54>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10e      	bne.n	8002ca8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <vPortEnterCritical+0x58>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <vPortEnterCritical+0x48>
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	e7fe      	b.n	8002ca6 <vPortEnterCritical+0x46>
    }
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	20000004 	.word	0x20000004
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <vPortExitCritical+0x4c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <vPortExitCritical+0x22>
 8002cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	e7fe      	b.n	8002cdc <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <vPortExitCritical+0x4c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <vPortExitCritical+0x4c>)
 8002ce6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <vPortExitCritical+0x4c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <vPortExitCritical+0x3e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	00000000 	.word	0x00000000

08002d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d10:	f3ef 8009 	mrs	r0, PSP
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <pxCurrentTCBConst>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f01e 0f10 	tst.w	lr, #16
 8002d20:	bf08      	it	eq
 8002d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	6010      	str	r0, [r2, #0]
 8002d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d34:	f380 8811 	msr	BASEPRI, r0
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f7fe fd0a 	bl	8001758 <vTaskSwitchContext>
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f380 8811 	msr	BASEPRI, r0
 8002d4c:	bc09      	pop	{r0, r3}
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	6808      	ldr	r0, [r1, #0]
 8002d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d56:	f01e 0f10 	tst.w	lr, #16
 8002d5a:	bf08      	it	eq
 8002d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d60:	f380 8809 	msr	PSP, r0
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	f3af 8000 	nop.w

08002d70 <pxCurrentTCBConst>:
 8002d70:	200001a0 	.word	0x200001a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop

08002d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8002d90:	f001 fde2 	bl	8004958 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002d94:	f7fe fc24 	bl	80015e0 <xTaskIncrementTick>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <SysTick_Handler+0x34>
        {
        	traceISR_EXIT_TO_SCHEDULER();
 8002d9e:	f001 fe39 	bl	8004a14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
        	/* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <SysTick_Handler+0x4c>)
 8002da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e001      	b.n	8002db0 <SysTick_Handler+0x38>
        }
        else{
        	traceISR_EXIT();
 8002dac:	f001 fe16 	bl	80049dc <SEGGER_SYSVIEW_RecordExitISR>
 8002db0:	2300      	movs	r3, #0
 8002db2:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	e000ed04 	.word	0xe000ed04

08002dc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <vPortSetupTimerInterrupt+0x34>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <vPortSetupTimerInterrupt+0x38>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <vPortSetupTimerInterrupt+0x3c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <vPortSetupTimerInterrupt+0x40>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <vPortSetupTimerInterrupt+0x44>)
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <vPortSetupTimerInterrupt+0x34>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010
 8002e00:	e000e018 	.word	0xe000e018
 8002e04:	2000010c 	.word	0x2000010c
 8002e08:	10624dd3 	.word	0x10624dd3
 8002e0c:	e000e014 	.word	0xe000e014

08002e10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e20 <vPortEnableVFP+0x10>
 8002e14:	6801      	ldr	r1, [r0, #0]
 8002e16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e1a:	6001      	str	r1, [r0, #0]
 8002e1c:	4770      	bx	lr
 8002e1e:	0000      	.short	0x0000
 8002e20:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop

08002e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002e2e:	f3ef 8305 	mrs	r3, IPSR
 8002e32:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b0f      	cmp	r3, #15
 8002e38:	d913      	bls.n	8002e62 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e3a:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <vPortValidateInterruptPriority+0x6c>)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <vPortValidateInterruptPriority+0x70>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	7afa      	ldrb	r2, [r7, #11]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d209      	bcs.n	8002e62 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	e7fe      	b.n	8002e60 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <vPortValidateInterruptPriority+0x74>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <vPortValidateInterruptPriority+0x78>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d909      	bls.n	8002e86 <vPortValidateInterruptPriority+0x5e>
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	e7fe      	b.n	8002e84 <vPortValidateInterruptPriority+0x5c>
    }
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e3f0 	.word	0xe000e3f0
 8002e98:	200002e0 	.word	0x200002e0
 8002e9c:	e000ed0c 	.word	0xe000ed0c
 8002ea0:	200002e4 	.word	0x200002e4

08002ea4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002eb0:	f7fe fac6 	bl	8001440 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002eb4:	4b63      	ldr	r3, [pc, #396]	; (8003044 <pvPortMalloc+0x1a0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002ebc:	f000 f92e 	bl	800311c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <pvPortMalloc+0x1a4>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f040 80a5 	bne.w	8003018 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02c      	beq.n	8002f2e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d226      	bcs.n	8002f2e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d020      	beq.n	8002f34 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f023 0307 	bic.w	r3, r3, #7
 8002ef8:	3308      	adds	r3, #8
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d213      	bcs.n	8002f28 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f023 0307 	bic.w	r3, r3, #7
 8002f06:	3308      	adds	r3, #8
 8002f08:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00f      	beq.n	8002f34 <pvPortMalloc+0x90>
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e7fe      	b.n	8002f26 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f2c:	e002      	b.n	8002f34 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	e000      	b.n	8002f36 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f34:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d06d      	beq.n	8003018 <pvPortMalloc+0x174>
 8002f3c:	4b43      	ldr	r3, [pc, #268]	; (800304c <pvPortMalloc+0x1a8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d868      	bhi.n	8003018 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f46:	4b42      	ldr	r3, [pc, #264]	; (8003050 <pvPortMalloc+0x1ac>)
 8002f48:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <pvPortMalloc+0x1ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f50:	e004      	b.n	8002f5c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d903      	bls.n	8002f6e <pvPortMalloc+0xca>
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f1      	bne.n	8002f52 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f6e:	4b35      	ldr	r3, [pc, #212]	; (8003044 <pvPortMalloc+0x1a0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d04f      	beq.n	8003018 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	4413      	add	r3, r2
 8002f80:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	1ad2      	subs	r2, r2, r3
 8002f92:	2308      	movs	r3, #8
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d91e      	bls.n	8002fd8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d009      	beq.n	8002fc0 <pvPortMalloc+0x11c>
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e7fe      	b.n	8002fbe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad2      	subs	r2, r2, r3
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fd2:	69b8      	ldr	r0, [r7, #24]
 8002fd4:	f000 f904 	bl	80031e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <pvPortMalloc+0x1a8>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	4a1a      	ldr	r2, [pc, #104]	; (800304c <pvPortMalloc+0x1a8>)
 8002fe4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fe6:	4b19      	ldr	r3, [pc, #100]	; (800304c <pvPortMalloc+0x1a8>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <pvPortMalloc+0x1b0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d203      	bcs.n	8002ffa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <pvPortMalloc+0x1a8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a17      	ldr	r2, [pc, #92]	; (8003054 <pvPortMalloc+0x1b0>)
 8002ff8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <pvPortMalloc+0x1a4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	431a      	orrs	r2, r3
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <pvPortMalloc+0x1b4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a10      	ldr	r2, [pc, #64]	; (8003058 <pvPortMalloc+0x1b4>)
 8003016:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003018:	f7fe fa20 	bl	800145c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <pvPortMalloc+0x196>
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e7fe      	b.n	8003038 <pvPortMalloc+0x194>
    return pvReturn;
 800303a:	69fb      	ldr	r3, [r7, #28]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20012ef0 	.word	0x20012ef0
 8003048:	20012f04 	.word	0x20012f04
 800304c:	20012ef4 	.word	0x20012ef4
 8003050:	20012ee8 	.word	0x20012ee8
 8003054:	20012ef8 	.word	0x20012ef8
 8003058:	20012efc 	.word	0x20012efc

0800305c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d04b      	beq.n	8003106 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800306e:	2308      	movs	r3, #8
 8003070:	425b      	negs	r3, r3
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4413      	add	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <vPortFree+0xb4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <vPortFree+0x42>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e7fe      	b.n	800309c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <vPortFree+0x5e>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	e7fe      	b.n	80030b8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <vPortFree+0xb4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01e      	beq.n	8003106 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11a      	bne.n	8003106 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <vPortFree+0xb4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	43db      	mvns	r3, r3
 80030da:	401a      	ands	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80030e0:	f7fe f9ae 	bl	8001440 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <vPortFree+0xb8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	4a09      	ldr	r2, [pc, #36]	; (8003114 <vPortFree+0xb8>)
 80030f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030f2:	6938      	ldr	r0, [r7, #16]
 80030f4:	f000 f874 	bl	80031e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <vPortFree+0xbc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	4a06      	ldr	r2, [pc, #24]	; (8003118 <vPortFree+0xbc>)
 8003100:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003102:	f7fe f9ab 	bl	800145c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20012f04 	.word	0x20012f04
 8003114:	20012ef4 	.word	0x20012ef4
 8003118:	20012f00 	.word	0x20012f00

0800311c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003122:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003126:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <prvHeapInit+0xac>)
 800312a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3307      	adds	r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0307 	bic.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <prvHeapInit+0xac>)
 800314c:	4413      	add	r3, r2
 800314e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <prvHeapInit+0xb0>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <prvHeapInit+0xb0>)
 800315c:	2200      	movs	r2, #0
 800315e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	4413      	add	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003168:	2208      	movs	r2, #8
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0307 	bic.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <prvHeapInit+0xb4>)
 800317c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <prvHeapInit+0xb4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2200      	movs	r2, #0
 8003184:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003186:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <prvHeapInit+0xb4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <prvHeapInit+0xb4>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <prvHeapInit+0xb8>)
 80031aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <prvHeapInit+0xbc>)
 80031b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <prvHeapInit+0xc0>)
 80031b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031ba:	601a      	str	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	200002e8 	.word	0x200002e8
 80031cc:	20012ee8 	.word	0x20012ee8
 80031d0:	20012ef0 	.word	0x20012ef0
 80031d4:	20012ef8 	.word	0x20012ef8
 80031d8:	20012ef4 	.word	0x20012ef4
 80031dc:	20012f04 	.word	0x20012f04

080031e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <prvInsertBlockIntoFreeList+0xac>)
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	e002      	b.n	80031f4 <prvInsertBlockIntoFreeList+0x14>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d8f7      	bhi.n	80031ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4413      	add	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d108      	bne.n	8003222 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	441a      	add	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d118      	bne.n	8003268 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <prvInsertBlockIntoFreeList+0xb0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d00d      	beq.n	800325e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e008      	b.n	8003270 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <prvInsertBlockIntoFreeList+0xb0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e003      	b.n	8003270 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d002      	beq.n	800327e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20012ee8 	.word	0x20012ee8
 8003290:	20012ef0 	.word	0x20012ef0

08003294 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003298:	4803      	ldr	r0, [pc, #12]	; (80032a8 <_cbSendSystemDesc+0x14>)
 800329a:	f001 fb09 	bl	80048b0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800329e:	4803      	ldr	r0, [pc, #12]	; (80032ac <_cbSendSystemDesc+0x18>)
 80032a0:	f001 fb06 	bl	80048b0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	08006bd4 	.word	0x08006bd4
 80032ac:	08006c10 	.word	0x08006c10

080032b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80032c0:	f000 fdc6 	bl	8003e50 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80032c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80032c8:	f000 fe06 	bl	8003ed8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	2000010c 	.word	0x2000010c
 80032d4:	08003295 	.word	0x08003295
 80032d8:	08006d60 	.word	0x08006d60

080032dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80032dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032de:	b085      	sub	sp, #20
 80032e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	e034      	b.n	8003352 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80032e8:	491e      	ldr	r1, [pc, #120]	; (8003364 <_cbSendTaskList+0x88>)
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	491a      	ldr	r1, [pc, #104]	; (8003364 <_cbSendTaskList+0x88>)
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3304      	adds	r3, #4
 8003308:	681c      	ldr	r4, [r3, #0]
 800330a:	4916      	ldr	r1, [pc, #88]	; (8003364 <_cbSendTaskList+0x88>)
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3308      	adds	r3, #8
 800331a:	681d      	ldr	r5, [r3, #0]
 800331c:	4911      	ldr	r1, [pc, #68]	; (8003364 <_cbSendTaskList+0x88>)
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	330c      	adds	r3, #12
 800332c:	681e      	ldr	r6, [r3, #0]
 800332e:	490d      	ldr	r1, [pc, #52]	; (8003364 <_cbSendTaskList+0x88>)
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3310      	adds	r3, #16
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	4633      	mov	r3, r6
 8003344:	462a      	mov	r2, r5
 8003346:	4621      	mov	r1, r4
 8003348:	f000 f970 	bl	800362c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3301      	adds	r3, #1
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <_cbSendTaskList+0x8c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3c5      	bcc.n	80032e8 <_cbSendTaskList+0xc>
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003364:	20012f08 	.word	0x20012f08
 8003368:	20012fa8 	.word	0x20012fa8

0800336c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003372:	f7fe f923 	bl	80015bc <xTaskGetTickCountFromISR>
 8003376:	4603      	mov	r3, r0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003380:	e9d7 5600 	ldrd	r5, r6, [r7]
 8003384:	462b      	mov	r3, r5
 8003386:	4634      	mov	r4, r6
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	0162      	lsls	r2, r4, #5
 8003392:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	460b      	mov	r3, r1
 800339a:	4614      	mov	r4, r2
 800339c:	1b5b      	subs	r3, r3, r5
 800339e:	eb64 0406 	sbc.w	r4, r4, r6
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	00a2      	lsls	r2, r4, #2
 80033ac:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80033b0:	0099      	lsls	r1, r3, #2
 80033b2:	460b      	mov	r3, r1
 80033b4:	4614      	mov	r4, r2
 80033b6:	195b      	adds	r3, r3, r5
 80033b8:	eb44 0406 	adc.w	r4, r4, r6
 80033bc:	f04f 0100 	mov.w	r1, #0
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	00e2      	lsls	r2, r4, #3
 80033c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ca:	00d9      	lsls	r1, r3, #3
 80033cc:	460b      	mov	r3, r1
 80033ce:	4614      	mov	r4, r2
 80033d0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80033d4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	4621      	mov	r1, r4
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080033e4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80033f2:	2205      	movs	r2, #5
 80033f4:	492b      	ldr	r1, [pc, #172]	; (80034a4 <SYSVIEW_AddTask+0xc0>)
 80033f6:	68b8      	ldr	r0, [r7, #8]
 80033f8:	f002 ffb6 	bl	8006368 <memcmp>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d04b      	beq.n	800349a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b07      	cmp	r3, #7
 8003408:	d903      	bls.n	8003412 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800340a:	4828      	ldr	r0, [pc, #160]	; (80034ac <SYSVIEW_AddTask+0xc8>)
 800340c:	f001 fd4c 	bl	8004ea8 <SEGGER_SYSVIEW_Warn>
    return;
 8003410:	e044      	b.n	800349c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003412:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4926      	ldr	r1, [pc, #152]	; (80034b0 <SYSVIEW_AddTask+0xcc>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4921      	ldr	r1, [pc, #132]	; (80034b0 <SYSVIEW_AddTask+0xcc>)
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3304      	adds	r3, #4
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	491b      	ldr	r1, [pc, #108]	; (80034b0 <SYSVIEW_AddTask+0xcc>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3308      	adds	r3, #8
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4916      	ldr	r1, [pc, #88]	; (80034b0 <SYSVIEW_AddTask+0xcc>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	330c      	adds	r3, #12
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4910      	ldr	r1, [pc, #64]	; (80034b0 <SYSVIEW_AddTask+0xcc>)
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3310      	adds	r3, #16
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	4a08      	ldr	r2, [pc, #32]	; (80034a8 <SYSVIEW_AddTask+0xc4>)
 8003486:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8ca 	bl	800362c <SYSVIEW_SendTaskInfo>
 8003498:	e000      	b.n	800349c <SYSVIEW_AddTask+0xb8>
    return;
 800349a:	bf00      	nop

}
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	08006c20 	.word	0x08006c20
 80034a8:	20012fa8 	.word	0x20012fa8
 80034ac:	08006c28 	.word	0x08006c28
 80034b0:	20012f08 	.word	0x20012f08

080034b4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80034bc:	4b59      	ldr	r3, [pc, #356]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80ab 	beq.w	800361c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	e00d      	b.n	80034e8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80034cc:	4956      	ldr	r1, [pc, #344]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d008      	beq.n	80034f4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	4b4e      	ldr	r3, [pc, #312]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d3ec      	bcc.n	80034cc <SYSVIEW_DeleteTask+0x18>
 80034f2:	e000      	b.n	80034f6 <SYSVIEW_DeleteTask+0x42>
      break;
 80034f4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80034f6:	4b4b      	ldr	r3, [pc, #300]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d111      	bne.n	8003526 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a46      	ldr	r2, [pc, #280]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 800350e:	4413      	add	r3, r2
 8003510:	2214      	movs	r2, #20
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f002 ff41 	bl	800639c <memset>
    _NumTasks--;
 800351a:	4b42      	ldr	r3, [pc, #264]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3b01      	subs	r3, #1
 8003520:	4a40      	ldr	r2, [pc, #256]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	e07b      	b.n	800361e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003526:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d276      	bcs.n	800361e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003530:	4b3c      	ldr	r3, [pc, #240]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	493c      	ldr	r1, [pc, #240]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	4838      	ldr	r0, [pc, #224]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003554:	4b33      	ldr	r3, [pc, #204]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	1e5a      	subs	r2, r3, #1
 800355a:	4933      	ldr	r1, [pc, #204]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3304      	adds	r3, #4
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	482f      	ldr	r0, [pc, #188]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4403      	add	r3, r0
 8003578:	3304      	adds	r3, #4
 800357a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	4929      	ldr	r1, [pc, #164]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3308      	adds	r3, #8
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	4825      	ldr	r0, [pc, #148]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4403      	add	r3, r0
 80035a0:	3308      	adds	r3, #8
 80035a2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80035a4:	4b1f      	ldr	r3, [pc, #124]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1e5a      	subs	r2, r3, #1
 80035aa:	491f      	ldr	r1, [pc, #124]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	330c      	adds	r3, #12
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	481b      	ldr	r0, [pc, #108]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4403      	add	r3, r0
 80035c8:	330c      	adds	r3, #12
 80035ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	4915      	ldr	r1, [pc, #84]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3310      	adds	r3, #16
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	4811      	ldr	r0, [pc, #68]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4403      	add	r3, r0
 80035f0:	3310      	adds	r3, #16
 80035f2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <SYSVIEW_DeleteTask+0x174>)
 8003604:	4413      	add	r3, r2
 8003606:	2214      	movs	r2, #20
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f002 fec6 	bl	800639c <memset>
    _NumTasks--;
 8003610:	4b04      	ldr	r3, [pc, #16]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	4a03      	ldr	r2, [pc, #12]	; (8003624 <SYSVIEW_DeleteTask+0x170>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e000      	b.n	800361e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 800361c:	bf00      	nop
  }
}
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20012fa8 	.word	0x20012fa8
 8003628:	20012f08 	.word	0x20012f08

0800362c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	2214      	movs	r2, #20
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f002 feaa 	bl	800639c <memset>
  TaskInfo.TaskID     = TaskID;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f82d 	bl	80046c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <_DoInit+0x98>)
 8003678:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2203      	movs	r2, #3
 800367e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2203      	movs	r2, #3
 8003684:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a20      	ldr	r2, [pc, #128]	; (800370c <_DoInit+0x9c>)
 800368a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a20      	ldr	r2, [pc, #128]	; (8003710 <_DoInit+0xa0>)
 8003690:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003698:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a17      	ldr	r2, [pc, #92]	; (800370c <_DoInit+0x9c>)
 80036b0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a17      	ldr	r2, [pc, #92]	; (8003714 <_DoInit+0xa4>)
 80036b6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2210      	movs	r2, #16
 80036bc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3307      	adds	r3, #7
 80036d4:	4a10      	ldr	r2, [pc, #64]	; (8003718 <_DoInit+0xa8>)
 80036d6:	6810      	ldr	r0, [r2, #0]
 80036d8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80036da:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a0e      	ldr	r2, [pc, #56]	; (800371c <_DoInit+0xac>)
 80036e2:	6810      	ldr	r0, [r2, #0]
 80036e4:	6018      	str	r0, [r3, #0]
 80036e6:	8891      	ldrh	r1, [r2, #4]
 80036e8:	7992      	ldrb	r2, [r2, #6]
 80036ea:	8099      	strh	r1, [r3, #4]
 80036ec:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80036ee:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80036f8:	f3bf 8f5f 	dmb	sy
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	20015d44 	.word	0x20015d44
 800370c:	08006c78 	.word	0x08006c78
 8003710:	20012fac 	.word	0x20012fac
 8003714:	200133ac 	.word	0x200133ac
 8003718:	08006c84 	.word	0x08006c84
 800371c:	08006c88 	.word	0x08006c88

08003720 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	; 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800372c:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <SEGGER_RTT_ReadNoLock+0x108>)
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <SEGGER_RTT_ReadNoLock+0x1e>
 800373a:	f7ff ff99 	bl	8003670 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	3360      	adds	r3, #96	; 0x60
 800374a:	4a37      	ldr	r2, [pc, #220]	; (8003828 <SEGGER_RTT_ReadNoLock+0x108>)
 800374c:	4413      	add	r3, r2
 800374e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	429a      	cmp	r2, r3
 800376a:	d92b      	bls.n	80037c4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4293      	cmp	r3, r2
 800377c:	bf28      	it	cs
 800377e:	4613      	movcs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	4413      	add	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6939      	ldr	r1, [r7, #16]
 8003790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003792:	f002 fdf8 	bl	8006386 <memcpy>
    NumBytesRead += NumBytesRem;
 8003796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	4413      	add	r3, r2
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4413      	add	r3, r2
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80037ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4413      	add	r3, r2
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037bc:	429a      	cmp	r2, r3
 80037be:	d101      	bne.n	80037c4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf28      	it	cs
 80037d4:	4613      	movcs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d019      	beq.n	8003812 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	4413      	add	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	6939      	ldr	r1, [r7, #16]
 80037ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ee:	f002 fdca 	bl	8006386 <memcpy>
    NumBytesRead += NumBytesRem;
 80037f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	4413      	add	r3, r2
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800380a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	4413      	add	r3, r2
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003820:	4618      	mov	r0, r3
 8003822:	3730      	adds	r7, #48	; 0x30
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20015d44 	.word	0x20015d44

0800382c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003848:	f7ff ff12 	bl	8003670 <_DoInit>
  SEGGER_RTT_LOCK();
 800384c:	f3ef 8311 	mrs	r3, BASEPRI
 8003850:	f04f 0120 	mov.w	r1, #32
 8003854:	f381 8811 	msr	BASEPRI, r1
 8003858:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800385a:	4b35      	ldr	r3, [pc, #212]	; (8003930 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800385c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	3304      	adds	r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	429a      	cmp	r2, r3
 8003888:	dbeb      	blt.n	8003862 <SEGGER_RTT_AllocUpBuffer+0x36>
 800388a:	e000      	b.n	800388e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800388c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	429a      	cmp	r2, r3
 8003896:	da3f      	bge.n	8003918 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003898:	6939      	ldr	r1, [r7, #16]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80038ac:	6939      	ldr	r1, [r7, #16]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	4613      	mov	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	440b      	add	r3, r1
 80038bc:	3304      	adds	r3, #4
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80038c2:	6939      	ldr	r1, [r7, #16]
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	4613      	mov	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	440b      	add	r3, r1
 80038d0:	3320      	adds	r3, #32
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80038d6:	6939      	ldr	r1, [r7, #16]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	4613      	mov	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	3328      	adds	r3, #40	; 0x28
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80038ea:	6939      	ldr	r1, [r7, #16]
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	4613      	mov	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	4413      	add	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	440b      	add	r3, r1
 80038f8:	3324      	adds	r3, #36	; 0x24
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80038fe:	6939      	ldr	r1, [r7, #16]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	4613      	mov	r3, r2
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	440b      	add	r3, r1
 800390c:	332c      	adds	r3, #44	; 0x2c
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003912:	f3bf 8f5f 	dmb	sy
 8003916:	e002      	b.n	800391e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003924:	69fb      	ldr	r3, [r7, #28]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20015d44 	.word	0x20015d44

08003934 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003942:	4b33      	ldr	r3, [pc, #204]	; (8003a10 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003950:	f7ff fe8e 	bl	8003670 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003954:	4b2e      	ldr	r3, [pc, #184]	; (8003a10 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003956:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	461a      	mov	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4293      	cmp	r3, r2
 8003962:	d24d      	bcs.n	8003a00 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003964:	f3ef 8311 	mrs	r3, BASEPRI
 8003968:	f04f 0120 	mov.w	r1, #32
 800396c:	f381 8811 	msr	BASEPRI, r1
 8003970:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d031      	beq.n	80039dc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003978:	6979      	ldr	r1, [r7, #20]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	440b      	add	r3, r1
 8003986:	3360      	adds	r3, #96	; 0x60
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	440b      	add	r3, r1
 800399a:	3364      	adds	r3, #100	; 0x64
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	3368      	adds	r3, #104	; 0x68
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80039b4:	6979      	ldr	r1, [r7, #20]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	440b      	add	r3, r1
 80039c2:	3370      	adds	r3, #112	; 0x70
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	440b      	add	r3, r1
 80039d6:	336c      	adds	r3, #108	; 0x6c
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80039dc:	6979      	ldr	r1, [r7, #20]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	440b      	add	r3, r1
 80039ea:	3374      	adds	r3, #116	; 0x74
 80039ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ee:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	e002      	b.n	8003a06 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a04:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003a06:	69fb      	ldr	r3, [r7, #28]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20015d44 	.word	0x20015d44

08003a14 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003a24:	e002      	b.n	8003a2c <_EncodeStr+0x18>
    Len++;
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f6      	bne.n	8003a26 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d901      	bls.n	8003a44 <_EncodeStr+0x30>
    Len = Limit;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2bfe      	cmp	r3, #254	; 0xfe
 8003a48:	d806      	bhi.n	8003a58 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	60fa      	str	r2, [r7, #12]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e011      	b.n	8003a7c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	60fa      	str	r2, [r7, #12]
 8003a5e:	22ff      	movs	r2, #255	; 0xff
 8003a60:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	60fa      	str	r2, [r7, #12]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	0a19      	lsrs	r1, r3, #8
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	60fa      	str	r2, [r7, #12]
 8003a78:	b2ca      	uxtb	r2, r1
 8003a7a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003a80:	e00a      	b.n	8003a98 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	1c53      	adds	r3, r2, #1
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	60f9      	str	r1, [r7, #12]
 8003a8e:	7812      	ldrb	r2, [r2, #0]
 8003a90:	701a      	strb	r2, [r3, #0]
    n++;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	3301      	adds	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3f0      	bcc.n	8003a82 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003ace:	4b33      	ldr	r3, [pc, #204]	; (8003b9c <_HandleIncomingPacket+0xd4>)
 8003ad0:	7e1b      	ldrb	r3, [r3, #24]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	1cfb      	adds	r3, r7, #3
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f7ff fe21 	bl	8003720 <SEGGER_RTT_ReadNoLock>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dd4d      	ble.n	8003b84 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d022      	beq.n	8003b34 <_HandleIncomingPacket+0x6c>
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	dc0b      	bgt.n	8003b0a <_HandleIncomingPacket+0x42>
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d015      	beq.n	8003b22 <_HandleIncomingPacket+0x5a>
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	dc02      	bgt.n	8003b00 <_HandleIncomingPacket+0x38>
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d00e      	beq.n	8003b1c <_HandleIncomingPacket+0x54>
 8003afe:	e034      	b.n	8003b6a <_HandleIncomingPacket+0xa2>
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d011      	beq.n	8003b28 <_HandleIncomingPacket+0x60>
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d012      	beq.n	8003b2e <_HandleIncomingPacket+0x66>
 8003b08:	e02f      	b.n	8003b6a <_HandleIncomingPacket+0xa2>
 8003b0a:	2b07      	cmp	r3, #7
 8003b0c:	d018      	beq.n	8003b40 <_HandleIncomingPacket+0x78>
 8003b0e:	2b07      	cmp	r3, #7
 8003b10:	db13      	blt.n	8003b3a <_HandleIncomingPacket+0x72>
 8003b12:	2b7f      	cmp	r3, #127	; 0x7f
 8003b14:	d038      	beq.n	8003b88 <_HandleIncomingPacket+0xc0>
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d015      	beq.n	8003b46 <_HandleIncomingPacket+0x7e>
 8003b1a:	e026      	b.n	8003b6a <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003b1c:	f000 fc56 	bl	80043cc <SEGGER_SYSVIEW_Start>
      break;
 8003b20:	e037      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003b22:	f000 fd0d 	bl	8004540 <SEGGER_SYSVIEW_Stop>
      break;
 8003b26:	e034      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003b28:	f000 fee6 	bl	80048f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003b2c:	e031      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003b2e:	f000 feab 	bl	8004888 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003b32:	e02e      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003b34:	f000 fd2a 	bl	800458c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003b38:	e02b      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003b3a:	f001 f977 	bl	8004e2c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003b3e:	e028      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003b40:	f001 f956 	bl	8004df0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003b44:	e025      	b.n	8003b92 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <_HandleIncomingPacket+0xd4>)
 8003b48:	7e1b      	ldrb	r3, [r3, #24]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	1cfb      	adds	r3, r7, #3
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4619      	mov	r1, r3
 8003b52:	f7ff fde5 	bl	8003720 <SEGGER_RTT_ReadNoLock>
 8003b56:	4603      	mov	r3, r0
 8003b58:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	dd15      	ble.n	8003b8c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f001 f8c4 	bl	8004cf0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003b68:	e010      	b.n	8003b8c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da0e      	bge.n	8003b90 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <_HandleIncomingPacket+0xd4>)
 8003b74:	7e1b      	ldrb	r3, [r3, #24]
 8003b76:	4618      	mov	r0, r3
 8003b78:	1cfb      	adds	r3, r7, #3
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7ff fdcf 	bl	8003720 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003b82:	e005      	b.n	8003b90 <_HandleIncomingPacket+0xc8>
    }
  }
 8003b84:	bf00      	nop
 8003b86:	e004      	b.n	8003b92 <_HandleIncomingPacket+0xca>
      break;
 8003b88:	bf00      	nop
 8003b8a:	e002      	b.n	8003b92 <_HandleIncomingPacket+0xca>
      break;
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <_HandleIncomingPacket+0xca>
      break;
 8003b90:	bf00      	nop
}
 8003b92:	bf00      	nop
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20015bc4 	.word	0x20015bc4

08003ba0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bba:	e00b      	b.n	8003bd4 <_TrySendOverflowPacket+0x34>
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	1c59      	adds	r1, r3, #1
 8003bc4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003bc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	09db      	lsrs	r3, r3, #7
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd8:	d8f0      	bhi.n	8003bbc <_TrySendOverflowPacket+0x1c>
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003bea:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <_TrySendOverflowPacket+0xe0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003bf0:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	e00b      	b.n	8003c1c <_TrySendOverflowPacket+0x7c>
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	6279      	str	r1, [r7, #36]	; 0x24
 8003c0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	09db      	lsrs	r3, r3, #7
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	2b7f      	cmp	r3, #127	; 0x7f
 8003c20:	d8f0      	bhi.n	8003c04 <_TrySendOverflowPacket+0x64>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	627a      	str	r2, [r7, #36]	; 0x24
 8003c28:	6a3a      	ldr	r2, [r7, #32]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	4618      	mov	r0, r3
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	1d3b      	adds	r3, r7, #4
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	f7fc fae4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e004      	b.n	8003c70 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <_TrySendOverflowPacket+0xdc>)
 8003c6e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003c70:	693b      	ldr	r3, [r7, #16]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3730      	adds	r7, #48	; 0x30
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20015bc4 	.word	0x20015bc4
 8003c80:	e0001004 	.word	0xe0001004

08003c84 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003c90:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <_SendPacket+0x1c0>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d010      	beq.n	8003cba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <_SendPacket+0x1c0>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a3 	beq.w	8003de8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003ca2:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <_SendPacket+0x1c0>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d109      	bne.n	8003cbe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003caa:	f7ff ff79 	bl	8003ba0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <_SendPacket+0x1c0>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f040 809a 	bne.w	8003dec <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003cb8:	e001      	b.n	8003cbe <_SendPacket+0x3a>
    goto Send;
 8003cba:	bf00      	nop
 8003cbc:	e000      	b.n	8003cc0 <_SendPacket+0x3c>
Send:
 8003cbe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b1f      	cmp	r3, #31
 8003cc4:	d809      	bhi.n	8003cda <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <_SendPacket+0x1c0>)
 8003cc8:	69da      	ldr	r2, [r3, #28]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 808b 	bne.w	8003df0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b17      	cmp	r3, #23
 8003cde:	d807      	bhi.n	8003cf0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e03d      	b.n	8003d6c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8003cfc:	d912      	bls.n	8003d24 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	09da      	lsrs	r2, r3, #7
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	3a01      	subs	r2, #1
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e006      	b.n	8003d32 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b7f      	cmp	r3, #127	; 0x7f
 8003d36:	d912      	bls.n	8003d5e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	09da      	lsrs	r2, r3, #7
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	3a01      	subs	r2, #1
 8003d50:	60fa      	str	r2, [r7, #12]
 8003d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	701a      	strb	r2, [r3, #0]
 8003d5c:	e006      	b.n	8003d6c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003d6c:	4b36      	ldr	r3, [pc, #216]	; (8003e48 <_SendPacket+0x1c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003d72:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <_SendPacket+0x1c0>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	623b      	str	r3, [r7, #32]
 8003d84:	e00b      	b.n	8003d9e <_SendPacket+0x11a>
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	1c59      	adds	r1, r3, #1
 8003d8e:	6279      	str	r1, [r7, #36]	; 0x24
 8003d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	09db      	lsrs	r3, r3, #7
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	2b7f      	cmp	r3, #127	; 0x7f
 8003da2:	d8f0      	bhi.n	8003d86 <_SendPacket+0x102>
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	627a      	str	r2, [r7, #36]	; 0x24
 8003daa:	6a3a      	ldr	r2, [r7, #32]
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <_SendPacket+0x1c0>)
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	4618      	mov	r0, r3
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	f7fc fa24 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <_SendPacket+0x1c0>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	60d3      	str	r3, [r2, #12]
 8003dd8:	e00b      	b.n	8003df2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <_SendPacket+0x1c0>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <_SendPacket+0x1c0>)
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e004      	b.n	8003df2 <_SendPacket+0x16e>
    goto SendDone;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <_SendPacket+0x16e>
      goto SendDone;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <_SendPacket+0x16e>
      goto SendDone;
 8003df0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <_SendPacket+0x1c0>)
 8003df4:	7e1b      	ldrb	r3, [r3, #24]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <_SendPacket+0x1c8>)
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	440b      	add	r3, r1
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	336c      	adds	r3, #108	; 0x6c
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <_SendPacket+0x1c0>)
 8003e0a:	7e1b      	ldrb	r3, [r3, #24]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	490f      	ldr	r1, [pc, #60]	; (8003e4c <_SendPacket+0x1c8>)
 8003e10:	4603      	mov	r3, r0
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4403      	add	r3, r0
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	3370      	adds	r3, #112	; 0x70
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d00b      	beq.n	8003e3a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <_SendPacket+0x1c0>)
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d107      	bne.n	8003e3a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <_SendPacket+0x1c0>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003e30:	f7ff fe4a 	bl	8003ac8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <_SendPacket+0x1c0>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003e3a:	bf00      	nop
 8003e3c:	3728      	adds	r7, #40	; 0x28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20015bc4 	.word	0x20015bc4
 8003e48:	e0001004 	.word	0xe0001004
 8003e4c:	20015d44 	.word	0x20015d44

08003e50 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003e64:	4917      	ldr	r1, [pc, #92]	; (8003ec4 <SEGGER_SYSVIEW_Init+0x74>)
 8003e66:	4818      	ldr	r0, [pc, #96]	; (8003ec8 <SEGGER_SYSVIEW_Init+0x78>)
 8003e68:	f7ff fce0 	bl	800382c <SEGGER_RTT_AllocUpBuffer>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003e72:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003e76:	785a      	ldrb	r2, [r3, #1]
 8003e78:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003e7a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003e7c:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003e7e:	7e1b      	ldrb	r3, [r3, #24]
 8003e80:	4618      	mov	r0, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2308      	movs	r3, #8
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <SEGGER_SYSVIEW_Init+0x80>)
 8003e8a:	490f      	ldr	r1, [pc, #60]	; (8003ec8 <SEGGER_SYSVIEW_Init+0x78>)
 8003e8c:	f7ff fd52 	bl	8003934 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <SEGGER_SYSVIEW_Init+0x84>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003e9c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003e9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003ea4:	4a09      	ldr	r2, [pc, #36]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003eb0:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003eb6:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SEGGER_SYSVIEW_Init+0x7c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003ebc:	bf00      	nop
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200133bc 	.word	0x200133bc
 8003ec8:	08006c90 	.word	0x08006c90
 8003ecc:	20015bc4 	.word	0x20015bc4
 8003ed0:	20015bbc 	.word	0x20015bbc
 8003ed4:	e0001004 	.word	0xe0001004

08003ed8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6113      	str	r3, [r2, #16]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20015bc4 	.word	0x20015bc4

08003ef8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f00:	f3ef 8311 	mrs	r3, BASEPRI
 8003f04:	f04f 0120 	mov.w	r1, #32
 8003f08:	f381 8811 	msr	BASEPRI, r1
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4808      	ldr	r0, [pc, #32]	; (8003f30 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003f10:	f7ff fdcd 	bl	8003aae <_PreparePacket>
 8003f14:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68b8      	ldr	r0, [r7, #8]
 8003f1c:	f7ff feb2 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f383 8811 	msr	BASEPRI, r3
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20015bf4 	.word	0x20015bf4

08003f34 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f3e:	f3ef 8311 	mrs	r3, BASEPRI
 8003f42:	f04f 0120 	mov.w	r1, #32
 8003f46:	f381 8811 	msr	BASEPRI, r1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	4816      	ldr	r0, [pc, #88]	; (8003fa8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003f4e:	f7ff fdae 	bl	8003aae <_PreparePacket>
 8003f52:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e00b      	b.n	8003f7a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	1c59      	adds	r1, r3, #1
 8003f6a:	61f9      	str	r1, [r7, #28]
 8003f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	09db      	lsrs	r3, r3, #7
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f7e:	d8f0      	bhi.n	8003f62 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	61fa      	str	r2, [r7, #28]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	6938      	ldr	r0, [r7, #16]
 8003f96:	f7ff fe75 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f383 8811 	msr	BASEPRI, r3
}
 8003fa0:	bf00      	nop
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20015bf4 	.word	0x20015bf4

08003fac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08c      	sub	sp, #48	; 0x30
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fbc:	f04f 0120 	mov.w	r1, #32
 8003fc0:	f381 8811 	msr	BASEPRI, r1
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	4825      	ldr	r0, [pc, #148]	; (800405c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003fc8:	f7ff fd71 	bl	8003aae <_PreparePacket>
 8003fcc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fda:	e00b      	b.n	8003ff4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	09db      	lsrs	r3, r3, #7
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ff8:	d8f0      	bhi.n	8003fdc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	e00b      	b.n	800402c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	6279      	str	r1, [r7, #36]	; 0x24
 800401e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	09db      	lsrs	r3, r3, #7
 800402a:	623b      	str	r3, [r7, #32]
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	2b7f      	cmp	r3, #127	; 0x7f
 8004030:	d8f0      	bhi.n	8004014 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	627a      	str	r2, [r7, #36]	; 0x24
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	69b8      	ldr	r0, [r7, #24]
 8004048:	f7ff fe1c 	bl	8003c84 <_SendPacket>
  RECORD_END();
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f383 8811 	msr	BASEPRI, r3
}
 8004052:	bf00      	nop
 8004054:	3730      	adds	r7, #48	; 0x30
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20015bf4 	.word	0x20015bf4

08004060 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b08e      	sub	sp, #56	; 0x38
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800406e:	f3ef 8311 	mrs	r3, BASEPRI
 8004072:	f04f 0120 	mov.w	r1, #32
 8004076:	f381 8811 	msr	BASEPRI, r1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	4832      	ldr	r0, [pc, #200]	; (8004148 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800407e:	f7ff fd16 	bl	8003aae <_PreparePacket>
 8004082:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
 8004090:	e00b      	b.n	80040aa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	b2da      	uxtb	r2, r3
 8004096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	6379      	str	r1, [r7, #52]	; 0x34
 800409c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	09db      	lsrs	r3, r3, #7
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2b7f      	cmp	r3, #127	; 0x7f
 80040ae:	d8f0      	bhi.n	8004092 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	637a      	str	r2, [r7, #52]	; 0x34
 80040b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c8:	e00b      	b.n	80040e2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	1c59      	adds	r1, r3, #1
 80040d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	09db      	lsrs	r3, r3, #7
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	2b7f      	cmp	r3, #127	; 0x7f
 80040e6:	d8f0      	bhi.n	80040ca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80040e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	623b      	str	r3, [r7, #32]
 8004100:	e00b      	b.n	800411a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	1c59      	adds	r1, r3, #1
 800410a:	6279      	str	r1, [r7, #36]	; 0x24
 800410c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	09db      	lsrs	r3, r3, #7
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2b7f      	cmp	r3, #127	; 0x7f
 800411e:	d8f0      	bhi.n	8004102 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	627a      	str	r2, [r7, #36]	; 0x24
 8004126:	6a3a      	ldr	r2, [r7, #32]
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6979      	ldr	r1, [r7, #20]
 8004134:	69b8      	ldr	r0, [r7, #24]
 8004136:	f7ff fda5 	bl	8003c84 <_SendPacket>
  RECORD_END();
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f383 8811 	msr	BASEPRI, r3
}
 8004140:	bf00      	nop
 8004142:	3738      	adds	r7, #56	; 0x38
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20015bf4 	.word	0x20015bf4

0800414c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b090      	sub	sp, #64	; 0x40
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800415a:	f3ef 8311 	mrs	r3, BASEPRI
 800415e:	f04f 0120 	mov.w	r1, #32
 8004162:	f381 8811 	msr	BASEPRI, r1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	4840      	ldr	r0, [pc, #256]	; (800426c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800416a:	f7ff fca0 	bl	8003aae <_PreparePacket>
 800416e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	63bb      	str	r3, [r7, #56]	; 0x38
 800417c:	e00b      	b.n	8004196 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800417e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004180:	b2da      	uxtb	r2, r3
 8004182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004184:	1c59      	adds	r1, r3, #1
 8004186:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004188:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418c:	b2d2      	uxtb	r2, r2
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	09db      	lsrs	r3, r3, #7
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	2b7f      	cmp	r3, #127	; 0x7f
 800419a:	d8f0      	bhi.n	800417e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800419c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
 80041b4:	e00b      	b.n	80041ce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041bc:	1c59      	adds	r1, r3, #1
 80041be:	6379      	str	r1, [r7, #52]	; 0x34
 80041c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	09db      	lsrs	r3, r3, #7
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2b7f      	cmp	r3, #127	; 0x7f
 80041d2:	d8f0      	bhi.n	80041b6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	637a      	str	r2, [r7, #52]	; 0x34
 80041da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ec:	e00b      	b.n	8004206 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	1c59      	adds	r1, r3, #1
 80041f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80041f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	09db      	lsrs	r3, r3, #7
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	2b7f      	cmp	r3, #127	; 0x7f
 800420a:	d8f0      	bhi.n	80041ee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800420c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
 8004220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004222:	623b      	str	r3, [r7, #32]
 8004224:	e00b      	b.n	800423e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	6279      	str	r1, [r7, #36]	; 0x24
 8004230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	09db      	lsrs	r3, r3, #7
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2b7f      	cmp	r3, #127	; 0x7f
 8004242:	d8f0      	bhi.n	8004226 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	627a      	str	r2, [r7, #36]	; 0x24
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	6979      	ldr	r1, [r7, #20]
 8004258:	69b8      	ldr	r0, [r7, #24]
 800425a:	f7ff fd13 	bl	8003c84 <_SendPacket>
  RECORD_END();
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f383 8811 	msr	BASEPRI, r3
}
 8004264:	bf00      	nop
 8004266:	3740      	adds	r7, #64	; 0x40
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20015bf4 	.word	0x20015bf4

08004270 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b092      	sub	sp, #72	; 0x48
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800427e:	f3ef 8311 	mrs	r3, BASEPRI
 8004282:	f04f 0120 	mov.w	r1, #32
 8004286:	f381 8811 	msr	BASEPRI, r1
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	484e      	ldr	r0, [pc, #312]	; (80043c8 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800428e:	f7ff fc0e 	bl	8003aae <_PreparePacket>
 8004292:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	643b      	str	r3, [r7, #64]	; 0x40
 80042a0:	e00b      	b.n	80042ba <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	6479      	str	r1, [r7, #68]	; 0x44
 80042ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	09db      	lsrs	r3, r3, #7
 80042b8:	643b      	str	r3, [r7, #64]	; 0x40
 80042ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042bc:	2b7f      	cmp	r3, #127	; 0x7f
 80042be:	d8f0      	bhi.n	80042a2 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	647a      	str	r2, [r7, #68]	; 0x44
 80042c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d8:	e00b      	b.n	80042f2 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	1c59      	adds	r1, r3, #1
 80042e2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80042e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	09db      	lsrs	r3, r3, #7
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	2b7f      	cmp	r3, #127	; 0x7f
 80042f6:	d8f0      	bhi.n	80042da <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
 8004310:	e00b      	b.n	800432a <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	b2da      	uxtb	r2, r3
 8004316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004318:	1c59      	adds	r1, r3, #1
 800431a:	6379      	str	r1, [r7, #52]	; 0x34
 800431c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	09db      	lsrs	r3, r3, #7
 8004328:	633b      	str	r3, [r7, #48]	; 0x30
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	2b7f      	cmp	r3, #127	; 0x7f
 800432e:	d8f0      	bhi.n	8004312 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	637a      	str	r2, [r7, #52]	; 0x34
 8004336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
 8004348:	e00b      	b.n	8004362 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	b2da      	uxtb	r2, r3
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004354:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	09db      	lsrs	r3, r3, #7
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	2b7f      	cmp	r3, #127	; 0x7f
 8004366:	d8f0      	bhi.n	800434a <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800436e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437e:	623b      	str	r3, [r7, #32]
 8004380:	e00b      	b.n	800439a <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	6279      	str	r1, [r7, #36]	; 0x24
 800438c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	09db      	lsrs	r3, r3, #7
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	2b7f      	cmp	r3, #127	; 0x7f
 800439e:	d8f0      	bhi.n	8004382 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	627a      	str	r2, [r7, #36]	; 0x24
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	69b8      	ldr	r0, [r7, #24]
 80043b6:	f7ff fc65 	bl	8003c84 <_SendPacket>
  RECORD_END();
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f383 8811 	msr	BASEPRI, r3
}
 80043c0:	bf00      	nop
 80043c2:	3748      	adds	r7, #72	; 0x48
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20015bf4 	.word	0x20015bf4

080043cc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80043d2:	4b58      	ldr	r3, [pc, #352]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80043d8:	f3ef 8311 	mrs	r3, BASEPRI
 80043dc:	f04f 0120 	mov.w	r1, #32
 80043e0:	f381 8811 	msr	BASEPRI, r1
 80043e4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80043e6:	4b53      	ldr	r3, [pc, #332]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 80043e8:	785b      	ldrb	r3, [r3, #1]
 80043ea:	220a      	movs	r2, #10
 80043ec:	4952      	ldr	r1, [pc, #328]	; (8004538 <SEGGER_SYSVIEW_Start+0x16c>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fb ff0e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80043fa:	200a      	movs	r0, #10
 80043fc:	f7ff fd7c 	bl	8003ef8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004400:	f3ef 8311 	mrs	r3, BASEPRI
 8004404:	f04f 0120 	mov.w	r1, #32
 8004408:	f381 8811 	msr	BASEPRI, r1
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	484b      	ldr	r0, [pc, #300]	; (800453c <SEGGER_SYSVIEW_Start+0x170>)
 8004410:	f7ff fb4d 	bl	8003aae <_PreparePacket>
 8004414:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441e:	4b45      	ldr	r3, [pc, #276]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
 8004424:	e00b      	b.n	800443e <SEGGER_SYSVIEW_Start+0x72>
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	1c59      	adds	r1, r3, #1
 800442e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	09db      	lsrs	r3, r3, #7
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	2b7f      	cmp	r3, #127	; 0x7f
 8004442:	d8f0      	bhi.n	8004426 <SEGGER_SYSVIEW_Start+0x5a>
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800444a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004452:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	e00b      	b.n	8004478 <SEGGER_SYSVIEW_Start+0xac>
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	b2da      	uxtb	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1c59      	adds	r1, r3, #1
 8004468:	6279      	str	r1, [r7, #36]	; 0x24
 800446a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	09db      	lsrs	r3, r3, #7
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2b7f      	cmp	r3, #127	; 0x7f
 800447c:	d8f0      	bhi.n	8004460 <SEGGER_SYSVIEW_Start+0x94>
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	627a      	str	r2, [r7, #36]	; 0x24
 8004484:	6a3a      	ldr	r2, [r7, #32]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	4b28      	ldr	r3, [pc, #160]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e00b      	b.n	80044b2 <SEGGER_SYSVIEW_Start+0xe6>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	1c59      	adds	r1, r3, #1
 80044a2:	61f9      	str	r1, [r7, #28]
 80044a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	09db      	lsrs	r3, r3, #7
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b7f      	cmp	r3, #127	; 0x7f
 80044b6:	d8f0      	bhi.n	800449a <SEGGER_SYSVIEW_Start+0xce>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	61fa      	str	r2, [r7, #28]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e00b      	b.n	80044ea <SEGGER_SYSVIEW_Start+0x11e>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1c59      	adds	r1, r3, #1
 80044da:	6179      	str	r1, [r7, #20]
 80044dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	09db      	lsrs	r3, r3, #7
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b7f      	cmp	r3, #127	; 0x7f
 80044ee:	d8f0      	bhi.n	80044d2 <SEGGER_SYSVIEW_Start+0x106>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	617a      	str	r2, [r7, #20]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004500:	2218      	movs	r2, #24
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fbbd 	bl	8003c84 <_SendPacket>
      RECORD_END();
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <SEGGER_SYSVIEW_Start+0x168>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800451e:	f000 f9eb 	bl	80048f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004522:	f000 f9b1 	bl	8004888 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004526:	f000 fc81 	bl	8004e2c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800452a:	bf00      	nop
 800452c:	3730      	adds	r7, #48	; 0x30
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20015bc4 	.word	0x20015bc4
 8004538:	08006d68 	.word	0x08006d68
 800453c:	20015bf4 	.word	0x20015bf4

08004540 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004546:	f3ef 8311 	mrs	r3, BASEPRI
 800454a:	f04f 0120 	mov.w	r1, #32
 800454e:	f381 8811 	msr	BASEPRI, r1
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	480b      	ldr	r0, [pc, #44]	; (8004584 <SEGGER_SYSVIEW_Stop+0x44>)
 8004556:	f7ff faaa 	bl	8003aae <_PreparePacket>
 800455a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <SEGGER_SYSVIEW_Stop+0x48>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004564:	220b      	movs	r2, #11
 8004566:	6839      	ldr	r1, [r7, #0]
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	f7ff fb8b 	bl	8003c84 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <SEGGER_SYSVIEW_Stop+0x48>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f383 8811 	msr	BASEPRI, r3
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20015bf4 	.word	0x20015bf4
 8004588:	20015bc4 	.word	0x20015bc4

0800458c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b08c      	sub	sp, #48	; 0x30
 8004590:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004592:	f3ef 8311 	mrs	r3, BASEPRI
 8004596:	f04f 0120 	mov.w	r1, #32
 800459a:	f381 8811 	msr	BASEPRI, r1
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	4845      	ldr	r0, [pc, #276]	; (80046b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80045a2:	f7ff fa84 	bl	8003aae <_PreparePacket>
 80045a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b0:	4b42      	ldr	r3, [pc, #264]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b6:	e00b      	b.n	80045d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2b7f      	cmp	r3, #127	; 0x7f
 80045d4:	d8f0      	bhi.n	80045b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	4b34      	ldr	r3, [pc, #208]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	e00b      	b.n	800460a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	6279      	str	r1, [r7, #36]	; 0x24
 80045fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	09db      	lsrs	r3, r3, #7
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	2b7f      	cmp	r3, #127	; 0x7f
 800460e:	d8f0      	bhi.n	80045f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	627a      	str	r2, [r7, #36]	; 0x24
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	e00b      	b.n	8004644 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	61f9      	str	r1, [r7, #28]
 8004636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	61bb      	str	r3, [r7, #24]
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b7f      	cmp	r3, #127	; 0x7f
 8004648:	d8f0      	bhi.n	800462c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	61fa      	str	r2, [r7, #28]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e00b      	b.n	800467c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	1c59      	adds	r1, r3, #1
 800466c:	6179      	str	r1, [r7, #20]
 800466e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	09db      	lsrs	r3, r3, #7
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b7f      	cmp	r3, #127	; 0x7f
 8004680:	d8f0      	bhi.n	8004664 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	617a      	str	r2, [r7, #20]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004692:	2218      	movs	r2, #24
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	68b8      	ldr	r0, [r7, #8]
 8004698:	f7ff faf4 	bl	8003c84 <_SendPacket>
  RECORD_END();
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80046aa:	4b04      	ldr	r3, [pc, #16]	; (80046bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	4798      	blx	r3
  }
}
 80046b0:	bf00      	nop
 80046b2:	3730      	adds	r7, #48	; 0x30
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20015bf4 	.word	0x20015bf4
 80046bc:	20015bc4 	.word	0x20015bc4

080046c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b092      	sub	sp, #72	; 0x48
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80046c8:	f3ef 8311 	mrs	r3, BASEPRI
 80046cc:	f04f 0120 	mov.w	r1, #32
 80046d0:	f381 8811 	msr	BASEPRI, r1
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	486a      	ldr	r0, [pc, #424]	; (8004880 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80046d8:	f7ff f9e9 	bl	8003aae <_PreparePacket>
 80046dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	647b      	str	r3, [r7, #68]	; 0x44
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b66      	ldr	r3, [pc, #408]	; (8004884 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
 80046f2:	e00b      	b.n	800470c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80046f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046fa:	1c59      	adds	r1, r3, #1
 80046fc:	6479      	str	r1, [r7, #68]	; 0x44
 80046fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004708:	09db      	lsrs	r3, r3, #7
 800470a:	643b      	str	r3, [r7, #64]	; 0x40
 800470c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800470e:	2b7f      	cmp	r3, #127	; 0x7f
 8004710:	d8f0      	bhi.n	80046f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	647a      	str	r2, [r7, #68]	; 0x44
 8004718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004720:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	63bb      	str	r3, [r7, #56]	; 0x38
 800472c:	e00b      	b.n	8004746 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004738:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004742:	09db      	lsrs	r3, r3, #7
 8004744:	63bb      	str	r3, [r7, #56]	; 0x38
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	2b7f      	cmp	r3, #127	; 0x7f
 800474a:	d8f0      	bhi.n	800472e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800474c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2220      	movs	r2, #32
 8004762:	4619      	mov	r1, r3
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff f955 	bl	8003a14 <_EncodeStr>
 800476a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800476c:	2209      	movs	r2, #9
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	6938      	ldr	r0, [r7, #16]
 8004772:	f7ff fa87 	bl	8003c84 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	4b40      	ldr	r3, [pc, #256]	; (8004884 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
 800478a:	e00b      	b.n	80047a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	b2da      	uxtb	r2, r3
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	6379      	str	r1, [r7, #52]	; 0x34
 8004796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	09db      	lsrs	r3, r3, #7
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2b7f      	cmp	r3, #127	; 0x7f
 80047a8:	d8f0      	bhi.n	800478c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80047aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	637a      	str	r2, [r7, #52]	; 0x34
 80047b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c4:	e00b      	b.n	80047de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	09db      	lsrs	r3, r3, #7
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	2b7f      	cmp	r3, #127	; 0x7f
 80047e2:	d8f0      	bhi.n	80047c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80047e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	e00b      	b.n	8004818 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	6279      	str	r1, [r7, #36]	; 0x24
 800480a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	09db      	lsrs	r3, r3, #7
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2b7f      	cmp	r3, #127	; 0x7f
 800481c:	d8f0      	bhi.n	8004800 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	627a      	str	r2, [r7, #36]	; 0x24
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e00b      	b.n	8004850 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1c59      	adds	r1, r3, #1
 8004840:	61f9      	str	r1, [r7, #28]
 8004842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004846:	b2d2      	uxtb	r2, r2
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	09db      	lsrs	r3, r3, #7
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b7f      	cmp	r3, #127	; 0x7f
 8004854:	d8f0      	bhi.n	8004838 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	61fa      	str	r2, [r7, #28]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004866:	2215      	movs	r2, #21
 8004868:	68f9      	ldr	r1, [r7, #12]
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f7ff fa0a 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f383 8811 	msr	BASEPRI, r3
}
 8004876:	bf00      	nop
 8004878:	3748      	adds	r7, #72	; 0x48
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20015bf4 	.word	0x20015bf4
 8004884:	20015bc4 	.word	0x20015bc4

08004888 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800489e:	4b03      	ldr	r3, [pc, #12]	; (80048ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4798      	blx	r3
  }
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20015bc4 	.word	0x20015bc4

080048b0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048b8:	f3ef 8311 	mrs	r3, BASEPRI
 80048bc:	f04f 0120 	mov.w	r1, #32
 80048c0:	f381 8811 	msr	BASEPRI, r1
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	480b      	ldr	r0, [pc, #44]	; (80048f4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80048c8:	f7ff f8f1 	bl	8003aae <_PreparePacket>
 80048cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048ce:	2280      	movs	r2, #128	; 0x80
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	6938      	ldr	r0, [r7, #16]
 80048d4:	f7ff f89e 	bl	8003a14 <_EncodeStr>
 80048d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80048da:	220e      	movs	r2, #14
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	6938      	ldr	r0, [r7, #16]
 80048e0:	f7ff f9d0 	bl	8003c84 <_SendPacket>
  RECORD_END();
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f383 8811 	msr	BASEPRI, r3
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20015bf4 	.word	0x20015bf4

080048f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80048f8:	b590      	push	{r4, r7, lr}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d019      	beq.n	800493a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d014      	beq.n	800493a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4798      	blx	r3
 8004918:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800491c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800491e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	0013      	movs	r3, r2
 800492c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800492e:	461a      	mov	r2, r3
 8004930:	4601      	mov	r1, r0
 8004932:	200d      	movs	r0, #13
 8004934:	f7ff fb3a 	bl	8003fac <SEGGER_SYSVIEW_RecordU32x2>
 8004938:	e005      	b.n	8004946 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4619      	mov	r1, r3
 8004940:	200c      	movs	r0, #12
 8004942:	f7ff faf7 	bl	8003f34 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bd90      	pop	{r4, r7, pc}
 800494e:	bf00      	nop
 8004950:	20015bc4 	.word	0x20015bc4
 8004954:	e0001004 	.word	0xe0001004

08004958 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800495e:	f3ef 8311 	mrs	r3, BASEPRI
 8004962:	f04f 0120 	mov.w	r1, #32
 8004966:	f381 8811 	msr	BASEPRI, r1
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	4819      	ldr	r0, [pc, #100]	; (80049d4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800496e:	f7ff f89e 	bl	8003aae <_PreparePacket>
 8004972:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e00b      	b.n	80049a4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	b2da      	uxtb	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1c59      	adds	r1, r3, #1
 8004994:	6179      	str	r1, [r7, #20]
 8004996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b7f      	cmp	r3, #127	; 0x7f
 80049a8:	d8f0      	bhi.n	800498c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	617a      	str	r2, [r7, #20]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80049ba:	2202      	movs	r2, #2
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	68b8      	ldr	r0, [r7, #8]
 80049c0:	f7ff f960 	bl	8003c84 <_SendPacket>
  RECORD_END();
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f383 8811 	msr	BASEPRI, r3
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20015bf4 	.word	0x20015bf4
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80049e2:	f3ef 8311 	mrs	r3, BASEPRI
 80049e6:	f04f 0120 	mov.w	r1, #32
 80049ea:	f381 8811 	msr	BASEPRI, r1
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	4807      	ldr	r0, [pc, #28]	; (8004a10 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80049f2:	f7ff f85c 	bl	8003aae <_PreparePacket>
 80049f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80049f8:	2203      	movs	r2, #3
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	6838      	ldr	r0, [r7, #0]
 80049fe:	f7ff f941 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f383 8811 	msr	BASEPRI, r3
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20015bf4 	.word	0x20015bf4

08004a14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1e:	f04f 0120 	mov.w	r1, #32
 8004a22:	f381 8811 	msr	BASEPRI, r1
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	4807      	ldr	r0, [pc, #28]	; (8004a48 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004a2a:	f7ff f840 	bl	8003aae <_PreparePacket>
 8004a2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004a30:	2212      	movs	r2, #18
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f7ff f925 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f383 8811 	msr	BASEPRI, r3
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20015bf4 	.word	0x20015bf4

08004a4c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a52:	f3ef 8311 	mrs	r3, BASEPRI
 8004a56:	f04f 0120 	mov.w	r1, #32
 8004a5a:	f381 8811 	msr	BASEPRI, r1
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	4807      	ldr	r0, [pc, #28]	; (8004a80 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004a62:	f7ff f824 	bl	8003aae <_PreparePacket>
 8004a66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004a68:	2211      	movs	r2, #17
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6838      	ldr	r0, [r7, #0]
 8004a6e:	f7ff f909 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f383 8811 	msr	BASEPRI, r3
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20015bf4 	.word	0x20015bf4

08004a84 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a90:	f04f 0120 	mov.w	r1, #32
 8004a94:	f381 8811 	msr	BASEPRI, r1
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	4819      	ldr	r0, [pc, #100]	; (8004b00 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004a9c:	f7ff f807 	bl	8003aae <_PreparePacket>
 8004aa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	61fb      	str	r3, [r7, #28]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e00b      	b.n	8004ad2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	1c59      	adds	r1, r3, #1
 8004ac2:	61f9      	str	r1, [r7, #28]
 8004ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	09db      	lsrs	r3, r3, #7
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad6:	d8f0      	bhi.n	8004aba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	61fa      	str	r2, [r7, #28]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004ae8:	2208      	movs	r2, #8
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	6938      	ldr	r0, [r7, #16]
 8004aee:	f7ff f8c9 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f383 8811 	msr	BASEPRI, r3
}
 8004af8:	bf00      	nop
 8004afa:	3720      	adds	r7, #32
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20015bf4 	.word	0x20015bf4
 8004b04:	20015bc4 	.word	0x20015bc4

08004b08 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b10:	f3ef 8311 	mrs	r3, BASEPRI
 8004b14:	f04f 0120 	mov.w	r1, #32
 8004b18:	f381 8811 	msr	BASEPRI, r1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	4819      	ldr	r0, [pc, #100]	; (8004b84 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004b20:	f7fe ffc5 	bl	8003aae <_PreparePacket>
 8004b24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	e00b      	b.n	8004b56 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	1c59      	adds	r1, r3, #1
 8004b46:	61f9      	str	r1, [r7, #28]
 8004b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	09db      	lsrs	r3, r3, #7
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b7f      	cmp	r3, #127	; 0x7f
 8004b5a:	d8f0      	bhi.n	8004b3e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	61fa      	str	r2, [r7, #28]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	6938      	ldr	r0, [r7, #16]
 8004b72:	f7ff f887 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f383 8811 	msr	BASEPRI, r3
}
 8004b7c:	bf00      	nop
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20015bf4 	.word	0x20015bf4
 8004b88:	20015bc4 	.word	0x20015bc4

08004b8c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b94:	f3ef 8311 	mrs	r3, BASEPRI
 8004b98:	f04f 0120 	mov.w	r1, #32
 8004b9c:	f381 8811 	msr	BASEPRI, r1
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	4819      	ldr	r0, [pc, #100]	; (8004c08 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ba4:	f7fe ff83 	bl	8003aae <_PreparePacket>
 8004ba8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	61fb      	str	r3, [r7, #28]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	e00b      	b.n	8004bda <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	1c59      	adds	r1, r3, #1
 8004bca:	61f9      	str	r1, [r7, #28]
 8004bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	09db      	lsrs	r3, r3, #7
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004bde:	d8f0      	bhi.n	8004bc2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	61fa      	str	r2, [r7, #28]
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004bf0:	2206      	movs	r2, #6
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	6938      	ldr	r0, [r7, #16]
 8004bf6:	f7ff f845 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f383 8811 	msr	BASEPRI, r3
}
 8004c00:	bf00      	nop
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20015bf4 	.word	0x20015bf4
 8004c0c:	20015bc4 	.word	0x20015bc4

08004c10 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1e:	f04f 0120 	mov.w	r1, #32
 8004c22:	f381 8811 	msr	BASEPRI, r1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	4827      	ldr	r0, [pc, #156]	; (8004cc8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004c2a:	f7fe ff40 	bl	8003aae <_PreparePacket>
 8004c2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	623b      	str	r3, [r7, #32]
 8004c46:	e00b      	b.n	8004c60 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	6279      	str	r1, [r7, #36]	; 0x24
 8004c52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	09db      	lsrs	r3, r3, #7
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	2b7f      	cmp	r3, #127	; 0x7f
 8004c64:	d8f0      	bhi.n	8004c48 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e00b      	b.n	8004c98 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	61f9      	str	r1, [r7, #28]
 8004c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9c:	d8f0      	bhi.n	8004c80 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	61fa      	str	r2, [r7, #28]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004cae:	2207      	movs	r2, #7
 8004cb0:	68f9      	ldr	r1, [r7, #12]
 8004cb2:	6938      	ldr	r0, [r7, #16]
 8004cb4:	f7fe ffe6 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f383 8811 	msr	BASEPRI, r3
}
 8004cbe:	bf00      	nop
 8004cc0:	3728      	adds	r7, #40	; 0x28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20015bf4 	.word	0x20015bf4
 8004ccc:	20015bc4 	.word	0x20015bc4

08004cd0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	20015bc4 	.word	0x20015bc4

08004cf0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	; 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004cfa:	4b3b      	ldr	r3, [pc, #236]	; (8004de8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d06d      	beq.n	8004dde <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0c:	e008      	b.n	8004d20 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3f2      	bcc.n	8004d0e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004d28:	e000      	b.n	8004d2c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004d2a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d055      	beq.n	8004dde <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d32:	f3ef 8311 	mrs	r3, BASEPRI
 8004d36:	f04f 0120 	mov.w	r1, #32
 8004d3a:	f381 8811 	msr	BASEPRI, r1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	482a      	ldr	r0, [pc, #168]	; (8004dec <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004d42:	f7fe feb4 	bl	8003aae <_PreparePacket>
 8004d46:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	623b      	str	r3, [r7, #32]
 8004d54:	e00b      	b.n	8004d6e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	6279      	str	r1, [r7, #36]	; 0x24
 8004d60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	09db      	lsrs	r3, r3, #7
 8004d6c:	623b      	str	r3, [r7, #32]
 8004d6e:	6a3b      	ldr	r3, [r7, #32]
 8004d70:	2b7f      	cmp	r3, #127	; 0x7f
 8004d72:	d8f0      	bhi.n	8004d56 <SEGGER_SYSVIEW_SendModule+0x66>
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	627a      	str	r2, [r7, #36]	; 0x24
 8004d7a:	6a3a      	ldr	r2, [r7, #32]
 8004d7c:	b2d2      	uxtb	r2, r2
 8004d7e:	701a      	strb	r2, [r3, #0]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	e00b      	b.n	8004da8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	61f9      	str	r1, [r7, #28]
 8004d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	09db      	lsrs	r3, r3, #7
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dac:	d8f0      	bhi.n	8004d90 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	61fa      	str	r2, [r7, #28]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7fe fe24 	bl	8003a14 <_EncodeStr>
 8004dcc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004dce:	2216      	movs	r2, #22
 8004dd0:	68f9      	ldr	r1, [r7, #12]
 8004dd2:	6938      	ldr	r0, [r7, #16]
 8004dd4:	f7fe ff56 	bl	8003c84 <_SendPacket>
      RECORD_END();
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004dde:	bf00      	nop
 8004de0:	3730      	adds	r7, #48	; 0x30
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20015bec 	.word	0x20015bec
 8004dec:	20015bf4 	.word	0x20015bf4

08004df0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00f      	beq.n	8004e1e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f2      	bne.n	8004e04 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20015bec 	.word	0x20015bec

08004e2c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004e32:	f3ef 8311 	mrs	r3, BASEPRI
 8004e36:	f04f 0120 	mov.w	r1, #32
 8004e3a:	f381 8811 	msr	BASEPRI, r1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	4817      	ldr	r0, [pc, #92]	; (8004ea0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004e42:	f7fe fe34 	bl	8003aae <_PreparePacket>
 8004e46:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	e00b      	b.n	8004e70 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	6179      	str	r1, [r7, #20]
 8004e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	09db      	lsrs	r3, r3, #7
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b7f      	cmp	r3, #127	; 0x7f
 8004e74:	d8f0      	bhi.n	8004e58 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	617a      	str	r2, [r7, #20]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004e86:	221b      	movs	r2, #27
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	68b8      	ldr	r0, [r7, #8]
 8004e8c:	f7fe fefa 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f383 8811 	msr	BASEPRI, r3
}
 8004e96:	bf00      	nop
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20015bf4 	.word	0x20015bf4
 8004ea4:	20015bf0 	.word	0x20015bf0

08004ea8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb4:	f04f 0120 	mov.w	r1, #32
 8004eb8:	f381 8811 	msr	BASEPRI, r1
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	4827      	ldr	r0, [pc, #156]	; (8004f5c <SEGGER_SYSVIEW_Warn+0xb4>)
 8004ec0:	f7fe fdf5 	bl	8003aae <_PreparePacket>
 8004ec4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ec6:	2280      	movs	r2, #128	; 0x80
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f7fe fda2 	bl	8003a14 <_EncodeStr>
 8004ed0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	e00b      	b.n	8004ef4 <SEGGER_SYSVIEW_Warn+0x4c>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1c59      	adds	r1, r3, #1
 8004ee4:	6279      	str	r1, [r7, #36]	; 0x24
 8004ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	09db      	lsrs	r3, r3, #7
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef8:	d8f0      	bhi.n	8004edc <SEGGER_SYSVIEW_Warn+0x34>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	627a      	str	r2, [r7, #36]	; 0x24
 8004f00:	6a3a      	ldr	r2, [r7, #32]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e00b      	b.n	8004f2c <SEGGER_SYSVIEW_Warn+0x84>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1c59      	adds	r1, r3, #1
 8004f1c:	61f9      	str	r1, [r7, #28]
 8004f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	09db      	lsrs	r3, r3, #7
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f30:	d8f0      	bhi.n	8004f14 <SEGGER_SYSVIEW_Warn+0x6c>
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	61fa      	str	r2, [r7, #28]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f42:	221a      	movs	r2, #26
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	6938      	ldr	r0, [r7, #16]
 8004f48:	f7fe fe9c 	bl	8003c84 <_SendPacket>
  RECORD_END();
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f383 8811 	msr	BASEPRI, r3
}
 8004f52:	bf00      	nop
 8004f54:	3728      	adds	r7, #40	; 0x28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20015bf4 	.word	0x20015bf4

08004f60 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e076      	b.n	800506a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d165      	bne.n	8005064 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2103      	movs	r1, #3
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	401a      	ands	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	791b      	ldrb	r3, [r3, #4]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	791b      	ldrb	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d003      	beq.n	8004fd6 <GPIO_Init+0x76>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	791b      	ldrb	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d12e      	bne.n	8005034 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2103      	movs	r1, #3
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	795b      	ldrb	r3, [r3, #5]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	b29b      	uxth	r3, r3
 800500c:	4619      	mov	r1, r3
 800500e:	2301      	movs	r3, #1
 8005010:	408b      	lsls	r3, r1
 8005012:	43db      	mvns	r3, r3
 8005014:	401a      	ands	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	7992      	ldrb	r2, [r2, #6]
 8005022:	4611      	mov	r1, r2
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	b292      	uxth	r2, r2
 8005028:	fa01 f202 	lsl.w	r2, r1, r2
 800502c:	b292      	uxth	r2, r2
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	b29b      	uxth	r3, r3
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	2103      	movs	r1, #3
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	79db      	ldrb	r3, [r3, #7]
 8005054:	4619      	mov	r1, r3
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	3301      	adds	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b0f      	cmp	r3, #15
 800506e:	d985      	bls.n	8004f7c <GPIO_Init+0x1c>
    }
  }
}
 8005070:	bf00      	nop
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695a      	ldr	r2, [r3, #20]
 8005090:	887b      	ldrh	r3, [r7, #2]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
 800509c:	e001      	b.n	80050a2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800509e:	2300      	movs	r3, #0
 80050a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	831a      	strh	r2, [r3, #24]
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	887a      	ldrh	r2, [r7, #2]
 80050de:	835a      	strh	r2, [r3, #26]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	405a      	eors	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	615a      	str	r2, [r3, #20]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	807b      	strh	r3, [r7, #2]
 800511c:	4613      	mov	r3, r2
 800511e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005128:	787a      	ldrb	r2, [r7, #1]
 800512a:	887b      	ldrh	r3, [r7, #2]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005138:	887b      	ldrh	r3, [r7, #2]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	b29b      	uxth	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005148:	887b      	ldrh	r3, [r7, #2]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	210f      	movs	r1, #15
 8005152:	fa01 f303 	lsl.w	r3, r1, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	8879      	ldrh	r1, [r7, #2]
 800515a:	08c9      	lsrs	r1, r1, #3
 800515c:	b289      	uxth	r1, r1
 800515e:	4608      	mov	r0, r1
 8005160:	ea02 0103 	and.w	r1, r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f100 0208 	add.w	r2, r0, #8
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800516e:	887b      	ldrh	r3, [r7, #2]
 8005170:	08db      	lsrs	r3, r3, #3
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	3208      	adds	r2, #8
 800517a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3208      	adds	r2, #8
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <RCC_DeInit+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a15      	ldr	r2, [pc, #84]	; (8005204 <RCC_DeInit+0x60>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <RCC_DeInit+0x60>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <RCC_DeInit+0x60>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a11      	ldr	r2, [pc, #68]	; (8005204 <RCC_DeInit+0x60>)
 80051c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80051c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80051c8:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <RCC_DeInit+0x60>)
 80051cc:	4a0e      	ldr	r2, [pc, #56]	; (8005208 <RCC_DeInit+0x64>)
 80051ce:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <RCC_DeInit+0x60>)
 80051d2:	4a0e      	ldr	r2, [pc, #56]	; (800520c <RCC_DeInit+0x68>)
 80051d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80051d8:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <RCC_DeInit+0x60>)
 80051da:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <RCC_DeInit+0x6c>)
 80051dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <RCC_DeInit+0x60>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a07      	ldr	r2, [pc, #28]	; (8005204 <RCC_DeInit+0x60>)
 80051e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <RCC_DeInit+0x60>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80051f2:	4b04      	ldr	r3, [pc, #16]	; (8005204 <RCC_DeInit+0x60>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40023800 	.word	0x40023800
 8005208:	24003010 	.word	0x24003010
 800520c:	20003000 	.word	0x20003000
 8005210:	24003000 	.word	0x24003000

08005214 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <RCC_SYSCLKConfig+0x34>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f023 0303 	bic.w	r3, r3, #3
 800522c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <RCC_SYSCLKConfig+0x34>)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6093      	str	r3, [r2, #8]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40023800 	.word	0x40023800

0800524c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	; 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	2300      	movs	r3, #0
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	2302      	movs	r3, #2
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	2302      	movs	r3, #2
 800526a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800526c:	4b47      	ldr	r3, [pc, #284]	; (800538c <RCC_GetClocksFreq+0x140>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d007      	beq.n	800528c <RCC_GetClocksFreq+0x40>
 800527c:	2b08      	cmp	r3, #8
 800527e:	d009      	beq.n	8005294 <RCC_GetClocksFreq+0x48>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d13d      	bne.n	8005300 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a42      	ldr	r2, [pc, #264]	; (8005390 <RCC_GetClocksFreq+0x144>)
 8005288:	601a      	str	r2, [r3, #0]
    break;
 800528a:	e03d      	b.n	8005308 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a41      	ldr	r2, [pc, #260]	; (8005394 <RCC_GetClocksFreq+0x148>)
 8005290:	601a      	str	r2, [r3, #0]
    break;
 8005292:	e039      	b.n	8005308 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <RCC_GetClocksFreq+0x140>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	0d9b      	lsrs	r3, r3, #22
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a0:	4b3a      	ldr	r3, [pc, #232]	; (800538c <RCC_GetClocksFreq+0x140>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a8:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00c      	beq.n	80052ca <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80052b0:	4a38      	ldr	r2, [pc, #224]	; (8005394 <RCC_GetClocksFreq+0x148>)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	4a34      	ldr	r2, [pc, #208]	; (800538c <RCC_GetClocksFreq+0x140>)
 80052ba:	6852      	ldr	r2, [r2, #4]
 80052bc:	0992      	lsrs	r2, r2, #6
 80052be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c2:	fb02 f303 	mul.w	r3, r2, r3
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	e00b      	b.n	80052e2 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80052ca:	4a31      	ldr	r2, [pc, #196]	; (8005390 <RCC_GetClocksFreq+0x144>)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	4a2e      	ldr	r2, [pc, #184]	; (800538c <RCC_GetClocksFreq+0x140>)
 80052d4:	6852      	ldr	r2, [r2, #4]
 80052d6:	0992      	lsrs	r2, r2, #6
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	fb02 f303 	mul.w	r3, r2, r3
 80052e0:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80052e2:	4b2a      	ldr	r3, [pc, #168]	; (800538c <RCC_GetClocksFreq+0x140>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	3301      	adds	r3, #1
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	601a      	str	r2, [r3, #0]
    break;
 80052fe:	e003      	b.n	8005308 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a23      	ldr	r2, [pc, #140]	; (8005390 <RCC_GetClocksFreq+0x144>)
 8005304:	601a      	str	r2, [r3, #0]
    break;
 8005306:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8005308:	4b20      	ldr	r3, [pc, #128]	; (800538c <RCC_GetClocksFreq+0x140>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005310:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005318:	4a1f      	ldr	r2, [pc, #124]	; (8005398 <RCC_GetClocksFreq+0x14c>)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	4413      	add	r3, r2
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	40da      	lsrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8005330:	4b16      	ldr	r3, [pc, #88]	; (800538c <RCC_GetClocksFreq+0x140>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005338:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	0a9b      	lsrs	r3, r3, #10
 800533e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005340:	4a15      	ldr	r2, [pc, #84]	; (8005398 <RCC_GetClocksFreq+0x14c>)
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	4413      	add	r3, r2
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	40da      	lsrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <RCC_GetClocksFreq+0x140>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005360:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	0b5b      	lsrs	r3, r3, #13
 8005366:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <RCC_GetClocksFreq+0x14c>)
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	4413      	add	r3, r2
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	40da      	lsrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60da      	str	r2, [r3, #12]
}
 8005380:	bf00      	nop
 8005382:	3724      	adds	r7, #36	; 0x24
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40023800 	.word	0x40023800
 8005390:	00f42400 	.word	0x00f42400
 8005394:	017d7840 	.word	0x017d7840
 8005398:	20000008 	.word	0x20000008

0800539c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d006      	beq.n	80053bc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80053ae:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80053b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b2:	4909      	ldr	r1, [pc, #36]	; (80053d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80053ba:	e006      	b.n	80053ca <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80053bc:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80053be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	43db      	mvns	r3, r3
 80053c4:	4904      	ldr	r1, [pc, #16]	; (80053d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800

080053dc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <RCC_APB1PeriphClockCmd+0x3c>)
 80053f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f2:	4909      	ldr	r1, [pc, #36]	; (8005418 <RCC_APB1PeriphClockCmd+0x3c>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80053fa:	e006      	b.n	800540a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80053fc:	4b06      	ldr	r3, [pc, #24]	; (8005418 <RCC_APB1PeriphClockCmd+0x3c>)
 80053fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	43db      	mvns	r3, r3
 8005404:	4904      	ldr	r1, [pc, #16]	; (8005418 <RCC_APB1PeriphClockCmd+0x3c>)
 8005406:	4013      	ands	r3, r2
 8005408:	640b      	str	r3, [r1, #64]	; 0x40
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800

0800541c <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <RTC_GetTime+0xa0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005432:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005436:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005442:	b2da      	uxtb	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	b2db      	uxtb	r3, r3
 800544e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005452:	b2da      	uxtb	r2, r3
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005460:	b2da      	uxtb	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	0c1b      	lsrs	r3, r3, #16
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	b2da      	uxtb	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11a      	bne.n	80054b2 <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f000 f86b 	bl	800555c <RTC_Bcd2ToByte>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f862 	bl	800555c <RTC_Bcd2ToByte>
 8005498:	4603      	mov	r3, r0
 800549a:	461a      	mov	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	789b      	ldrb	r3, [r3, #2]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f859 	bl	800555c <RTC_Bcd2ToByte>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	709a      	strb	r2, [r3, #2]
  }
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40002800 	.word	0x40002800

080054c0 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 80054ce:	4b22      	ldr	r3, [pc, #136]	; (8005558 <RTC_GetDate+0x98>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054da:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	0b5b      	lsrs	r3, r3, #13
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	b2da      	uxtb	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11a      	bne.n	8005550 <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	78db      	ldrb	r3, [r3, #3]
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f81c 	bl	800555c <RTC_Bcd2ToByte>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f813 	bl	800555c <RTC_Bcd2ToByte>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	789b      	ldrb	r3, [r3, #2]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f80a 	bl	800555c <RTC_Bcd2ToByte>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	709a      	strb	r2, [r3, #2]
  }
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40002800 	.word	0x40002800

0800555c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	4603      	mov	r3, r0
 8005564:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	0092      	lsls	r2, r2, #2
 8005574:	4413      	add	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	b2da      	uxtb	r2, r3
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	4413      	add	r3, r2
 8005586:	b2db      	uxtb	r3, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	2300      	movs	r3, #0
 80055a4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8a1b      	ldrh	r3, [r3, #16]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	88db      	ldrh	r3, [r3, #6]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	4313      	orrs	r3, r2
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	899b      	ldrh	r3, [r3, #12]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055e0:	f023 030c 	bic.w	r3, r3, #12
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	889a      	ldrh	r2, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	891b      	ldrh	r3, [r3, #8]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80055f6:	4313      	orrs	r3, r2
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	4313      	orrs	r3, r2
 8005600:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8a9b      	ldrh	r3, [r3, #20]
 800560e:	b29b      	uxth	r3, r3
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005618:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	899b      	ldrh	r3, [r3, #12]
 800561e:	461a      	mov	r2, r3
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	4313      	orrs	r3, r2
 8005624:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800562e:	f107 0308 	add.w	r3, r7, #8
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fe0a 	bl	800524c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a30      	ldr	r2, [pc, #192]	; (80056fc <USART_Init+0x168>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <USART_Init+0xb4>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a2f      	ldr	r2, [pc, #188]	; (8005700 <USART_Init+0x16c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d102      	bne.n	800564e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	623b      	str	r3, [r7, #32]
 800564c:	e001      	b.n	8005652 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	899b      	ldrh	r3, [r3, #12]
 8005656:	b29b      	uxth	r3, r3
 8005658:	b21b      	sxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	da0c      	bge.n	8005678 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800565e:	6a3a      	ldr	r2, [r7, #32]
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009a      	lsls	r2, r3, #2
 8005668:	441a      	add	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	e00b      	b.n	8005690 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8005678:	6a3a      	ldr	r2, [r7, #32]
 800567a:	4613      	mov	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4413      	add	r3, r2
 8005680:	009a      	lsls	r2, r3, #2
 8005682:	441a      	add	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	fbb2 f3f3 	udiv	r3, r2, r3
 800568e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <USART_Init+0x170>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	091b      	lsrs	r3, r3, #4
 80056a2:	2264      	movs	r2, #100	; 0x64
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	899b      	ldrh	r3, [r3, #12]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	b21b      	sxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da0c      	bge.n	80056d4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a10      	ldr	r2, [pc, #64]	; (8005704 <USART_Init+0x170>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ce:	4313      	orrs	r3, r2
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
 80056d2:	e00b      	b.n	80056ec <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	3332      	adds	r3, #50	; 0x32
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <USART_Init+0x170>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e8:	4313      	orrs	r3, r2
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	811a      	strh	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	3728      	adds	r7, #40	; 0x28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f

08005708 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d008      	beq.n	800572c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	899b      	ldrh	r3, [r3, #12]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005724:	b29a      	uxth	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800572a:	e007      	b.n	800573c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	899b      	ldrh	r3, [r3, #12]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	819a      	strh	r2, [r3, #12]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	809a      	strh	r2, [r3, #4]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	889b      	ldrh	r3, [r3, #4]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800577e:	b29b      	uxth	r3, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	807b      	strh	r3, [r7, #2]
 8005798:	4613      	mov	r3, r2
 800579a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	2300      	movs	r3, #0
 80057a6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80057b0:	887b      	ldrh	r3, [r7, #2]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	095b      	lsrs	r3, r3, #5
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80057ba:	887b      	ldrh	r3, [r7, #2]
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80057c2:	2201      	movs	r2, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ca:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d103      	bne.n	80057da <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	330c      	adds	r3, #12
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e009      	b.n	80057ee <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d103      	bne.n	80057e8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	3310      	adds	r3, #16
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e002      	b.n	80057ee <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	3314      	adds	r3, #20
 80057ec:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80057ee:	787b      	ldrb	r3, [r7, #1]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8005800:	e006      	b.n	8005810 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	43da      	mvns	r2, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	400a      	ands	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29a      	uxth	r2, r3
 8005832:	887b      	ldrh	r3, [r7, #2]
 8005834:	4013      	ands	r3, r2
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
 8005840:	e001      	b.n	8005846 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	f003 021f 	and.w	r2, r3, #31
 8005864:	4907      	ldr	r1, [pc, #28]	; (8005884 <NVIC_EnableIRQ+0x30>)
 8005866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2001      	movs	r0, #1
 800586e:	fa00 f202 	lsl.w	r2, r0, r2
 8005872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	e000e100 	.word	0xe000e100

08005888 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	f003 021f 	and.w	r2, r3, #31
 8005898:	4907      	ldr	r1, [pc, #28]	; (80058b8 <NVIC_DisableIRQ+0x30>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2001      	movs	r0, #1
 80058a2:	fa00 f202 	lsl.w	r2, r0, r2
 80058a6:	3320      	adds	r3, #32
 80058a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	e000e100 	.word	0xe000e100

080058bc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	6039      	str	r1, [r7, #0]
 80058c6:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da0b      	bge.n	80058e8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	490c      	ldr	r1, [pc, #48]	; (8005908 <NVIC_SetPriority+0x4c>)
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	3b04      	subs	r3, #4
 80058de:	0112      	lsls	r2, r2, #4
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	440b      	add	r3, r1
 80058e4:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e6:	e009      	b.n	80058fc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	4907      	ldr	r1, [pc, #28]	; (800590c <NVIC_SetPriority+0x50>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	440b      	add	r3, r1
 80058f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	e000ed00 	.word	0xe000ed00
 800590c:	e000e100 	.word	0xe000e100

08005910 <main>:
uint8_t command_len=0;
uint8_t command_buffer[20];
TimerHandle_t Timer_LedToggle = NULL;

int main(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af02      	add	r7, sp, #8

	DWT->CTRL |= (1 << 0); //required by SEGGER to maintain timestamp information it enable to store cycle count information
 8005916:	4b2e      	ldr	r3, [pc, #184]	; (80059d0 <main+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2d      	ldr	r2, [pc, #180]	; (80059d0 <main+0xc0>)
 800591c:	f043 0301 	orr.w	r3, r3, #1
 8005920:	6013      	str	r3, [r2, #0]
	//By default the system clk is running at max speed which 168Mhz
	//this is done by setsysclk function
	//if it is not required then deinit the clk config and set it to desired value using functions provided in stm32f4xx_rcc.c
	RCC_DeInit();
 8005922:	f7ff fc3f 	bl	80051a4 <RCC_DeInit>
	//set HSE as default clk
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8005926:	2001      	movs	r0, #1
 8005928:	f7ff fc74 	bl	8005214 <RCC_SYSCLKConfig>
	//call the systemcoreclk update function the SystemCoreClock variable to newly set clk frequency
	SystemCoreClockUpdate();
 800592c:	f000 fbd0 	bl	80060d0 <SystemCoreClockUpdate>

	//setup extra peripherals
	//init the LED GPIO
	Init_GPIO_LED();
 8005930:	f000 f930 	bl	8005b94 <Init_GPIO_LED>
	Init_UART();
 8005934:	f000 f962 	bl	8005bfc <Init_UART>

	//start SEGGER recording
	SEGGER_SYSVIEW_Conf();
 8005938:	f7fd fcba 	bl	80032b0 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800593c:	f7fe fd46 	bl	80043cc <SEGGER_SYSVIEW_Start>

	//create queues
	command_queue = xQueueCreate(10,sizeof(APP_CMD_t*));
 8005940:	2200      	movs	r2, #0
 8005942:	2104      	movs	r1, #4
 8005944:	200a      	movs	r0, #10
 8005946:	f7fa fe27 	bl	8000598 <xQueueGenericCreate>
 800594a:	4602      	mov	r2, r0
 800594c:	4b21      	ldr	r3, [pc, #132]	; (80059d4 <main+0xc4>)
 800594e:	601a      	str	r2, [r3, #0]
	uart_queue = xQueueCreate(10,sizeof(char*));
 8005950:	2200      	movs	r2, #0
 8005952:	2104      	movs	r1, #4
 8005954:	200a      	movs	r0, #10
 8005956:	f7fa fe1f 	bl	8000598 <xQueueGenericCreate>
 800595a:	4602      	mov	r2, r0
 800595c:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <main+0xc8>)
 800595e:	601a      	str	r2, [r3, #0]

	if((command_queue != NULL && uart_queue != NULL)){
 8005960:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <main+0xc4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d02e      	beq.n	80059c6 <main+0xb6>
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <main+0xc8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d02a      	beq.n	80059c6 <main+0xb6>
		//create  task
		xTaskCreate(menu_display_task, "MENU_DISP", configMINIMAL_STACK_SIZE, NULL, 1, &Handle_menu_display_task);
 8005970:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <main+0xcc>)
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	2301      	movs	r3, #1
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	2282      	movs	r2, #130	; 0x82
 800597c:	4918      	ldr	r1, [pc, #96]	; (80059e0 <main+0xd0>)
 800597e:	4819      	ldr	r0, [pc, #100]	; (80059e4 <main+0xd4>)
 8005980:	f7fb faf4 	bl	8000f6c <xTaskCreate>
		xTaskCreate(cmd_handling_task, "CMD_HANDLE", configMINIMAL_STACK_SIZE, NULL, 2, &Handle_cmd_handling_task);
 8005984:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <main+0xd8>)
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	2302      	movs	r3, #2
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	2282      	movs	r2, #130	; 0x82
 8005990:	4916      	ldr	r1, [pc, #88]	; (80059ec <main+0xdc>)
 8005992:	4817      	ldr	r0, [pc, #92]	; (80059f0 <main+0xe0>)
 8005994:	f7fb faea 	bl	8000f6c <xTaskCreate>
		xTaskCreate(cmd_processing_task, "CMD_PROCESS", configMINIMAL_STACK_SIZE, NULL, 2, &Handle_cmd_processing_task);
 8005998:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <main+0xe4>)
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	2302      	movs	r3, #2
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2300      	movs	r3, #0
 80059a2:	2282      	movs	r2, #130	; 0x82
 80059a4:	4914      	ldr	r1, [pc, #80]	; (80059f8 <main+0xe8>)
 80059a6:	4815      	ldr	r0, [pc, #84]	; (80059fc <main+0xec>)
 80059a8:	f7fb fae0 	bl	8000f6c <xTaskCreate>
		xTaskCreate(uart_write_task, "UART_WRITE", configMINIMAL_STACK_SIZE, NULL, 2, &Handle_uart_write_task);
 80059ac:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <main+0xf0>)
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	2302      	movs	r3, #2
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	2282      	movs	r2, #130	; 0x82
 80059b8:	4912      	ldr	r1, [pc, #72]	; (8005a04 <main+0xf4>)
 80059ba:	4813      	ldr	r0, [pc, #76]	; (8005a08 <main+0xf8>)
 80059bc:	f7fb fad6 	bl	8000f6c <xTaskCreate>

		//start the FreeRtos Task Scheduler
		vTaskStartScheduler();
 80059c0:	f7fb fcde 	bl	8001380 <vTaskStartScheduler>
 80059c4:	e002      	b.n	80059cc <main+0xbc>

	}else{
		printmsg("Failed To create queues\r\n");
 80059c6:	4811      	ldr	r0, [pc, #68]	; (8005a0c <main+0xfc>)
 80059c8:	f000 f97c 	bl	8005cc4 <printmsg>
	}


	for(;;);
 80059cc:	e7fe      	b.n	80059cc <main+0xbc>
 80059ce:	bf00      	nop
 80059d0:	e0001000 	.word	0xe0001000
 80059d4:	20015ce8 	.word	0x20015ce8
 80059d8:	20015cec 	.word	0x20015cec
 80059dc:	20015cd8 	.word	0x20015cd8
 80059e0:	08006c98 	.word	0x08006c98
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	20015cdc 	.word	0x20015cdc
 80059ec:	08006ca4 	.word	0x08006ca4
 80059f0:	08005a4d 	.word	0x08005a4d
 80059f4:	20015ce0 	.word	0x20015ce0
 80059f8:	08006cb0 	.word	0x08006cb0
 80059fc:	08005ab5 	.word	0x08005ab5
 8005a00:	20015ce4 	.word	0x20015ce4
 8005a04:	08006cbc 	.word	0x08006cbc
 8005a08:	08005b69 	.word	0x08005b69
 8005a0c:	08006cc8 	.word	0x08006cc8

08005a10 <menu_display_task>:
}

void menu_display_task(void* params) //this will toggle pin 15 led
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	6078      	str	r0, [r7, #4]
	char* pdata = menu;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <menu_display_task+0x34>)
 8005a1a:	60fb      	str	r3, [r7, #12]
	//task must never return
	while(1){
		xQueueSend(uart_queue,&pdata,portMAX_DELAY);
 8005a1c:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <menu_display_task+0x38>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	f107 010c 	add.w	r1, r7, #12
 8005a24:	2300      	movs	r3, #0
 8005a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a2a:	f7fa fe3b 	bl	80006a4 <xQueueGenericSend>

		//wait till someone notifies
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	2300      	movs	r3, #0
 8005a36:	2200      	movs	r2, #0
 8005a38:	2100      	movs	r1, #0
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f7fc f980 	bl	8001d40 <xTaskGenericNotifyWait>
		xQueueSend(uart_queue,&pdata,portMAX_DELAY);
 8005a40:	e7ec      	b.n	8005a1c <menu_display_task+0xc>
 8005a42:	bf00      	nop
 8005a44:	20000018 	.word	0x20000018
 8005a48:	20015cec 	.word	0x20015cec

08005a4c <cmd_handling_task>:
	};
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself or can call the vtask1_handler
}
void cmd_handling_task(void* params) //this will toggle pin 14 led
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	6078      	str	r0, [r7, #4]
	APP_CMD_t* new_cmd;
	uint8_t command_code=0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]
	//task must never return
	while(1){

		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fc f96b 	bl	8001d40 <xTaskGenericNotifyWait>
		//send command to queue
		new_cmd = (APP_CMD_t*)pvPortMalloc(sizeof(APP_CMD_t));
 8005a6a:	200b      	movs	r0, #11
 8005a6c:	f7fd fa1a 	bl	8002ea4 <pvPortMalloc>
 8005a70:	4603      	mov	r3, r0
 8005a72:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL(); //it will disable all the interrupts having priority lower than max SYSCALL priority
 8005a74:	f7fd f8f4 	bl	8002c60 <vPortEnterCritical>

			command_code  = getCommandCode(command_buffer);
 8005a78:	480c      	ldr	r0, [pc, #48]	; (8005aac <cmd_handling_task+0x60>)
 8005a7a:	f000 f9a5 	bl	8005dc8 <getCommandCode>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	73fb      	strb	r3, [r7, #15]
			new_cmd->CMD = command_code;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	7bfa      	ldrb	r2, [r7, #15]
 8005a86:	701a      	strb	r2, [r3, #0]
			getArguments(new_cmd->CMD_ARGS);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 f9a9 	bl	8005de4 <getArguments>

		taskEXIT_CRITICAL();
 8005a92:	f7fd f913 	bl	8002cbc <vPortExitCritical>

		//send data to the queue
		xQueueSend(command_queue,&new_cmd,portMAX_DELAY);
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <cmd_handling_task+0x64>)
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f107 0108 	add.w	r1, r7, #8
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005aa4:	f7fa fdfe 	bl	80006a4 <xQueueGenericSend>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8005aa8:	e7d6      	b.n	8005a58 <cmd_handling_task+0xc>
 8005aaa:	bf00      	nop
 8005aac:	20015dec 	.word	0x20015dec
 8005ab0:	20015ce8 	.word	0x20015ce8

08005ab4 <cmd_processing_task>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself
}

void cmd_processing_task(void* params) //this will toggle pin 13 led
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b094      	sub	sp, #80	; 0x50
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
	APP_CMD_t* cmd;
	char task_msg[50];
	uint32_t toggle_delay = pdMS_TO_TICKS(600);
 8005abc:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
	//task must never return
	while(1){
		xQueueReceive(command_queue, (void *)&cmd, portMAX_DELAY);
 8005ac2:	4b27      	ldr	r3, [pc, #156]	; (8005b60 <cmd_processing_task+0xac>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fa ffc4 	bl	8000a5c <xQueueReceive>
		switch(cmd->CMD){
 8005ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b06      	cmp	r3, #6
 8005ada:	d82d      	bhi.n	8005b38 <cmd_processing_task+0x84>
 8005adc:	a201      	add	r2, pc, #4	; (adr r2, 8005ae4 <cmd_processing_task+0x30>)
 8005ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae2:	bf00      	nop
 8005ae4:	08005b33 	.word	0x08005b33
 8005ae8:	08005b01 	.word	0x08005b01
 8005aec:	08005b07 	.word	0x08005b07
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b1b 	.word	0x08005b1b
 8005afc:	08005b27 	.word	0x08005b27
		case LED_ON:
			make_led_on();
 8005b00:	f000 f97a 	bl	8005df8 <make_led_on>
			break;
 8005b04:	e027      	b.n	8005b56 <cmd_processing_task+0xa2>
		case LED_OFF:
			make_led_off();
 8005b06:	f000 f983 	bl	8005e10 <make_led_off>
			break;
 8005b0a:	e024      	b.n	8005b56 <cmd_processing_task+0xa2>
		case LED_TOGGLE_START:
			make_led_toggle_start(toggle_delay);
 8005b0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005b0e:	f000 f99b 	bl	8005e48 <make_led_toggle_start>
			break;
 8005b12:	e020      	b.n	8005b56 <cmd_processing_task+0xa2>
		case LED_TOGGLE_STOP:
			make_led_toggle_stop();
 8005b14:	f000 f9c2 	bl	8005e9c <make_led_toggle_stop>
			break;
 8005b18:	e01d      	b.n	8005b56 <cmd_processing_task+0xa2>
		case LED_STATUS_READ:
			make_led_status_read(task_msg);
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f9d2 	bl	8005ec8 <make_led_status_read>
			break;
 8005b24:	e017      	b.n	8005b56 <cmd_processing_task+0xa2>
		case RTC_DATETIME_READ:
			make_rtc_datetime_read(task_msg);
 8005b26:	f107 030c 	add.w	r3, r7, #12
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f9ee 	bl	8005f0c <make_rtc_datetime_read>
			break;
 8005b30:	e011      	b.n	8005b56 <cmd_processing_task+0xa2>
		case EXIT_APP:
			make_exit_app();
 8005b32:	f000 fa1d 	bl	8005f70 <make_exit_app>
			break;
 8005b36:	e00e      	b.n	8005b56 <cmd_processing_task+0xa2>
		default:
			//cmd not found enable the menu printing
			print_errormsg(task_msg);
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f000 fa3b 	bl	8005fb8 <print_errormsg>
			xTaskNotify(Handle_menu_display_task,0,eNoAction);
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <cmd_processing_task+0xb0>)
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	2300      	movs	r3, #0
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2100      	movs	r1, #0
 8005b50:	f7fc f97e 	bl	8001e50 <xTaskGenericNotify>
			break;
 8005b54:	bf00      	nop

		}

		//free the malloc memory created for storing cmd
		vPortFree(cmd);
 8005b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fa7f 	bl	800305c <vPortFree>
		xQueueReceive(command_queue, (void *)&cmd, portMAX_DELAY);
 8005b5e:	e7b0      	b.n	8005ac2 <cmd_processing_task+0xe>
 8005b60:	20015ce8 	.word	0x20015ce8
 8005b64:	20015cd8 	.word	0x20015cd8

08005b68 <uart_write_task>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself
}

void uart_write_task(void* params) //this will toggle pin 13 led
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	char *Data = NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
	//task must never return
	while(1){
		xQueueReceive(uart_queue, &Data, portMAX_DELAY);
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <uart_write_task+0x28>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f107 010c 	add.w	r1, r7, #12
 8005b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fa ff6b 	bl	8000a5c <xQueueReceive>
		printmsg(Data);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f89b 	bl	8005cc4 <printmsg>
		xQueueReceive(uart_queue, &Data, portMAX_DELAY);
 8005b8e:	e7f1      	b.n	8005b74 <uart_write_task+0xc>
 8005b90:	20015cec 	.word	0x20015cec

08005b94 <Init_GPIO_LED>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself
}

void Init_GPIO_LED(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
		//Init GPIOD Peripheral
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	2008      	movs	r0, #8
 8005b9e:	f7ff fbfd 	bl	800539c <RCC_AHB1PeriphClockCmd>
		GPIO_InitTypeDef gpio_led;
		gpio_led.GPIO_Mode = GPIO_Mode_OUT;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	713b      	strb	r3, [r7, #4]
		gpio_led.GPIO_OType = GPIO_OType_PP;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	71bb      	strb	r3, [r7, #6]
		gpio_led.GPIO_PuPd = GPIO_PuPd_UP;
 8005baa:	2301      	movs	r3, #1
 8005bac:	71fb      	strb	r3, [r7, #7]
		gpio_led.GPIO_Pin = GPIO_Pin_15; //blue led
 8005bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bb2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8005bb4:	463b      	mov	r3, r7
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	480f      	ldr	r0, [pc, #60]	; (8005bf8 <Init_GPIO_LED+0x64>)
 8005bba:	f7ff f9d1 	bl	8004f60 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_14; //red led
 8005bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bc2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	480b      	ldr	r0, [pc, #44]	; (8005bf8 <Init_GPIO_LED+0x64>)
 8005bca:	f7ff f9c9 	bl	8004f60 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_13; //orange led
 8005bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bd2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <Init_GPIO_LED+0x64>)
 8005bda:	f7ff f9c1 	bl	8004f60 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_12; //green led
 8005bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005be2:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8005be4:	463b      	mov	r3, r7
 8005be6:	4619      	mov	r1, r3
 8005be8:	4803      	ldr	r0, [pc, #12]	; (8005bf8 <Init_GPIO_LED+0x64>)
 8005bea:	f7ff f9b9 	bl	8004f60 <GPIO_Init>
}
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40020c00 	.word	0x40020c00

08005bfc <Init_UART>:

void Init_UART(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
	//Init uart 4 peripheral clk
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8005c02:	2101      	movs	r1, #1
 8005c04:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005c08:	f7ff fbe8 	bl	80053dc <RCC_APB1PeriphClockCmd>

	//pc10 tx :: pc11 rx
	//enable GPIOC peripheral port
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	2004      	movs	r0, #4
 8005c10:	f7ff fbc4 	bl	800539c <RCC_AHB1PeriphClockCmd>
	//init the pins to alternate function mode
	GPIO_InitTypeDef gpio_uart4;
	memset(&gpio_uart4,0,sizeof(gpio_uart4));
 8005c14:	f107 0310 	add.w	r3, r7, #16
 8005c18:	2208      	movs	r2, #8
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fbbd 	bl	800639c <memset>
	gpio_uart4.GPIO_Pin = GPIO_Pin_10;
 8005c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c26:	613b      	str	r3, [r7, #16]
	gpio_uart4.GPIO_Mode = GPIO_Mode_AF;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	753b      	strb	r3, [r7, #20]
	gpio_uart4.GPIO_PuPd = GPIO_PuPd_UP;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOC, &gpio_uart4);
 8005c30:	f107 0310 	add.w	r3, r7, #16
 8005c34:	4619      	mov	r1, r3
 8005c36:	4821      	ldr	r0, [pc, #132]	; (8005cbc <Init_UART+0xc0>)
 8005c38:	f7ff f992 	bl	8004f60 <GPIO_Init>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_UART4);
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	210a      	movs	r1, #10
 8005c40:	481e      	ldr	r0, [pc, #120]	; (8005cbc <Init_UART+0xc0>)
 8005c42:	f7ff fa65 	bl	8005110 <GPIO_PinAFConfig>

	gpio_uart4.GPIO_Pin = GPIO_Pin_11;
 8005c46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c4a:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &gpio_uart4);
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	4619      	mov	r1, r3
 8005c52:	481a      	ldr	r0, [pc, #104]	; (8005cbc <Init_UART+0xc0>)
 8005c54:	f7ff f984 	bl	8004f60 <GPIO_Init>
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_UART4);
 8005c58:	2208      	movs	r2, #8
 8005c5a:	210b      	movs	r1, #11
 8005c5c:	4817      	ldr	r0, [pc, #92]	; (8005cbc <Init_UART+0xc0>)
 8005c5e:	f7ff fa57 	bl	8005110 <GPIO_PinAFConfig>

	//uart init
	USART_InitTypeDef uart4_init;
	memset(&uart4_init,0,sizeof(uart4_init));
 8005c62:	463b      	mov	r3, r7
 8005c64:	2210      	movs	r2, #16
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fb97 	bl	800639c <memset>
	uart4_init.USART_BaudRate = 115200;
 8005c6e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005c72:	603b      	str	r3, [r7, #0]
	uart4_init.USART_Mode = (USART_Mode_Rx | USART_Mode_Tx);
 8005c74:	230c      	movs	r3, #12
 8005c76:	817b      	strh	r3, [r7, #10]
	uart4_init.USART_Parity = USART_Parity_No;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	813b      	strh	r3, [r7, #8]
	uart4_init.USART_StopBits = USART_StopBits_1;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	80fb      	strh	r3, [r7, #6]
	uart4_init.USART_WordLength = USART_WordLength_8b;
 8005c80:	2300      	movs	r3, #0
 8005c82:	80bb      	strh	r3, [r7, #4]
	uart4_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005c84:	2300      	movs	r3, #0
 8005c86:	81bb      	strh	r3, [r7, #12]
	USART_Init(UART4, &uart4_init);
 8005c88:	463b      	mov	r3, r7
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	480c      	ldr	r0, [pc, #48]	; (8005cc0 <Init_UART+0xc4>)
 8005c8e:	f7ff fc81 	bl	8005594 <USART_Init>

	//enable uart4 RXNE interrupt
	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
 8005c92:	2201      	movs	r2, #1
 8005c94:	f240 5125 	movw	r1, #1317	; 0x525
 8005c98:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <Init_UART+0xc4>)
 8005c9a:	f7ff fd77 	bl	800578c <USART_ITConfig>

	//NVIC UART4 priority
	NVIC_SetPriority(UART4_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1);
 8005c9e:	2106      	movs	r1, #6
 8005ca0:	2034      	movs	r0, #52	; 0x34
 8005ca2:	f7ff fe0b 	bl	80058bc <NVIC_SetPriority>

	//ENABLE NVIC INTERRUPT
	NVIC_EnableIRQ(UART4_IRQn);
 8005ca6:	2034      	movs	r0, #52	; 0x34
 8005ca8:	f7ff fdd4 	bl	8005854 <NVIC_EnableIRQ>

	//enable uart4 peripheral
	USART_Cmd(UART4, ENABLE);
 8005cac:	2101      	movs	r1, #1
 8005cae:	4804      	ldr	r0, [pc, #16]	; (8005cc0 <Init_UART+0xc4>)
 8005cb0:	f7ff fd2a 	bl	8005708 <USART_Cmd>

}
 8005cb4:	bf00      	nop
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40020800 	.word	0x40020800
 8005cc0:	40004c00 	.word	0x40004c00

08005cc4 <printmsg>:

void printmsg(char* msg)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<strlen(msg); i++){
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e013      	b.n	8005cfa <printmsg+0x36>
		while(USART_GetFlagStatus(UART4, USART_FLAG_TXE) != SET); //wait until TXE is not 0
 8005cd2:	bf00      	nop
 8005cd4:	2180      	movs	r1, #128	; 0x80
 8005cd6:	480e      	ldr	r0, [pc, #56]	; (8005d10 <printmsg+0x4c>)
 8005cd8:	f7ff fda0 	bl	800581c <USART_GetFlagStatus>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d1f8      	bne.n	8005cd4 <printmsg+0x10>
		USART_SendData(UART4, msg[i]);
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4619      	mov	r1, r3
 8005cee:	4808      	ldr	r0, [pc, #32]	; (8005d10 <printmsg+0x4c>)
 8005cf0:	f7ff fd2a 	bl	8005748 <USART_SendData>
	for(uint32_t i=0; i<strlen(msg); i++){
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fa fad2 	bl	80002a4 <strlen>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d3e4      	bcc.n	8005cd2 <printmsg+0xe>
	}
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40004c00 	.word	0x40004c00

08005d14 <UART4_IRQHandler>:
{
	vTaskDelay((delay_ms*configTICK_RATE_HZ)/1000);
}


void UART4_IRQHandler(void){
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af02      	add	r7, sp, #8

	uint8_t data_byte;
	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	603b      	str	r3, [r7, #0]
	if(USART_GetFlagStatus(UART4, USART_FLAG_RXNE)){
 8005d1e:	2120      	movs	r1, #32
 8005d20:	4823      	ldr	r0, [pc, #140]	; (8005db0 <UART4_IRQHandler+0x9c>)
 8005d22:	f7ff fd7b 	bl	800581c <USART_GetFlagStatus>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d031      	beq.n	8005d90 <UART4_IRQHandler+0x7c>
		//yes we received some data
		data_byte = (uint8_t)USART_ReceiveData(UART4);
 8005d2c:	4820      	ldr	r0, [pc, #128]	; (8005db0 <UART4_IRQHandler+0x9c>)
 8005d2e:	f7ff fd1d 	bl	800576c <USART_ReceiveData>
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
		command_buffer[command_len++] = data_byte;
 8005d36:	4b1f      	ldr	r3, [pc, #124]	; (8005db4 <UART4_IRQHandler+0xa0>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	b2d1      	uxtb	r1, r2
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <UART4_IRQHandler+0xa0>)
 8005d40:	7011      	strb	r1, [r2, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <UART4_IRQHandler+0xa4>)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	5453      	strb	r3, [r2, r1]
		if(command_len >=(20-1)){
 8005d4a:	4b1a      	ldr	r3, [pc, #104]	; (8005db4 <UART4_IRQHandler+0xa0>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b12      	cmp	r3, #18
 8005d50:	d902      	bls.n	8005d58 <UART4_IRQHandler+0x44>
			command_len=0; //prevent the app from crashing
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <UART4_IRQHandler+0xa0>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	701a      	strb	r2, [r3, #0]
		}
		if(data_byte == '\r'){
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	2b0d      	cmp	r3, #13
 8005d5c:	d118      	bne.n	8005d90 <UART4_IRQHandler+0x7c>
			//reset the command len
			command_len = 0;
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <UART4_IRQHandler+0xa0>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	701a      	strb	r2, [r3, #0]
			//user finished entering command
			//notify command handle task
			xTaskNotifyFromISR(Handle_cmd_handling_task,0,eNoAction,&pxHigherPriorityTaskWoken);
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <UART4_IRQHandler+0xa8>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	463b      	mov	r3, r7
 8005d6a:	9301      	str	r3, [sp, #4]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	2200      	movs	r2, #0
 8005d74:	2100      	movs	r1, #0
 8005d76:	f7fc f959 	bl	800202c <xTaskGenericNotifyFromISR>
			//notify menu print task as well
			xTaskNotifyFromISR(Handle_menu_display_task,0,eNoAction,&pxHigherPriorityTaskWoken);
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <UART4_IRQHandler+0xac>)
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	463b      	mov	r3, r7
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	2300      	movs	r3, #0
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	2300      	movs	r3, #0
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f7fc f94e 	bl	800202c <xTaskGenericNotifyFromISR>
		}
	}
	//if higher priority task woken up then task yield
	if(pxHigherPriorityTaskWoken){
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <UART4_IRQHandler+0x92>
		taskYIELD();
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <UART4_IRQHandler+0xb0>)
 8005d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
	}

}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40004c00 	.word	0x40004c00
 8005db4:	20015cf0 	.word	0x20015cf0
 8005db8:	20015dec 	.word	0x20015dec
 8005dbc:	20015cdc 	.word	0x20015cdc
 8005dc0:	20015cd8 	.word	0x20015cd8
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <getCommandCode>:

uint8_t getCommandCode(uint8_t* buffer)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	return (buffer[0] - 48) ;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	3b30      	subs	r3, #48	; 0x30
 8005dd6:	b2db      	uxtb	r3, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <getArguments>:

void getArguments(uint8_t* data)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <make_led_on>:

void make_led_on(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
	GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8005dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e00:	4802      	ldr	r0, [pc, #8]	; (8005e0c <make_led_on+0x14>)
 8005e02:	f7ff f955 	bl	80050b0 <GPIO_SetBits>
}
 8005e06:	bf00      	nop
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40020c00 	.word	0x40020c00

08005e10 <make_led_off>:
void make_led_off(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
	GPIO_ResetBits(GPIOD, GPIO_Pin_14);
 8005e14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e18:	4802      	ldr	r0, [pc, #8]	; (8005e24 <make_led_off+0x14>)
 8005e1a:	f7ff f958 	bl	80050ce <GPIO_ResetBits>
}
 8005e1e:	bf00      	nop
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40020c00 	.word	0x40020c00

08005e28 <led_toggle>:

void led_toggle(TimerHandle_t xTimer){
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8005e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e34:	4803      	ldr	r0, [pc, #12]	; (8005e44 <led_toggle+0x1c>)
 8005e36:	f7ff f959 	bl	80050ec <GPIO_ToggleBits>
}
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40020c00 	.word	0x40020c00

08005e48 <make_led_toggle_start>:
void make_led_toggle_start(uint32_t toggle_delay)
{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	6078      	str	r0, [r7, #4]
	if(Timer_LedToggle == NULL){
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <make_led_toggle_start+0x48>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d10a      	bne.n	8005e6e <make_led_toggle_start+0x26>
		//create the Software Timer
		Timer_LedToggle = xTimerCreate("LED_TOGGLE_TIMER", toggle_delay, pdTRUE, NULL, led_toggle);
 8005e58:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <make_led_toggle_start+0x4c>)
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2201      	movs	r2, #1
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	480d      	ldr	r0, [pc, #52]	; (8005e98 <make_led_toggle_start+0x50>)
 8005e64:	f7fc fa9c 	bl	80023a0 <xTimerCreate>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	4b09      	ldr	r3, [pc, #36]	; (8005e90 <make_led_toggle_start+0x48>)
 8005e6c:	601a      	str	r2, [r3, #0]
	}
	//start the timer
	xTimerStart(Timer_LedToggle,portMAX_DELAY);
 8005e6e:	4b08      	ldr	r3, [pc, #32]	; (8005e90 <make_led_toggle_start+0x48>)
 8005e70:	681c      	ldr	r4, [r3, #0]
 8005e72:	f7fb fb93 	bl	800159c <xTaskGetTickCount>
 8005e76:	4602      	mov	r2, r0
 8005e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2101      	movs	r1, #1
 8005e82:	4620      	mov	r0, r4
 8005e84:	f7fc fae8 	bl	8002458 <xTimerGenericCommand>

}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd90      	pop	{r4, r7, pc}
 8005e90:	20015cf4 	.word	0x20015cf4
 8005e94:	08005e29 	.word	0x08005e29
 8005e98:	08006ce4 	.word	0x08006ce4

08005e9c <make_led_toggle_stop>:
void make_led_toggle_stop(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af02      	add	r7, sp, #8
	if(Timer_LedToggle != NULL){
 8005ea2:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <make_led_toggle_stop+0x28>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d009      	beq.n	8005ebe <make_led_toggle_stop+0x22>
		//stop the created timer
		xTimerStop(Timer_LedToggle,portMAX_DELAY);
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <make_led_toggle_stop+0x28>)
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2103      	movs	r1, #3
 8005eba:	f7fc facd 	bl	8002458 <xTimerGenericCommand>
	}
}
 8005ebe:	bf00      	nop
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20015cf4 	.word	0x20015cf4

08005ec8 <make_led_status_read>:
void make_led_status_read(char* data)
{
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	sprintf(data, "\r\n LED STATUS is : %d\r\n", GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_14));
 8005ed0:	687c      	ldr	r4, [r7, #4]
 8005ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ed6:	480a      	ldr	r0, [pc, #40]	; (8005f00 <make_led_status_read+0x38>)
 8005ed8:	f7ff f8d0 	bl	800507c <GPIO_ReadOutputDataBit>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4908      	ldr	r1, [pc, #32]	; (8005f04 <make_led_status_read+0x3c>)
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fa62 	bl	80063ac <siprintf>
	xQueueSend(uart_queue,&data,portMAX_DELAY);
 8005ee8:	4b07      	ldr	r3, [pc, #28]	; (8005f08 <make_led_status_read+0x40>)
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	1d39      	adds	r1, r7, #4
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ef4:	f7fa fbd6 	bl	80006a4 <xQueueGenericSend>
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd90      	pop	{r4, r7, pc}
 8005f00:	40020c00 	.word	0x40020c00
 8005f04:	08006cf8 	.word	0x08006cf8
 8005f08:	20015cec 	.word	0x20015cec

08005f0c <make_rtc_datetime_read>:
void make_rtc_datetime_read(char* data)
{
 8005f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f0e:	b089      	sub	sp, #36	; 0x24
 8005f10:	af04      	add	r7, sp, #16
 8005f12:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef RTC_DateStruct;
	RTC_TimeTypeDef RTC_TimeStruct;

	RTC_GetDate(RTC_Format_BIN, &RTC_DateStruct);
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	4619      	mov	r1, r3
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	f7ff fad0 	bl	80054c0 <RTC_GetDate>
	RTC_GetTime(RTC_Format_BIN, &RTC_TimeStruct);
 8005f20:	f107 0308 	add.w	r3, r7, #8
 8005f24:	4619      	mov	r1, r3
 8005f26:	2000      	movs	r0, #0
 8005f28:	f7ff fa78 	bl	800541c <RTC_GetTime>

	sprintf(data,"\r\nYY:MM:DD = %02d:%02d:%02d\r\nHH:MM:SS = %02d:%02d:%02d",RTC_DateStruct.RTC_Year,RTC_DateStruct.RTC_Month,
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	461d      	mov	r5, r3
 8005f32:	7b7b      	ldrb	r3, [r7, #13]
 8005f34:	461e      	mov	r6, r3
			RTC_DateStruct.RTC_Date,RTC_TimeStruct.RTC_Hours,RTC_TimeStruct.RTC_Minutes,RTC_TimeStruct.RTC_Seconds);
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	7a3a      	ldrb	r2, [r7, #8]
 8005f3a:	7a79      	ldrb	r1, [r7, #9]
 8005f3c:	7abc      	ldrb	r4, [r7, #10]
	sprintf(data,"\r\nYY:MM:DD = %02d:%02d:%02d\r\nHH:MM:SS = %02d:%02d:%02d",RTC_DateStruct.RTC_Year,RTC_DateStruct.RTC_Month,
 8005f3e:	9403      	str	r4, [sp, #12]
 8005f40:	9102      	str	r1, [sp, #8]
 8005f42:	9201      	str	r2, [sp, #4]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4633      	mov	r3, r6
 8005f48:	462a      	mov	r2, r5
 8005f4a:	4907      	ldr	r1, [pc, #28]	; (8005f68 <make_rtc_datetime_read+0x5c>)
 8005f4c:	f000 fa2e 	bl	80063ac <siprintf>

	xQueueSend(uart_queue,&data,portMAX_DELAY);
 8005f50:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <make_rtc_datetime_read+0x60>)
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	1d39      	adds	r1, r7, #4
 8005f56:	2300      	movs	r3, #0
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f5c:	f7fa fba2 	bl	80006a4 <xQueueGenericSend>
}
 8005f60:	bf00      	nop
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f68:	08006d10 	.word	0x08006d10
 8005f6c:	20015cec 	.word	0x20015cec

08005f70 <make_exit_app>:

void make_exit_app(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
	//delete all the tasks
	vTaskDelete(Handle_menu_display_task);
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <make_exit_app+0x38>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fb f959 	bl	8001230 <vTaskDelete>
	vTaskDelete(Handle_uart_write_task);
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <make_exit_app+0x3c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fb f954 	bl	8001230 <vTaskDelete>
	vTaskDelete(Handle_cmd_processing_task);
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <make_exit_app+0x40>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fb f94f 	bl	8001230 <vTaskDelete>
	vTaskDelete(Handle_cmd_handling_task);
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <make_exit_app+0x44>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb f94a 	bl	8001230 <vTaskDelete>

	//disable all the interrupts or disable interrupts which you don't require
	NVIC_DisableIRQ(UART4_IRQn); //or use basepri assembly instructions to disable all interrupts portDISABLE_INTERRUPTS();
 8005f9c:	2034      	movs	r0, #52	; 0x34
 8005f9e:	f7ff fc73 	bl	8005888 <NVIC_DisableIRQ>

	//set the cpu in low power mode that will be done by idle hook function

}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20015cd8 	.word	0x20015cd8
 8005fac:	20015ce4 	.word	0x20015ce4
 8005fb0:	20015ce0 	.word	0x20015ce0
 8005fb4:	20015cdc 	.word	0x20015cdc

08005fb8 <print_errormsg>:

void print_errormsg(char* data)
{
 8005fb8:	b5b0      	push	{r4, r5, r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
	sprintf(data, "\r\nCommand Not found\r\n");
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <print_errormsg+0x3c>)
 8005fc4:	461d      	mov	r5, r3
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fca:	6028      	str	r0, [r5, #0]
 8005fcc:	6069      	str	r1, [r5, #4]
 8005fce:	60aa      	str	r2, [r5, #8]
 8005fd0:	60eb      	str	r3, [r5, #12]
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	6128      	str	r0, [r5, #16]
 8005fd6:	88a3      	ldrh	r3, [r4, #4]
 8005fd8:	82ab      	strh	r3, [r5, #20]
	xQueueSend(uart_queue,&data,portMAX_DELAY);
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <print_errormsg+0x40>)
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	1d39      	adds	r1, r7, #4
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fe6:	f7fa fb5d 	bl	80006a4 <xQueueGenericSend>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08006d48 	.word	0x08006d48
 8005ff8:	20015cec 	.word	0x20015cec

08005ffc <vApplicationIdleHook>:

void vApplicationIdleHook(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8006000:	bf30      	wfi
	//send the system in sleep mode
	__WFI();
}
 8006002:	bf00      	nop
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <_sbrk+0x50>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d102      	bne.n	8006022 <_sbrk+0x16>
		heap_end = &end;
 800601c:	4b0f      	ldr	r3, [pc, #60]	; (800605c <_sbrk+0x50>)
 800601e:	4a10      	ldr	r2, [pc, #64]	; (8006060 <_sbrk+0x54>)
 8006020:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <_sbrk+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <_sbrk+0x50>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4413      	add	r3, r2
 8006030:	466a      	mov	r2, sp
 8006032:	4293      	cmp	r3, r2
 8006034:	d907      	bls.n	8006046 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006036:	f000 f96d 	bl	8006314 <__errno>
 800603a:	4602      	mov	r2, r0
 800603c:	230c      	movs	r3, #12
 800603e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006044:	e006      	b.n	8006054 <_sbrk+0x48>
	}

	heap_end += incr;
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <_sbrk+0x50>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4413      	add	r3, r2
 800604e:	4a03      	ldr	r2, [pc, #12]	; (800605c <_sbrk+0x50>)
 8006050:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006052:	68fb      	ldr	r3, [r7, #12]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20015cf8 	.word	0x20015cf8
 8006060:	20015e08 	.word	0x20015e08

08006064 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006068:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <SystemInit+0x60>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <SystemInit+0x60>)
 8006070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006078:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <SystemInit+0x64>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <SystemInit+0x64>)
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006084:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <SystemInit+0x64>)
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <SystemInit+0x64>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <SystemInit+0x64>)
 8006090:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006098:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <SystemInit+0x64>)
 800609c:	4a0b      	ldr	r2, [pc, #44]	; (80060cc <SystemInit+0x68>)
 800609e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <SystemInit+0x64>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <SystemInit+0x64>)
 80060a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <SystemInit+0x64>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80060b2:	f000 f889 	bl	80061c8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060b6:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <SystemInit+0x60>)
 80060b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80060bc:	609a      	str	r2, [r3, #8]
#endif
}
 80060be:	bf00      	nop
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	e000ed00 	.word	0xe000ed00
 80060c8:	40023800 	.word	0x40023800
 80060cc:	24003010 	.word	0x24003010

080060d0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	2302      	movs	r3, #2
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	2300      	movs	r3, #0
 80060e4:	60bb      	str	r3, [r7, #8]
 80060e6:	2302      	movs	r3, #2
 80060e8:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80060ea:	4b32      	ldr	r3, [pc, #200]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d007      	beq.n	800610a <SystemCoreClockUpdate+0x3a>
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d009      	beq.n	8006112 <SystemCoreClockUpdate+0x42>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d13d      	bne.n	800617e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8006102:	4b2d      	ldr	r3, [pc, #180]	; (80061b8 <SystemCoreClockUpdate+0xe8>)
 8006104:	4a2d      	ldr	r2, [pc, #180]	; (80061bc <SystemCoreClockUpdate+0xec>)
 8006106:	601a      	str	r2, [r3, #0]
      break;
 8006108:	e03d      	b.n	8006186 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <SystemCoreClockUpdate+0xe8>)
 800610c:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <SystemCoreClockUpdate+0xf0>)
 800610e:	601a      	str	r2, [r3, #0]
      break;
 8006110:	e039      	b.n	8006186 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006112:	4b28      	ldr	r3, [pc, #160]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	0d9b      	lsrs	r3, r3, #22
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800611e:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006126:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800612e:	4a24      	ldr	r2, [pc, #144]	; (80061c0 <SystemCoreClockUpdate+0xf0>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	4a1f      	ldr	r2, [pc, #124]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 8006138:	6852      	ldr	r2, [r2, #4]
 800613a:	0992      	lsrs	r2, r2, #6
 800613c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e00b      	b.n	8006160 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <SystemCoreClockUpdate+0xec>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 8006152:	6852      	ldr	r2, [r2, #4]
 8006154:	0992      	lsrs	r2, r2, #6
 8006156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006160:	4b14      	ldr	r3, [pc, #80]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	0c1b      	lsrs	r3, r3, #16
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	3301      	adds	r3, #1
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	4a0f      	ldr	r2, [pc, #60]	; (80061b8 <SystemCoreClockUpdate+0xe8>)
 800617a:	6013      	str	r3, [r2, #0]
      break;
 800617c:	e003      	b.n	8006186 <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 800617e:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <SystemCoreClockUpdate+0xe8>)
 8006180:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <SystemCoreClockUpdate+0xec>)
 8006182:	601a      	str	r2, [r3, #0]
      break;
 8006184:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <SystemCoreClockUpdate+0xe4>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	091b      	lsrs	r3, r3, #4
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <SystemCoreClockUpdate+0xf4>)
 8006192:	5cd3      	ldrb	r3, [r2, r3]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <SystemCoreClockUpdate+0xe8>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	fa22 f303 	lsr.w	r3, r2, r3
 80061a2:	4a05      	ldr	r2, [pc, #20]	; (80061b8 <SystemCoreClockUpdate+0xe8>)
 80061a4:	6013      	str	r3, [r2, #0]
}
 80061a6:	bf00      	nop
 80061a8:	371c      	adds	r7, #28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40023800 	.word	0x40023800
 80061b8:	2000010c 	.word	0x2000010c
 80061bc:	00f42400 	.word	0x00f42400
 80061c0:	017d7840 	.word	0x017d7840
 80061c4:	20000110 	.word	0x20000110

080061c8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	607b      	str	r3, [r7, #4]
 80061d2:	2300      	movs	r3, #0
 80061d4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80061d6:	4b36      	ldr	r3, [pc, #216]	; (80062b0 <SetSysClock+0xe8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a35      	ldr	r2, [pc, #212]	; (80062b0 <SetSysClock+0xe8>)
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80061e2:	4b33      	ldr	r3, [pc, #204]	; (80062b0 <SetSysClock+0xe8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ea:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3301      	adds	r3, #1
 80061f0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <SetSysClock+0x38>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80061fe:	d1f0      	bne.n	80061e2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006200:	4b2b      	ldr	r3, [pc, #172]	; (80062b0 <SetSysClock+0xe8>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800620c:	2301      	movs	r3, #1
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	e001      	b.n	8006216 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8006212:	2300      	movs	r3, #0
 8006214:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d142      	bne.n	80062a2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800621c:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <SetSysClock+0xe8>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	4a23      	ldr	r2, [pc, #140]	; (80062b0 <SetSysClock+0xe8>)
 8006222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006226:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8006228:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <SetSysClock+0xec>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <SetSysClock+0xec>)
 800622e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006232:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8006234:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <SetSysClock+0xe8>)
 8006236:	4a1e      	ldr	r2, [pc, #120]	; (80062b0 <SetSysClock+0xe8>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800623c:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <SetSysClock+0xe8>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <SetSysClock+0xe8>)
 8006242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006246:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006248:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <SetSysClock+0xe8>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <SetSysClock+0xe8>)
 800624e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8006252:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <SetSysClock+0xe8>)
 8006256:	4a18      	ldr	r2, [pc, #96]	; (80062b8 <SetSysClock+0xf0>)
 8006258:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800625a:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <SetSysClock+0xe8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a14      	ldr	r2, [pc, #80]	; (80062b0 <SetSysClock+0xe8>)
 8006260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8006266:	bf00      	nop
 8006268:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <SetSysClock+0xe8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d0f9      	beq.n	8006268 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8006274:	4b11      	ldr	r3, [pc, #68]	; (80062bc <SetSysClock+0xf4>)
 8006276:	f240 7205 	movw	r2, #1797	; 0x705
 800627a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <SetSysClock+0xe8>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4a0b      	ldr	r2, [pc, #44]	; (80062b0 <SetSysClock+0xe8>)
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006288:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <SetSysClock+0xe8>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <SetSysClock+0xe8>)
 800628e:	f043 0302 	orr.w	r3, r3, #2
 8006292:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8006294:	bf00      	nop
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <SetSysClock+0xe8>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d1f9      	bne.n	8006296 <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40023800 	.word	0x40023800
 80062b4:	40007000 	.word	0x40007000
 80062b8:	07405419 	.word	0x07405419
 80062bc:	40023c00 	.word	0x40023c00

080062c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80062c0:	480d      	ldr	r0, [pc, #52]	; (80062f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80062c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062c4:	480d      	ldr	r0, [pc, #52]	; (80062fc <LoopForever+0x6>)
  ldr r1, =_edata
 80062c6:	490e      	ldr	r1, [pc, #56]	; (8006300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062c8:	4a0e      	ldr	r2, [pc, #56]	; (8006304 <LoopForever+0xe>)
  movs r3, #0
 80062ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062cc:	e002      	b.n	80062d4 <LoopCopyDataInit>

080062ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062d2:	3304      	adds	r3, #4

080062d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062d8:	d3f9      	bcc.n	80062ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062da:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062dc:	4c0b      	ldr	r4, [pc, #44]	; (800630c <LoopForever+0x16>)
  movs r3, #0
 80062de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062e0:	e001      	b.n	80062e6 <LoopFillZerobss>

080062e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062e4:	3204      	adds	r2, #4

080062e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062e8:	d3fb      	bcc.n	80062e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80062ea:	f7ff febb 	bl	8006064 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80062ee:	f000 f817 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80062f2:	f7ff fb0d 	bl	8005910 <main>

080062f6 <LoopForever>:

LoopForever:
    b LoopForever
 80062f6:	e7fe      	b.n	80062f6 <LoopForever>
  ldr   r0, =_estack
 80062f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80062fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006300:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8006304:	08006db0 	.word	0x08006db0
  ldr r2, =_sbss
 8006308:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800630c:	20015e04 	.word	0x20015e04

08006310 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006310:	e7fe      	b.n	8006310 <ADC_IRQHandler>
	...

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	; (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000120 	.word	0x20000120

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4e0d      	ldr	r6, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1ba4      	subs	r4, r4, r6
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2500      	movs	r5, #0
 800632c:	42a5      	cmp	r5, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4e0b      	ldr	r6, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f000 fc36 	bl	8006ba4 <_init>
 8006338:	1ba4      	subs	r4, r4, r6
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2500      	movs	r5, #0
 800633e:	42a5      	cmp	r5, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006348:	4798      	blx	r3
 800634a:	3501      	adds	r5, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006352:	4798      	blx	r3
 8006354:	3501      	adds	r5, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	08006da8 	.word	0x08006da8
 800635c:	08006da8 	.word	0x08006da8
 8006360:	08006da8 	.word	0x08006da8
 8006364:	08006dac 	.word	0x08006dac

08006368 <memcmp>:
 8006368:	b530      	push	{r4, r5, lr}
 800636a:	2400      	movs	r4, #0
 800636c:	42a2      	cmp	r2, r4
 800636e:	d101      	bne.n	8006374 <memcmp+0xc>
 8006370:	2000      	movs	r0, #0
 8006372:	e007      	b.n	8006384 <memcmp+0x1c>
 8006374:	5d03      	ldrb	r3, [r0, r4]
 8006376:	3401      	adds	r4, #1
 8006378:	190d      	adds	r5, r1, r4
 800637a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800637e:	42ab      	cmp	r3, r5
 8006380:	d0f4      	beq.n	800636c <memcmp+0x4>
 8006382:	1b58      	subs	r0, r3, r5
 8006384:	bd30      	pop	{r4, r5, pc}

08006386 <memcpy>:
 8006386:	b510      	push	{r4, lr}
 8006388:	1e43      	subs	r3, r0, #1
 800638a:	440a      	add	r2, r1
 800638c:	4291      	cmp	r1, r2
 800638e:	d100      	bne.n	8006392 <memcpy+0xc>
 8006390:	bd10      	pop	{r4, pc}
 8006392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639a:	e7f7      	b.n	800638c <memcpy+0x6>

0800639c <memset>:
 800639c:	4402      	add	r2, r0
 800639e:	4603      	mov	r3, r0
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d100      	bne.n	80063a6 <memset+0xa>
 80063a4:	4770      	bx	lr
 80063a6:	f803 1b01 	strb.w	r1, [r3], #1
 80063aa:	e7f9      	b.n	80063a0 <memset+0x4>

080063ac <siprintf>:
 80063ac:	b40e      	push	{r1, r2, r3}
 80063ae:	b500      	push	{lr}
 80063b0:	b09c      	sub	sp, #112	; 0x70
 80063b2:	ab1d      	add	r3, sp, #116	; 0x74
 80063b4:	9002      	str	r0, [sp, #8]
 80063b6:	9006      	str	r0, [sp, #24]
 80063b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063bc:	4809      	ldr	r0, [pc, #36]	; (80063e4 <siprintf+0x38>)
 80063be:	9107      	str	r1, [sp, #28]
 80063c0:	9104      	str	r1, [sp, #16]
 80063c2:	4909      	ldr	r1, [pc, #36]	; (80063e8 <siprintf+0x3c>)
 80063c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80063c8:	9105      	str	r1, [sp, #20]
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	a902      	add	r1, sp, #8
 80063d0:	f000 f866 	bl	80064a0 <_svfiprintf_r>
 80063d4:	9b02      	ldr	r3, [sp, #8]
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	b01c      	add	sp, #112	; 0x70
 80063dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80063e0:	b003      	add	sp, #12
 80063e2:	4770      	bx	lr
 80063e4:	20000120 	.word	0x20000120
 80063e8:	ffff0208 	.word	0xffff0208

080063ec <__ssputs_r>:
 80063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	688e      	ldr	r6, [r1, #8]
 80063f2:	429e      	cmp	r6, r3
 80063f4:	4682      	mov	sl, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	4690      	mov	r8, r2
 80063fa:	4699      	mov	r9, r3
 80063fc:	d837      	bhi.n	800646e <__ssputs_r+0x82>
 80063fe:	898a      	ldrh	r2, [r1, #12]
 8006400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006404:	d031      	beq.n	800646a <__ssputs_r+0x7e>
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	6909      	ldr	r1, [r1, #16]
 800640a:	1a6f      	subs	r7, r5, r1
 800640c:	6965      	ldr	r5, [r4, #20]
 800640e:	2302      	movs	r3, #2
 8006410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006414:	fb95 f5f3 	sdiv	r5, r5, r3
 8006418:	f109 0301 	add.w	r3, r9, #1
 800641c:	443b      	add	r3, r7
 800641e:	429d      	cmp	r5, r3
 8006420:	bf38      	it	cc
 8006422:	461d      	movcc	r5, r3
 8006424:	0553      	lsls	r3, r2, #21
 8006426:	d530      	bpl.n	800648a <__ssputs_r+0x9e>
 8006428:	4629      	mov	r1, r5
 800642a:	f000 fb21 	bl	8006a70 <_malloc_r>
 800642e:	4606      	mov	r6, r0
 8006430:	b950      	cbnz	r0, 8006448 <__ssputs_r+0x5c>
 8006432:	230c      	movs	r3, #12
 8006434:	f8ca 3000 	str.w	r3, [sl]
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	463a      	mov	r2, r7
 800644a:	6921      	ldr	r1, [r4, #16]
 800644c:	f7ff ff9b 	bl	8006386 <memcpy>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645a:	81a3      	strh	r3, [r4, #12]
 800645c:	6126      	str	r6, [r4, #16]
 800645e:	6165      	str	r5, [r4, #20]
 8006460:	443e      	add	r6, r7
 8006462:	1bed      	subs	r5, r5, r7
 8006464:	6026      	str	r6, [r4, #0]
 8006466:	60a5      	str	r5, [r4, #8]
 8006468:	464e      	mov	r6, r9
 800646a:	454e      	cmp	r6, r9
 800646c:	d900      	bls.n	8006470 <__ssputs_r+0x84>
 800646e:	464e      	mov	r6, r9
 8006470:	4632      	mov	r2, r6
 8006472:	4641      	mov	r1, r8
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	f000 fa93 	bl	80069a0 <memmove>
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	1b9b      	subs	r3, r3, r6
 800647e:	60a3      	str	r3, [r4, #8]
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	441e      	add	r6, r3
 8006484:	6026      	str	r6, [r4, #0]
 8006486:	2000      	movs	r0, #0
 8006488:	e7dc      	b.n	8006444 <__ssputs_r+0x58>
 800648a:	462a      	mov	r2, r5
 800648c:	f000 fb4a 	bl	8006b24 <_realloc_r>
 8006490:	4606      	mov	r6, r0
 8006492:	2800      	cmp	r0, #0
 8006494:	d1e2      	bne.n	800645c <__ssputs_r+0x70>
 8006496:	6921      	ldr	r1, [r4, #16]
 8006498:	4650      	mov	r0, sl
 800649a:	f000 fa9b 	bl	80069d4 <_free_r>
 800649e:	e7c8      	b.n	8006432 <__ssputs_r+0x46>

080064a0 <_svfiprintf_r>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	461d      	mov	r5, r3
 80064a6:	898b      	ldrh	r3, [r1, #12]
 80064a8:	061f      	lsls	r7, r3, #24
 80064aa:	b09d      	sub	sp, #116	; 0x74
 80064ac:	4680      	mov	r8, r0
 80064ae:	460c      	mov	r4, r1
 80064b0:	4616      	mov	r6, r2
 80064b2:	d50f      	bpl.n	80064d4 <_svfiprintf_r+0x34>
 80064b4:	690b      	ldr	r3, [r1, #16]
 80064b6:	b96b      	cbnz	r3, 80064d4 <_svfiprintf_r+0x34>
 80064b8:	2140      	movs	r1, #64	; 0x40
 80064ba:	f000 fad9 	bl	8006a70 <_malloc_r>
 80064be:	6020      	str	r0, [r4, #0]
 80064c0:	6120      	str	r0, [r4, #16]
 80064c2:	b928      	cbnz	r0, 80064d0 <_svfiprintf_r+0x30>
 80064c4:	230c      	movs	r3, #12
 80064c6:	f8c8 3000 	str.w	r3, [r8]
 80064ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064ce:	e0c8      	b.n	8006662 <_svfiprintf_r+0x1c2>
 80064d0:	2340      	movs	r3, #64	; 0x40
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	2300      	movs	r3, #0
 80064d6:	9309      	str	r3, [sp, #36]	; 0x24
 80064d8:	2320      	movs	r3, #32
 80064da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064de:	2330      	movs	r3, #48	; 0x30
 80064e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064e4:	9503      	str	r5, [sp, #12]
 80064e6:	f04f 0b01 	mov.w	fp, #1
 80064ea:	4637      	mov	r7, r6
 80064ec:	463d      	mov	r5, r7
 80064ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064f2:	b10b      	cbz	r3, 80064f8 <_svfiprintf_r+0x58>
 80064f4:	2b25      	cmp	r3, #37	; 0x25
 80064f6:	d13e      	bne.n	8006576 <_svfiprintf_r+0xd6>
 80064f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80064fc:	d00b      	beq.n	8006516 <_svfiprintf_r+0x76>
 80064fe:	4653      	mov	r3, sl
 8006500:	4632      	mov	r2, r6
 8006502:	4621      	mov	r1, r4
 8006504:	4640      	mov	r0, r8
 8006506:	f7ff ff71 	bl	80063ec <__ssputs_r>
 800650a:	3001      	adds	r0, #1
 800650c:	f000 80a4 	beq.w	8006658 <_svfiprintf_r+0x1b8>
 8006510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006512:	4453      	add	r3, sl
 8006514:	9309      	str	r3, [sp, #36]	; 0x24
 8006516:	783b      	ldrb	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 809d 	beq.w	8006658 <_svfiprintf_r+0x1b8>
 800651e:	2300      	movs	r3, #0
 8006520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006528:	9304      	str	r3, [sp, #16]
 800652a:	9307      	str	r3, [sp, #28]
 800652c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006530:	931a      	str	r3, [sp, #104]	; 0x68
 8006532:	462f      	mov	r7, r5
 8006534:	2205      	movs	r2, #5
 8006536:	f817 1b01 	ldrb.w	r1, [r7], #1
 800653a:	4850      	ldr	r0, [pc, #320]	; (800667c <_svfiprintf_r+0x1dc>)
 800653c:	f7f9 fec0 	bl	80002c0 <memchr>
 8006540:	9b04      	ldr	r3, [sp, #16]
 8006542:	b9d0      	cbnz	r0, 800657a <_svfiprintf_r+0xda>
 8006544:	06d9      	lsls	r1, r3, #27
 8006546:	bf44      	itt	mi
 8006548:	2220      	movmi	r2, #32
 800654a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800654e:	071a      	lsls	r2, r3, #28
 8006550:	bf44      	itt	mi
 8006552:	222b      	movmi	r2, #43	; 0x2b
 8006554:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006558:	782a      	ldrb	r2, [r5, #0]
 800655a:	2a2a      	cmp	r2, #42	; 0x2a
 800655c:	d015      	beq.n	800658a <_svfiprintf_r+0xea>
 800655e:	9a07      	ldr	r2, [sp, #28]
 8006560:	462f      	mov	r7, r5
 8006562:	2000      	movs	r0, #0
 8006564:	250a      	movs	r5, #10
 8006566:	4639      	mov	r1, r7
 8006568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800656c:	3b30      	subs	r3, #48	; 0x30
 800656e:	2b09      	cmp	r3, #9
 8006570:	d94d      	bls.n	800660e <_svfiprintf_r+0x16e>
 8006572:	b1b8      	cbz	r0, 80065a4 <_svfiprintf_r+0x104>
 8006574:	e00f      	b.n	8006596 <_svfiprintf_r+0xf6>
 8006576:	462f      	mov	r7, r5
 8006578:	e7b8      	b.n	80064ec <_svfiprintf_r+0x4c>
 800657a:	4a40      	ldr	r2, [pc, #256]	; (800667c <_svfiprintf_r+0x1dc>)
 800657c:	1a80      	subs	r0, r0, r2
 800657e:	fa0b f000 	lsl.w	r0, fp, r0
 8006582:	4318      	orrs	r0, r3
 8006584:	9004      	str	r0, [sp, #16]
 8006586:	463d      	mov	r5, r7
 8006588:	e7d3      	b.n	8006532 <_svfiprintf_r+0x92>
 800658a:	9a03      	ldr	r2, [sp, #12]
 800658c:	1d11      	adds	r1, r2, #4
 800658e:	6812      	ldr	r2, [r2, #0]
 8006590:	9103      	str	r1, [sp, #12]
 8006592:	2a00      	cmp	r2, #0
 8006594:	db01      	blt.n	800659a <_svfiprintf_r+0xfa>
 8006596:	9207      	str	r2, [sp, #28]
 8006598:	e004      	b.n	80065a4 <_svfiprintf_r+0x104>
 800659a:	4252      	negs	r2, r2
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	9207      	str	r2, [sp, #28]
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	783b      	ldrb	r3, [r7, #0]
 80065a6:	2b2e      	cmp	r3, #46	; 0x2e
 80065a8:	d10c      	bne.n	80065c4 <_svfiprintf_r+0x124>
 80065aa:	787b      	ldrb	r3, [r7, #1]
 80065ac:	2b2a      	cmp	r3, #42	; 0x2a
 80065ae:	d133      	bne.n	8006618 <_svfiprintf_r+0x178>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	1d1a      	adds	r2, r3, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	9203      	str	r2, [sp, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bfb8      	it	lt
 80065bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80065c0:	3702      	adds	r7, #2
 80065c2:	9305      	str	r3, [sp, #20]
 80065c4:	4d2e      	ldr	r5, [pc, #184]	; (8006680 <_svfiprintf_r+0x1e0>)
 80065c6:	7839      	ldrb	r1, [r7, #0]
 80065c8:	2203      	movs	r2, #3
 80065ca:	4628      	mov	r0, r5
 80065cc:	f7f9 fe78 	bl	80002c0 <memchr>
 80065d0:	b138      	cbz	r0, 80065e2 <_svfiprintf_r+0x142>
 80065d2:	2340      	movs	r3, #64	; 0x40
 80065d4:	1b40      	subs	r0, r0, r5
 80065d6:	fa03 f000 	lsl.w	r0, r3, r0
 80065da:	9b04      	ldr	r3, [sp, #16]
 80065dc:	4303      	orrs	r3, r0
 80065de:	3701      	adds	r7, #1
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	7839      	ldrb	r1, [r7, #0]
 80065e4:	4827      	ldr	r0, [pc, #156]	; (8006684 <_svfiprintf_r+0x1e4>)
 80065e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ea:	2206      	movs	r2, #6
 80065ec:	1c7e      	adds	r6, r7, #1
 80065ee:	f7f9 fe67 	bl	80002c0 <memchr>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d038      	beq.n	8006668 <_svfiprintf_r+0x1c8>
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <_svfiprintf_r+0x1e8>)
 80065f8:	bb13      	cbnz	r3, 8006640 <_svfiprintf_r+0x1a0>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	3307      	adds	r3, #7
 80065fe:	f023 0307 	bic.w	r3, r3, #7
 8006602:	3308      	adds	r3, #8
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006608:	444b      	add	r3, r9
 800660a:	9309      	str	r3, [sp, #36]	; 0x24
 800660c:	e76d      	b.n	80064ea <_svfiprintf_r+0x4a>
 800660e:	fb05 3202 	mla	r2, r5, r2, r3
 8006612:	2001      	movs	r0, #1
 8006614:	460f      	mov	r7, r1
 8006616:	e7a6      	b.n	8006566 <_svfiprintf_r+0xc6>
 8006618:	2300      	movs	r3, #0
 800661a:	3701      	adds	r7, #1
 800661c:	9305      	str	r3, [sp, #20]
 800661e:	4619      	mov	r1, r3
 8006620:	250a      	movs	r5, #10
 8006622:	4638      	mov	r0, r7
 8006624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006628:	3a30      	subs	r2, #48	; 0x30
 800662a:	2a09      	cmp	r2, #9
 800662c:	d903      	bls.n	8006636 <_svfiprintf_r+0x196>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0c8      	beq.n	80065c4 <_svfiprintf_r+0x124>
 8006632:	9105      	str	r1, [sp, #20]
 8006634:	e7c6      	b.n	80065c4 <_svfiprintf_r+0x124>
 8006636:	fb05 2101 	mla	r1, r5, r1, r2
 800663a:	2301      	movs	r3, #1
 800663c:	4607      	mov	r7, r0
 800663e:	e7f0      	b.n	8006622 <_svfiprintf_r+0x182>
 8006640:	ab03      	add	r3, sp, #12
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4622      	mov	r2, r4
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <_svfiprintf_r+0x1ec>)
 8006648:	a904      	add	r1, sp, #16
 800664a:	4640      	mov	r0, r8
 800664c:	f3af 8000 	nop.w
 8006650:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006654:	4681      	mov	r9, r0
 8006656:	d1d6      	bne.n	8006606 <_svfiprintf_r+0x166>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	065b      	lsls	r3, r3, #25
 800665c:	f53f af35 	bmi.w	80064ca <_svfiprintf_r+0x2a>
 8006660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006662:	b01d      	add	sp, #116	; 0x74
 8006664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	ab03      	add	r3, sp, #12
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4622      	mov	r2, r4
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <_svfiprintf_r+0x1ec>)
 8006670:	a904      	add	r1, sp, #16
 8006672:	4640      	mov	r0, r8
 8006674:	f000 f882 	bl	800677c <_printf_i>
 8006678:	e7ea      	b.n	8006650 <_svfiprintf_r+0x1b0>
 800667a:	bf00      	nop
 800667c:	08006d72 	.word	0x08006d72
 8006680:	08006d78 	.word	0x08006d78
 8006684:	08006d7c 	.word	0x08006d7c
 8006688:	00000000 	.word	0x00000000
 800668c:	080063ed 	.word	0x080063ed

08006690 <_printf_common>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	4691      	mov	r9, r2
 8006696:	461f      	mov	r7, r3
 8006698:	688a      	ldr	r2, [r1, #8]
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bfb8      	it	lt
 80066a4:	4613      	movlt	r3, r2
 80066a6:	f8c9 3000 	str.w	r3, [r9]
 80066aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ae:	4606      	mov	r6, r0
 80066b0:	460c      	mov	r4, r1
 80066b2:	b112      	cbz	r2, 80066ba <_printf_common+0x2a>
 80066b4:	3301      	adds	r3, #1
 80066b6:	f8c9 3000 	str.w	r3, [r9]
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	0699      	lsls	r1, r3, #26
 80066be:	bf42      	ittt	mi
 80066c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066c4:	3302      	addmi	r3, #2
 80066c6:	f8c9 3000 	strmi.w	r3, [r9]
 80066ca:	6825      	ldr	r5, [r4, #0]
 80066cc:	f015 0506 	ands.w	r5, r5, #6
 80066d0:	d107      	bne.n	80066e2 <_printf_common+0x52>
 80066d2:	f104 0a19 	add.w	sl, r4, #25
 80066d6:	68e3      	ldr	r3, [r4, #12]
 80066d8:	f8d9 2000 	ldr.w	r2, [r9]
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	42ab      	cmp	r3, r5
 80066e0:	dc28      	bgt.n	8006734 <_printf_common+0xa4>
 80066e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	3300      	adds	r3, #0
 80066ea:	bf18      	it	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	0692      	lsls	r2, r2, #26
 80066f0:	d42d      	bmi.n	800674e <_printf_common+0xbe>
 80066f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066f6:	4639      	mov	r1, r7
 80066f8:	4630      	mov	r0, r6
 80066fa:	47c0      	blx	r8
 80066fc:	3001      	adds	r0, #1
 80066fe:	d020      	beq.n	8006742 <_printf_common+0xb2>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	68e5      	ldr	r5, [r4, #12]
 8006704:	f8d9 2000 	ldr.w	r2, [r9]
 8006708:	f003 0306 	and.w	r3, r3, #6
 800670c:	2b04      	cmp	r3, #4
 800670e:	bf08      	it	eq
 8006710:	1aad      	subeq	r5, r5, r2
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	bf0c      	ite	eq
 8006718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800671c:	2500      	movne	r5, #0
 800671e:	4293      	cmp	r3, r2
 8006720:	bfc4      	itt	gt
 8006722:	1a9b      	subgt	r3, r3, r2
 8006724:	18ed      	addgt	r5, r5, r3
 8006726:	f04f 0900 	mov.w	r9, #0
 800672a:	341a      	adds	r4, #26
 800672c:	454d      	cmp	r5, r9
 800672e:	d11a      	bne.n	8006766 <_printf_common+0xd6>
 8006730:	2000      	movs	r0, #0
 8006732:	e008      	b.n	8006746 <_printf_common+0xb6>
 8006734:	2301      	movs	r3, #1
 8006736:	4652      	mov	r2, sl
 8006738:	4639      	mov	r1, r7
 800673a:	4630      	mov	r0, r6
 800673c:	47c0      	blx	r8
 800673e:	3001      	adds	r0, #1
 8006740:	d103      	bne.n	800674a <_printf_common+0xba>
 8006742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674a:	3501      	adds	r5, #1
 800674c:	e7c3      	b.n	80066d6 <_printf_common+0x46>
 800674e:	18e1      	adds	r1, r4, r3
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	2030      	movs	r0, #48	; 0x30
 8006754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006758:	4422      	add	r2, r4
 800675a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800675e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006762:	3302      	adds	r3, #2
 8006764:	e7c5      	b.n	80066f2 <_printf_common+0x62>
 8006766:	2301      	movs	r3, #1
 8006768:	4622      	mov	r2, r4
 800676a:	4639      	mov	r1, r7
 800676c:	4630      	mov	r0, r6
 800676e:	47c0      	blx	r8
 8006770:	3001      	adds	r0, #1
 8006772:	d0e6      	beq.n	8006742 <_printf_common+0xb2>
 8006774:	f109 0901 	add.w	r9, r9, #1
 8006778:	e7d8      	b.n	800672c <_printf_common+0x9c>
	...

0800677c <_printf_i>:
 800677c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006780:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006784:	460c      	mov	r4, r1
 8006786:	7e09      	ldrb	r1, [r1, #24]
 8006788:	b085      	sub	sp, #20
 800678a:	296e      	cmp	r1, #110	; 0x6e
 800678c:	4617      	mov	r7, r2
 800678e:	4606      	mov	r6, r0
 8006790:	4698      	mov	r8, r3
 8006792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006794:	f000 80b3 	beq.w	80068fe <_printf_i+0x182>
 8006798:	d822      	bhi.n	80067e0 <_printf_i+0x64>
 800679a:	2963      	cmp	r1, #99	; 0x63
 800679c:	d036      	beq.n	800680c <_printf_i+0x90>
 800679e:	d80a      	bhi.n	80067b6 <_printf_i+0x3a>
 80067a0:	2900      	cmp	r1, #0
 80067a2:	f000 80b9 	beq.w	8006918 <_printf_i+0x19c>
 80067a6:	2958      	cmp	r1, #88	; 0x58
 80067a8:	f000 8083 	beq.w	80068b2 <_printf_i+0x136>
 80067ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067b4:	e032      	b.n	800681c <_printf_i+0xa0>
 80067b6:	2964      	cmp	r1, #100	; 0x64
 80067b8:	d001      	beq.n	80067be <_printf_i+0x42>
 80067ba:	2969      	cmp	r1, #105	; 0x69
 80067bc:	d1f6      	bne.n	80067ac <_printf_i+0x30>
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	0605      	lsls	r5, r0, #24
 80067c4:	f103 0104 	add.w	r1, r3, #4
 80067c8:	d52a      	bpl.n	8006820 <_printf_i+0xa4>
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6011      	str	r1, [r2, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da03      	bge.n	80067da <_printf_i+0x5e>
 80067d2:	222d      	movs	r2, #45	; 0x2d
 80067d4:	425b      	negs	r3, r3
 80067d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067da:	486f      	ldr	r0, [pc, #444]	; (8006998 <_printf_i+0x21c>)
 80067dc:	220a      	movs	r2, #10
 80067de:	e039      	b.n	8006854 <_printf_i+0xd8>
 80067e0:	2973      	cmp	r1, #115	; 0x73
 80067e2:	f000 809d 	beq.w	8006920 <_printf_i+0x1a4>
 80067e6:	d808      	bhi.n	80067fa <_printf_i+0x7e>
 80067e8:	296f      	cmp	r1, #111	; 0x6f
 80067ea:	d020      	beq.n	800682e <_printf_i+0xb2>
 80067ec:	2970      	cmp	r1, #112	; 0x70
 80067ee:	d1dd      	bne.n	80067ac <_printf_i+0x30>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	f043 0320 	orr.w	r3, r3, #32
 80067f6:	6023      	str	r3, [r4, #0]
 80067f8:	e003      	b.n	8006802 <_printf_i+0x86>
 80067fa:	2975      	cmp	r1, #117	; 0x75
 80067fc:	d017      	beq.n	800682e <_printf_i+0xb2>
 80067fe:	2978      	cmp	r1, #120	; 0x78
 8006800:	d1d4      	bne.n	80067ac <_printf_i+0x30>
 8006802:	2378      	movs	r3, #120	; 0x78
 8006804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006808:	4864      	ldr	r0, [pc, #400]	; (800699c <_printf_i+0x220>)
 800680a:	e055      	b.n	80068b8 <_printf_i+0x13c>
 800680c:	6813      	ldr	r3, [r2, #0]
 800680e:	1d19      	adds	r1, r3, #4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6011      	str	r1, [r2, #0]
 8006814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800681c:	2301      	movs	r3, #1
 800681e:	e08c      	b.n	800693a <_printf_i+0x1be>
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6011      	str	r1, [r2, #0]
 8006824:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006828:	bf18      	it	ne
 800682a:	b21b      	sxthne	r3, r3
 800682c:	e7cf      	b.n	80067ce <_printf_i+0x52>
 800682e:	6813      	ldr	r3, [r2, #0]
 8006830:	6825      	ldr	r5, [r4, #0]
 8006832:	1d18      	adds	r0, r3, #4
 8006834:	6010      	str	r0, [r2, #0]
 8006836:	0628      	lsls	r0, r5, #24
 8006838:	d501      	bpl.n	800683e <_printf_i+0xc2>
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	e002      	b.n	8006844 <_printf_i+0xc8>
 800683e:	0668      	lsls	r0, r5, #25
 8006840:	d5fb      	bpl.n	800683a <_printf_i+0xbe>
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	4854      	ldr	r0, [pc, #336]	; (8006998 <_printf_i+0x21c>)
 8006846:	296f      	cmp	r1, #111	; 0x6f
 8006848:	bf14      	ite	ne
 800684a:	220a      	movne	r2, #10
 800684c:	2208      	moveq	r2, #8
 800684e:	2100      	movs	r1, #0
 8006850:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006854:	6865      	ldr	r5, [r4, #4]
 8006856:	60a5      	str	r5, [r4, #8]
 8006858:	2d00      	cmp	r5, #0
 800685a:	f2c0 8095 	blt.w	8006988 <_printf_i+0x20c>
 800685e:	6821      	ldr	r1, [r4, #0]
 8006860:	f021 0104 	bic.w	r1, r1, #4
 8006864:	6021      	str	r1, [r4, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d13d      	bne.n	80068e6 <_printf_i+0x16a>
 800686a:	2d00      	cmp	r5, #0
 800686c:	f040 808e 	bne.w	800698c <_printf_i+0x210>
 8006870:	4665      	mov	r5, ip
 8006872:	2a08      	cmp	r2, #8
 8006874:	d10b      	bne.n	800688e <_printf_i+0x112>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	07db      	lsls	r3, r3, #31
 800687a:	d508      	bpl.n	800688e <_printf_i+0x112>
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	6862      	ldr	r2, [r4, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	bfde      	ittt	le
 8006884:	2330      	movle	r3, #48	; 0x30
 8006886:	f805 3c01 	strble.w	r3, [r5, #-1]
 800688a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800688e:	ebac 0305 	sub.w	r3, ip, r5
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	f8cd 8000 	str.w	r8, [sp]
 8006898:	463b      	mov	r3, r7
 800689a:	aa03      	add	r2, sp, #12
 800689c:	4621      	mov	r1, r4
 800689e:	4630      	mov	r0, r6
 80068a0:	f7ff fef6 	bl	8006690 <_printf_common>
 80068a4:	3001      	adds	r0, #1
 80068a6:	d14d      	bne.n	8006944 <_printf_i+0x1c8>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ac:	b005      	add	sp, #20
 80068ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068b2:	4839      	ldr	r0, [pc, #228]	; (8006998 <_printf_i+0x21c>)
 80068b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068b8:	6813      	ldr	r3, [r2, #0]
 80068ba:	6821      	ldr	r1, [r4, #0]
 80068bc:	1d1d      	adds	r5, r3, #4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6015      	str	r5, [r2, #0]
 80068c2:	060a      	lsls	r2, r1, #24
 80068c4:	d50b      	bpl.n	80068de <_printf_i+0x162>
 80068c6:	07ca      	lsls	r2, r1, #31
 80068c8:	bf44      	itt	mi
 80068ca:	f041 0120 	orrmi.w	r1, r1, #32
 80068ce:	6021      	strmi	r1, [r4, #0]
 80068d0:	b91b      	cbnz	r3, 80068da <_printf_i+0x15e>
 80068d2:	6822      	ldr	r2, [r4, #0]
 80068d4:	f022 0220 	bic.w	r2, r2, #32
 80068d8:	6022      	str	r2, [r4, #0]
 80068da:	2210      	movs	r2, #16
 80068dc:	e7b7      	b.n	800684e <_printf_i+0xd2>
 80068de:	064d      	lsls	r5, r1, #25
 80068e0:	bf48      	it	mi
 80068e2:	b29b      	uxthmi	r3, r3
 80068e4:	e7ef      	b.n	80068c6 <_printf_i+0x14a>
 80068e6:	4665      	mov	r5, ip
 80068e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80068ec:	fb02 3311 	mls	r3, r2, r1, r3
 80068f0:	5cc3      	ldrb	r3, [r0, r3]
 80068f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068f6:	460b      	mov	r3, r1
 80068f8:	2900      	cmp	r1, #0
 80068fa:	d1f5      	bne.n	80068e8 <_printf_i+0x16c>
 80068fc:	e7b9      	b.n	8006872 <_printf_i+0xf6>
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	6825      	ldr	r5, [r4, #0]
 8006902:	6961      	ldr	r1, [r4, #20]
 8006904:	1d18      	adds	r0, r3, #4
 8006906:	6010      	str	r0, [r2, #0]
 8006908:	0628      	lsls	r0, r5, #24
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	d501      	bpl.n	8006912 <_printf_i+0x196>
 800690e:	6019      	str	r1, [r3, #0]
 8006910:	e002      	b.n	8006918 <_printf_i+0x19c>
 8006912:	066a      	lsls	r2, r5, #25
 8006914:	d5fb      	bpl.n	800690e <_printf_i+0x192>
 8006916:	8019      	strh	r1, [r3, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	4665      	mov	r5, ip
 800691e:	e7b9      	b.n	8006894 <_printf_i+0x118>
 8006920:	6813      	ldr	r3, [r2, #0]
 8006922:	1d19      	adds	r1, r3, #4
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	681d      	ldr	r5, [r3, #0]
 8006928:	6862      	ldr	r2, [r4, #4]
 800692a:	2100      	movs	r1, #0
 800692c:	4628      	mov	r0, r5
 800692e:	f7f9 fcc7 	bl	80002c0 <memchr>
 8006932:	b108      	cbz	r0, 8006938 <_printf_i+0x1bc>
 8006934:	1b40      	subs	r0, r0, r5
 8006936:	6060      	str	r0, [r4, #4]
 8006938:	6863      	ldr	r3, [r4, #4]
 800693a:	6123      	str	r3, [r4, #16]
 800693c:	2300      	movs	r3, #0
 800693e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006942:	e7a7      	b.n	8006894 <_printf_i+0x118>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	462a      	mov	r2, r5
 8006948:	4639      	mov	r1, r7
 800694a:	4630      	mov	r0, r6
 800694c:	47c0      	blx	r8
 800694e:	3001      	adds	r0, #1
 8006950:	d0aa      	beq.n	80068a8 <_printf_i+0x12c>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	079b      	lsls	r3, r3, #30
 8006956:	d413      	bmi.n	8006980 <_printf_i+0x204>
 8006958:	68e0      	ldr	r0, [r4, #12]
 800695a:	9b03      	ldr	r3, [sp, #12]
 800695c:	4298      	cmp	r0, r3
 800695e:	bfb8      	it	lt
 8006960:	4618      	movlt	r0, r3
 8006962:	e7a3      	b.n	80068ac <_printf_i+0x130>
 8006964:	2301      	movs	r3, #1
 8006966:	464a      	mov	r2, r9
 8006968:	4639      	mov	r1, r7
 800696a:	4630      	mov	r0, r6
 800696c:	47c0      	blx	r8
 800696e:	3001      	adds	r0, #1
 8006970:	d09a      	beq.n	80068a8 <_printf_i+0x12c>
 8006972:	3501      	adds	r5, #1
 8006974:	68e3      	ldr	r3, [r4, #12]
 8006976:	9a03      	ldr	r2, [sp, #12]
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	42ab      	cmp	r3, r5
 800697c:	dcf2      	bgt.n	8006964 <_printf_i+0x1e8>
 800697e:	e7eb      	b.n	8006958 <_printf_i+0x1dc>
 8006980:	2500      	movs	r5, #0
 8006982:	f104 0919 	add.w	r9, r4, #25
 8006986:	e7f5      	b.n	8006974 <_printf_i+0x1f8>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ac      	bne.n	80068e6 <_printf_i+0x16a>
 800698c:	7803      	ldrb	r3, [r0, #0]
 800698e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006996:	e76c      	b.n	8006872 <_printf_i+0xf6>
 8006998:	08006d83 	.word	0x08006d83
 800699c:	08006d94 	.word	0x08006d94

080069a0 <memmove>:
 80069a0:	4288      	cmp	r0, r1
 80069a2:	b510      	push	{r4, lr}
 80069a4:	eb01 0302 	add.w	r3, r1, r2
 80069a8:	d807      	bhi.n	80069ba <memmove+0x1a>
 80069aa:	1e42      	subs	r2, r0, #1
 80069ac:	4299      	cmp	r1, r3
 80069ae:	d00a      	beq.n	80069c6 <memmove+0x26>
 80069b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069b8:	e7f8      	b.n	80069ac <memmove+0xc>
 80069ba:	4283      	cmp	r3, r0
 80069bc:	d9f5      	bls.n	80069aa <memmove+0xa>
 80069be:	1881      	adds	r1, r0, r2
 80069c0:	1ad2      	subs	r2, r2, r3
 80069c2:	42d3      	cmn	r3, r2
 80069c4:	d100      	bne.n	80069c8 <memmove+0x28>
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069d0:	e7f7      	b.n	80069c2 <memmove+0x22>
	...

080069d4 <_free_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4605      	mov	r5, r0
 80069d8:	2900      	cmp	r1, #0
 80069da:	d045      	beq.n	8006a68 <_free_r+0x94>
 80069dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e0:	1f0c      	subs	r4, r1, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bfb8      	it	lt
 80069e6:	18e4      	addlt	r4, r4, r3
 80069e8:	f000 f8d2 	bl	8006b90 <__malloc_lock>
 80069ec:	4a1f      	ldr	r2, [pc, #124]	; (8006a6c <_free_r+0x98>)
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	4610      	mov	r0, r2
 80069f2:	b933      	cbnz	r3, 8006a02 <_free_r+0x2e>
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6014      	str	r4, [r2, #0]
 80069f8:	4628      	mov	r0, r5
 80069fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069fe:	f000 b8c8 	b.w	8006b92 <__malloc_unlock>
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	d90c      	bls.n	8006a20 <_free_r+0x4c>
 8006a06:	6821      	ldr	r1, [r4, #0]
 8006a08:	1862      	adds	r2, r4, r1
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	bf04      	itt	eq
 8006a0e:	681a      	ldreq	r2, [r3, #0]
 8006a10:	685b      	ldreq	r3, [r3, #4]
 8006a12:	6063      	str	r3, [r4, #4]
 8006a14:	bf04      	itt	eq
 8006a16:	1852      	addeq	r2, r2, r1
 8006a18:	6022      	streq	r2, [r4, #0]
 8006a1a:	6004      	str	r4, [r0, #0]
 8006a1c:	e7ec      	b.n	80069f8 <_free_r+0x24>
 8006a1e:	4613      	mov	r3, r2
 8006a20:	685a      	ldr	r2, [r3, #4]
 8006a22:	b10a      	cbz	r2, 8006a28 <_free_r+0x54>
 8006a24:	42a2      	cmp	r2, r4
 8006a26:	d9fa      	bls.n	8006a1e <_free_r+0x4a>
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	1858      	adds	r0, r3, r1
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d10b      	bne.n	8006a48 <_free_r+0x74>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	4401      	add	r1, r0
 8006a34:	1858      	adds	r0, r3, r1
 8006a36:	4282      	cmp	r2, r0
 8006a38:	6019      	str	r1, [r3, #0]
 8006a3a:	d1dd      	bne.n	80069f8 <_free_r+0x24>
 8006a3c:	6810      	ldr	r0, [r2, #0]
 8006a3e:	6852      	ldr	r2, [r2, #4]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	4401      	add	r1, r0
 8006a44:	6019      	str	r1, [r3, #0]
 8006a46:	e7d7      	b.n	80069f8 <_free_r+0x24>
 8006a48:	d902      	bls.n	8006a50 <_free_r+0x7c>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	602b      	str	r3, [r5, #0]
 8006a4e:	e7d3      	b.n	80069f8 <_free_r+0x24>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	1821      	adds	r1, r4, r0
 8006a54:	428a      	cmp	r2, r1
 8006a56:	bf04      	itt	eq
 8006a58:	6811      	ldreq	r1, [r2, #0]
 8006a5a:	6852      	ldreq	r2, [r2, #4]
 8006a5c:	6062      	str	r2, [r4, #4]
 8006a5e:	bf04      	itt	eq
 8006a60:	1809      	addeq	r1, r1, r0
 8006a62:	6021      	streq	r1, [r4, #0]
 8006a64:	605c      	str	r4, [r3, #4]
 8006a66:	e7c7      	b.n	80069f8 <_free_r+0x24>
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20015cfc 	.word	0x20015cfc

08006a70 <_malloc_r>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	1ccd      	adds	r5, r1, #3
 8006a74:	f025 0503 	bic.w	r5, r5, #3
 8006a78:	3508      	adds	r5, #8
 8006a7a:	2d0c      	cmp	r5, #12
 8006a7c:	bf38      	it	cc
 8006a7e:	250c      	movcc	r5, #12
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	4606      	mov	r6, r0
 8006a84:	db01      	blt.n	8006a8a <_malloc_r+0x1a>
 8006a86:	42a9      	cmp	r1, r5
 8006a88:	d903      	bls.n	8006a92 <_malloc_r+0x22>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	2000      	movs	r0, #0
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	f000 f87d 	bl	8006b90 <__malloc_lock>
 8006a96:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <_malloc_r+0xac>)
 8006a98:	6814      	ldr	r4, [r2, #0]
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	b991      	cbnz	r1, 8006ac4 <_malloc_r+0x54>
 8006a9e:	4c20      	ldr	r4, [pc, #128]	; (8006b20 <_malloc_r+0xb0>)
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	b91b      	cbnz	r3, 8006aac <_malloc_r+0x3c>
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 f863 	bl	8006b70 <_sbrk_r>
 8006aaa:	6020      	str	r0, [r4, #0]
 8006aac:	4629      	mov	r1, r5
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f000 f85e 	bl	8006b70 <_sbrk_r>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d124      	bne.n	8006b02 <_malloc_r+0x92>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	4630      	mov	r0, r6
 8006abe:	f000 f868 	bl	8006b92 <__malloc_unlock>
 8006ac2:	e7e4      	b.n	8006a8e <_malloc_r+0x1e>
 8006ac4:	680b      	ldr	r3, [r1, #0]
 8006ac6:	1b5b      	subs	r3, r3, r5
 8006ac8:	d418      	bmi.n	8006afc <_malloc_r+0x8c>
 8006aca:	2b0b      	cmp	r3, #11
 8006acc:	d90f      	bls.n	8006aee <_malloc_r+0x7e>
 8006ace:	600b      	str	r3, [r1, #0]
 8006ad0:	50cd      	str	r5, [r1, r3]
 8006ad2:	18cc      	adds	r4, r1, r3
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f000 f85c 	bl	8006b92 <__malloc_unlock>
 8006ada:	f104 000b 	add.w	r0, r4, #11
 8006ade:	1d23      	adds	r3, r4, #4
 8006ae0:	f020 0007 	bic.w	r0, r0, #7
 8006ae4:	1ac3      	subs	r3, r0, r3
 8006ae6:	d0d3      	beq.n	8006a90 <_malloc_r+0x20>
 8006ae8:	425a      	negs	r2, r3
 8006aea:	50e2      	str	r2, [r4, r3]
 8006aec:	e7d0      	b.n	8006a90 <_malloc_r+0x20>
 8006aee:	428c      	cmp	r4, r1
 8006af0:	684b      	ldr	r3, [r1, #4]
 8006af2:	bf16      	itet	ne
 8006af4:	6063      	strne	r3, [r4, #4]
 8006af6:	6013      	streq	r3, [r2, #0]
 8006af8:	460c      	movne	r4, r1
 8006afa:	e7eb      	b.n	8006ad4 <_malloc_r+0x64>
 8006afc:	460c      	mov	r4, r1
 8006afe:	6849      	ldr	r1, [r1, #4]
 8006b00:	e7cc      	b.n	8006a9c <_malloc_r+0x2c>
 8006b02:	1cc4      	adds	r4, r0, #3
 8006b04:	f024 0403 	bic.w	r4, r4, #3
 8006b08:	42a0      	cmp	r0, r4
 8006b0a:	d005      	beq.n	8006b18 <_malloc_r+0xa8>
 8006b0c:	1a21      	subs	r1, r4, r0
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f000 f82e 	bl	8006b70 <_sbrk_r>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d0cf      	beq.n	8006ab8 <_malloc_r+0x48>
 8006b18:	6025      	str	r5, [r4, #0]
 8006b1a:	e7db      	b.n	8006ad4 <_malloc_r+0x64>
 8006b1c:	20015cfc 	.word	0x20015cfc
 8006b20:	20015d00 	.word	0x20015d00

08006b24 <_realloc_r>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	4607      	mov	r7, r0
 8006b28:	4614      	mov	r4, r2
 8006b2a:	460e      	mov	r6, r1
 8006b2c:	b921      	cbnz	r1, 8006b38 <_realloc_r+0x14>
 8006b2e:	4611      	mov	r1, r2
 8006b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b34:	f7ff bf9c 	b.w	8006a70 <_malloc_r>
 8006b38:	b922      	cbnz	r2, 8006b44 <_realloc_r+0x20>
 8006b3a:	f7ff ff4b 	bl	80069d4 <_free_r>
 8006b3e:	4625      	mov	r5, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b44:	f000 f826 	bl	8006b94 <_malloc_usable_size_r>
 8006b48:	42a0      	cmp	r0, r4
 8006b4a:	d20f      	bcs.n	8006b6c <_realloc_r+0x48>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7ff ff8e 	bl	8006a70 <_malloc_r>
 8006b54:	4605      	mov	r5, r0
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d0f2      	beq.n	8006b40 <_realloc_r+0x1c>
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	f7ff fc12 	bl	8006386 <memcpy>
 8006b62:	4631      	mov	r1, r6
 8006b64:	4638      	mov	r0, r7
 8006b66:	f7ff ff35 	bl	80069d4 <_free_r>
 8006b6a:	e7e9      	b.n	8006b40 <_realloc_r+0x1c>
 8006b6c:	4635      	mov	r5, r6
 8006b6e:	e7e7      	b.n	8006b40 <_realloc_r+0x1c>

08006b70 <_sbrk_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4c06      	ldr	r4, [pc, #24]	; (8006b8c <_sbrk_r+0x1c>)
 8006b74:	2300      	movs	r3, #0
 8006b76:	4605      	mov	r5, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	f7ff fa46 	bl	800600c <_sbrk>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_sbrk_r+0x1a>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_sbrk_r+0x1a>
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20015e00 	.word	0x20015e00

08006b90 <__malloc_lock>:
 8006b90:	4770      	bx	lr

08006b92 <__malloc_unlock>:
 8006b92:	4770      	bx	lr

08006b94 <_malloc_usable_size_r>:
 8006b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b98:	1f18      	subs	r0, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbc      	itt	lt
 8006b9e:	580b      	ldrlt	r3, [r1, r0]
 8006ba0:	18c0      	addlt	r0, r0, r3
 8006ba2:	4770      	bx	lr

08006ba4 <_init>:
 8006ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba6:	bf00      	nop
 8006ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006baa:	bc08      	pop	{r3}
 8006bac:	469e      	mov	lr, r3
 8006bae:	4770      	bx	lr

08006bb0 <_fini>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	bf00      	nop
 8006bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb6:	bc08      	pop	{r3}
 8006bb8:	469e      	mov	lr, r3
 8006bba:	4770      	bx	lr
