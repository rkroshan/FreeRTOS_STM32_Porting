
FreeRTOS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003004  08003004  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08003004  08003004  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003004  08003004  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800300c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dd4  2000001c  08003028  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012df0  08003028  00022df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099a6  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f8  00000000  00000000  000299f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000800  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000018e0  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b70  00000000  00000000  0002d828  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b63b  00000000  00000000  00034398  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000213c  00000000  00000000  0009fa50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002fb4 	.word	0x08002fb4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08002fb4 	.word	0x08002fb4

08000210 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f103 0208 	add.w	r2, r3, #8
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000228:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f103 0208 	add.w	r2, r3, #8
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f103 0208 	add.w	r2, r3, #8
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800026a:	b480      	push	{r7}
 800026c:	b085      	sub	sp, #20
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
 8000272:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689a      	ldr	r2, [r3, #8]
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	1c5a      	adds	r2, r3, #1
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002c8:	d103      	bne.n	80002d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e00c      	b.n	80002ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3308      	adds	r3, #8
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e002      	b.n	80002e0 <vListInsert+0x2e>
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68ba      	ldr	r2, [r7, #8]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d2f6      	bcs.n	80002da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	685a      	ldr	r2, [r3, #4]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	6892      	ldr	r2, [r2, #8]
 800033a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d103      	bne.n	8000358 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	681b      	ldr	r3, [r3, #0]
}
 800036c:	4618      	mov	r0, r3
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d109      	bne.n	80003a0 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000390:	f383 8811 	msr	BASEPRI, r3
 8000394:	f3bf 8f6f 	isb	sy
 8000398:	f3bf 8f4f 	dsb	sy
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	e7fe      	b.n	800039e <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 80003a0:	f001 ff66 	bl	8002270 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003ac:	68f9      	ldr	r1, [r7, #12]
 80003ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003b0:	fb01 f303 	mul.w	r3, r1, r3
 80003b4:	441a      	add	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003d0:	3b01      	subs	r3, #1
 80003d2:	68f9      	ldr	r1, [r7, #12]
 80003d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	441a      	add	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	22ff      	movs	r2, #255	; 0xff
 80003e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	22ff      	movs	r2, #255	; 0xff
 80003ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d114      	bne.n	8000420 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d01a      	beq.n	8000434 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	3310      	adds	r3, #16
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f86a 	bl	80014dc <xTaskRemoveFromEventList>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d012      	beq.n	8000434 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <xQueueGenericReset+0xcc>)
 8000410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	e009      	b.n	8000434 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3310      	adds	r3, #16
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff fef3 	bl	8000210 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3324      	adds	r3, #36	; 0x24
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff feee 	bl	8000210 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000434:	f001 ff4a 	bl	80022cc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000438:	2301      	movs	r3, #1
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000ed04 	.word	0xe000ed04

08000448 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	; 0x30
 800044c:	af02      	add	r7, sp, #8
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	4613      	mov	r3, r2
 8000454:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d109      	bne.n	8000470 <xQueueGenericCreate+0x28>
 800045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000460:	f383 8811 	msr	BASEPRI, r3
 8000464:	f3bf 8f6f 	isb	sy
 8000468:	f3bf 8f4f 	dsb	sy
 800046c:	61bb      	str	r3, [r7, #24]
 800046e:	e7fe      	b.n	800046e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	fb02 f303 	mul.w	r3, r2, r3
 8000478:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d006      	beq.n	800048e <xQueueGenericCreate+0x46>
 8000480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	fbb2 f3f3 	udiv	r3, r2, r3
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	429a      	cmp	r2, r3
 800048c:	d101      	bne.n	8000492 <xQueueGenericCreate+0x4a>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <xQueueGenericCreate+0x4c>
 8000492:	2300      	movs	r3, #0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d109      	bne.n	80004ac <xQueueGenericCreate+0x64>
 8000498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800049c:	f383 8811 	msr	BASEPRI, r3
 80004a0:	f3bf 8f6f 	isb	sy
 80004a4:	f3bf 8f4f 	dsb	sy
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	e7fe      	b.n	80004aa <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80004b2:	d909      	bls.n	80004c8 <xQueueGenericCreate+0x80>
 80004b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004b8:	f383 8811 	msr	BASEPRI, r3
 80004bc:	f3bf 8f6f 	isb	sy
 80004c0:	f3bf 8f4f 	dsb	sy
 80004c4:	613b      	str	r3, [r7, #16]
 80004c6:	e7fe      	b.n	80004c6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ca:	3350      	adds	r3, #80	; 0x50
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 ffe9 	bl	80024a4 <pvPortMalloc>
 80004d2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80004d4:	6a3b      	ldr	r3, [r7, #32]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00d      	beq.n	80004f6 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004da:	6a3b      	ldr	r3, [r7, #32]
 80004dc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004de:	69fb      	ldr	r3, [r7, #28]
 80004e0:	3350      	adds	r3, #80	; 0x50
 80004e2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004e4:	79fa      	ldrb	r2, [r7, #7]
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	4613      	mov	r3, r2
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	f000 f805 	bl	8000500 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004f6:	6a3b      	ldr	r3, [r7, #32]
    }
 80004f8:	4618      	mov	r0, r3
 80004fa:	3728      	adds	r7, #40	; 0x28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d103      	bne.n	800051c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	69ba      	ldr	r2, [r7, #24]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	e002      	b.n	8000522 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800052e:	2101      	movs	r1, #1
 8000530:	69b8      	ldr	r0, [r7, #24]
 8000532:	f7ff ff21 	bl	8000378 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	78fa      	ldrb	r2, [r7, #3]
 800053a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08e      	sub	sp, #56	; 0x38
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000556:	2300      	movs	r3, #0
 8000558:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800055e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000560:	2b00      	cmp	r3, #0
 8000562:	d109      	bne.n	8000578 <xQueueGenericSend+0x30>
 8000564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000568:	f383 8811 	msr	BASEPRI, r3
 800056c:	f3bf 8f6f 	isb	sy
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
 8000576:	e7fe      	b.n	8000576 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d103      	bne.n	8000586 <xQueueGenericSend+0x3e>
 800057e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <xQueueGenericSend+0x42>
 8000586:	2301      	movs	r3, #1
 8000588:	e000      	b.n	800058c <xQueueGenericSend+0x44>
 800058a:	2300      	movs	r3, #0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d109      	bne.n	80005a4 <xQueueGenericSend+0x5c>
 8000590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	f3bf 8f6f 	isb	sy
 800059c:	f3bf 8f4f 	dsb	sy
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
 80005a2:	e7fe      	b.n	80005a2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d103      	bne.n	80005b2 <xQueueGenericSend+0x6a>
 80005aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d101      	bne.n	80005b6 <xQueueGenericSend+0x6e>
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <xQueueGenericSend+0x70>
 80005b6:	2300      	movs	r3, #0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d109      	bne.n	80005d0 <xQueueGenericSend+0x88>
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	623b      	str	r3, [r7, #32]
 80005ce:	e7fe      	b.n	80005ce <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80005d0:	f001 f91c 	bl	800180c <xTaskGetSchedulerState>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d102      	bne.n	80005e0 <xQueueGenericSend+0x98>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <xQueueGenericSend+0x9c>
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <xQueueGenericSend+0x9e>
 80005e4:	2300      	movs	r3, #0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d109      	bne.n	80005fe <xQueueGenericSend+0xb6>
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	e7fe      	b.n	80005fc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005fe:	f001 fe37 	bl	8002270 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060a:	429a      	cmp	r2, r3
 800060c:	d302      	bcc.n	8000614 <xQueueGenericSend+0xcc>
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d129      	bne.n	8000668 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800061a:	f000 fa11 	bl	8000a40 <prvCopyDataToQueue>
 800061e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	2b00      	cmp	r3, #0
 8000626:	d010      	beq.n	800064a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800062a:	3324      	adds	r3, #36	; 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f000 ff55 	bl	80014dc <xTaskRemoveFromEventList>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d013      	beq.n	8000660 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000638:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <xQueueGenericSend+0x1f0>)
 800063a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	f3bf 8f4f 	dsb	sy
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	e00a      	b.n	8000660 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000650:	4b39      	ldr	r3, [pc, #228]	; (8000738 <xQueueGenericSend+0x1f0>)
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000660:	f001 fe34 	bl	80022cc <vPortExitCritical>
                return pdPASS;
 8000664:	2301      	movs	r3, #1
 8000666:	e063      	b.n	8000730 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d103      	bne.n	8000676 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800066e:	f001 fe2d 	bl	80022cc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000672:	2300      	movs	r3, #0
 8000674:	e05c      	b.n	8000730 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000678:	2b00      	cmp	r3, #0
 800067a:	d106      	bne.n	800068a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4618      	mov	r0, r3
 8000682:	f000 ff8d 	bl	80015a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000686:	2301      	movs	r3, #1
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800068a:	f001 fe1f 	bl	80022cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800068e:	f000 fd0b 	bl	80010a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000692:	f001 fded 	bl	8002270 <vPortEnterCritical>
 8000696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800069c:	b25b      	sxtb	r3, r3
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006a2:	d103      	bne.n	80006ac <xQueueGenericSend+0x164>
 80006a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80006ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b8:	d103      	bne.n	80006c2 <xQueueGenericSend+0x17a>
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80006c2:	f001 fe03 	bl	80022cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006c6:	1d3a      	adds	r2, r7, #4
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 ff7c 	bl	80015cc <xTaskCheckForTimeOut>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d124      	bne.n	8000724 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80006da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006dc:	f000 faa8 	bl	8000c30 <prvIsQueueFull>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d018      	beq.n	8000718 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80006e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e8:	3310      	adds	r3, #16
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fea6 	bl	8001440 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80006f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006f6:	f000 fa33 	bl	8000b60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80006fa:	f000 fce3 	bl	80010c4 <xTaskResumeAll>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	f47f af7c 	bne.w	80005fe <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <xQueueGenericSend+0x1f0>)
 8000708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	e772      	b.n	80005fe <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800071a:	f000 fa21 	bl	8000b60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800071e:	f000 fcd1 	bl	80010c4 <xTaskResumeAll>
 8000722:	e76c      	b.n	80005fe <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000726:	f000 fa1b 	bl	8000b60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800072a:	f000 fccb 	bl	80010c4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800072e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000730:	4618      	mov	r0, r3
 8000732:	3738      	adds	r7, #56	; 0x38
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	e000ed04 	.word	0xe000ed04

0800073c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800074e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <xQueueGenericSendFromISR+0x2c>
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
 8000766:	e7fe      	b.n	8000766 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <xQueueGenericSendFromISR+0x3a>
 800076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <xQueueGenericSendFromISR+0x3e>
 8000776:	2301      	movs	r3, #1
 8000778:	e000      	b.n	800077c <xQueueGenericSendFromISR+0x40>
 800077a:	2300      	movs	r3, #0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d109      	bne.n	8000794 <xQueueGenericSendFromISR+0x58>
 8000780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
 8000792:	e7fe      	b.n	8000792 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d103      	bne.n	80007a2 <xQueueGenericSendFromISR+0x66>
 800079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800079c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d101      	bne.n	80007a6 <xQueueGenericSendFromISR+0x6a>
 80007a2:	2301      	movs	r3, #1
 80007a4:	e000      	b.n	80007a8 <xQueueGenericSendFromISR+0x6c>
 80007a6:	2300      	movs	r3, #0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d109      	bne.n	80007c0 <xQueueGenericSendFromISR+0x84>
 80007ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b0:	f383 8811 	msr	BASEPRI, r3
 80007b4:	f3bf 8f6f 	isb	sy
 80007b8:	f3bf 8f4f 	dsb	sy
 80007bc:	623b      	str	r3, [r7, #32]
 80007be:	e7fe      	b.n	80007be <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80007c0:	f001 fe32 	bl	8002428 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80007c4:	f3ef 8211 	mrs	r2, BASEPRI
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	61fa      	str	r2, [r7, #28]
 80007da:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80007dc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80007e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d302      	bcc.n	80007f2 <xQueueGenericSendFromISR+0xb6>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d13d      	bne.n	800086e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80007f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000808:	f000 f91a 	bl	8000a40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800080c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000814:	d112      	bne.n	800083c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	2b00      	cmp	r3, #0
 800081c:	d024      	beq.n	8000868 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000820:	3324      	adds	r3, #36	; 0x24
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fe5a 	bl	80014dc <xTaskRemoveFromEventList>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d01c      	beq.n	8000868 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e015      	b.n	8000868 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800083c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000840:	2b7f      	cmp	r3, #127	; 0x7f
 8000842:	d109      	bne.n	8000858 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8000844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e7fe      	b.n	8000856 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800085c:	3301      	adds	r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b25a      	sxtb	r2, r3
 8000862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000868:	2301      	movs	r3, #1
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800086c:	e001      	b.n	8000872 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800086e:	2300      	movs	r3, #0
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000874:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800087e:	4618      	mov	r0, r3
 8000880:	3740      	adds	r7, #64	; 0x40
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d109      	bne.n	80008b6 <xQueueReceive+0x2e>
        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	e7fe      	b.n	80008b4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <xQueueReceive+0x3c>
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <xQueueReceive+0x40>
 80008c4:	2301      	movs	r3, #1
 80008c6:	e000      	b.n	80008ca <xQueueReceive+0x42>
 80008c8:	2300      	movs	r3, #0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d109      	bne.n	80008e2 <xQueueReceive+0x5a>
 80008ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d2:	f383 8811 	msr	BASEPRI, r3
 80008d6:	f3bf 8f6f 	isb	sy
 80008da:	f3bf 8f4f 	dsb	sy
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	e7fe      	b.n	80008e0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008e2:	f000 ff93 	bl	800180c <xTaskGetSchedulerState>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <xQueueReceive+0x6a>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <xQueueReceive+0x6e>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <xQueueReceive+0x70>
 80008f6:	2300      	movs	r3, #0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d109      	bne.n	8000910 <xQueueReceive+0x88>
 80008fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	e7fe      	b.n	800090e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000910:	f001 fcae 	bl	8002270 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	2b00      	cmp	r3, #0
 800091e:	d01f      	beq.n	8000960 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000924:	f000 f8f6 	bl	8000b14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00f      	beq.n	8000958 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	3310      	adds	r3, #16
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fdcd 	bl	80014dc <xTaskRemoveFromEventList>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000948:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <xQueueReceive+0x1b4>)
 800094a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000958:	f001 fcb8 	bl	80022cc <vPortExitCritical>
                return pdPASS;
 800095c:	2301      	movs	r3, #1
 800095e:	e069      	b.n	8000a34 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d103      	bne.n	800096e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000966:	f001 fcb1 	bl	80022cc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800096a:	2300      	movs	r3, #0
 800096c:	e062      	b.n	8000a34 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	2b00      	cmp	r3, #0
 8000972:	d106      	bne.n	8000982 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fe11 	bl	80015a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800097e:	2301      	movs	r3, #1
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000982:	f001 fca3 	bl	80022cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000986:	f000 fb8f 	bl	80010a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800098a:	f001 fc71 	bl	8002270 <vPortEnterCritical>
 800098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000994:	b25b      	sxtb	r3, r3
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099a:	d103      	bne.n	80009a4 <xQueueReceive+0x11c>
 800099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b0:	d103      	bne.n	80009ba <xQueueReceive+0x132>
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009ba:	f001 fc87 	bl	80022cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009be:	1d3a      	adds	r2, r7, #4
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fe00 	bl	80015cc <xTaskCheckForTimeOut>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d123      	bne.n	8000a1a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009d4:	f000 f916 	bl	8000c04 <prvIsQueueEmpty>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d017      	beq.n	8000a0e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	3324      	adds	r3, #36	; 0x24
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fd2a 	bl	8001440 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ee:	f000 f8b7 	bl	8000b60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80009f2:	f000 fb67 	bl	80010c4 <xTaskResumeAll>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d189      	bne.n	8000910 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <xQueueReceive+0x1b4>)
 80009fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	f3bf 8f4f 	dsb	sy
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	e780      	b.n	8000910 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a10:	f000 f8a6 	bl	8000b60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a14:	f000 fb56 	bl	80010c4 <xTaskResumeAll>
 8000a18:	e77a      	b.n	8000910 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a1c:	f000 f8a0 	bl	8000b60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a20:	f000 fb50 	bl	80010c4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a26:	f000 f8ed 	bl	8000c04 <prvIsQueueEmpty>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f43f af6f 	beq.w	8000910 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000a32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	e000ed04 	.word	0xe000ed04

08000a40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10d      	bne.n	8000a7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d14d      	bne.n	8000b02 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 feec 	bl	8001848 <xTaskPriorityDisinherit>
 8000a70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	e043      	b.n	8000b02 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d119      	bne.n	8000ab4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6858      	ldr	r0, [r3, #4]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	f002 fa7e 	bl	8002f8c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	441a      	add	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d32b      	bcc.n	8000b02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	e026      	b.n	8000b02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	68d8      	ldr	r0, [r3, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	461a      	mov	r2, r3
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	f002 fa64 	bl	8002f8c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	425b      	negs	r3, r3
 8000ace:	441a      	add	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	425b      	negs	r3, r3
 8000aea:	441a      	add	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d105      	bne.n	8000b02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000b0a:	697b      	ldr	r3, [r7, #20]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d018      	beq.n	8000b58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	441a      	add	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d303      	bcc.n	8000b48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68d9      	ldr	r1, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	461a      	mov	r2, r3
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f002 fa1a 	bl	8002f8c <memcpy>
    }
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b68:	f001 fb82 	bl	8002270 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b74:	e011      	b.n	8000b9a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3324      	adds	r3, #36	; 0x24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fcaa 	bl	80014dc <xTaskRemoveFromEventList>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000b8e:	f000 fd81 	bl	8001694 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dce9      	bgt.n	8000b76 <prvUnlockQueue+0x16>
 8000ba2:	e000      	b.n	8000ba6 <prvUnlockQueue+0x46>
                        break;
 8000ba4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000bae:	f001 fb8d 	bl	80022cc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000bb2:	f001 fb5d 	bl	8002270 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bbc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bbe:	e011      	b.n	8000be4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d012      	beq.n	8000bee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3310      	adds	r3, #16
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fc85 	bl	80014dc <xTaskRemoveFromEventList>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bd8:	f000 fd5c 	bl	8001694 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	dce9      	bgt.n	8000bc0 <prvUnlockQueue+0x60>
 8000bec:	e000      	b.n	8000bf0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	22ff      	movs	r2, #255	; 0xff
 8000bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000bf8:	f001 fb68 	bl	80022cc <vPortExitCritical>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c0c:	f001 fb30 	bl	8002270 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e001      	b.n	8000c22 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c22:	f001 fb53 	bl	80022cc <vPortExitCritical>

    return xReturn;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c38:	f001 fb1a 	bl	8002270 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d102      	bne.n	8000c4e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e001      	b.n	8000c52 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c52:	f001 fb3b 	bl	80022cc <vPortExitCritical>

    return xReturn;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e014      	b.n	8000c9a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <vQueueAddToRegistry+0x4c>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10b      	bne.n	8000c94 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000c7c:	490b      	ldr	r1, [pc, #44]	; (8000cac <vQueueAddToRegistry+0x4c>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <vQueueAddToRegistry+0x4c>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8000c92:	e005      	b.n	8000ca0 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d9e7      	bls.n	8000c70 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20012db0 	.word	0x20012db0

08000cb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000cc0:	f001 fad6 	bl	8002270 <vPortEnterCritical>
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd0:	d103      	bne.n	8000cda <vQueueWaitForMessageRestricted+0x2a>
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce6:	d103      	bne.n	8000cf0 <vQueueWaitForMessageRestricted+0x40>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000cf0:	f001 faec 	bl	80022cc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3324      	adds	r3, #36	; 0x24
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fbbf 	bl	8001488 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff28 	bl	8000b60 <prvUnlockQueue>
    }
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	4613      	mov	r3, r2
 8000d26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fbb9 	bl	80024a4 <pvPortMalloc>
 8000d32:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00e      	beq.n	8000d58 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d3a:	2058      	movs	r0, #88	; 0x58
 8000d3c:	f001 fbb2 	bl	80024a4 <pvPortMalloc>
 8000d40:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d4e:	e005      	b.n	8000d5c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f001 fc83 	bl	800265c <vPortFree>
 8000d56:	e001      	b.n	8000d5c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d013      	beq.n	8000d8a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	2300      	movs	r3, #0
 8000d66:	9303      	str	r3, [sp, #12]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f80e 	bl	8000d9a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d7e:	69f8      	ldr	r0, [r7, #28]
 8000d80:	f000 f8a0 	bl	8000ec4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	e002      	b.n	8000d90 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d90:	69bb      	ldr	r3, [r7, #24]
    }
 8000d92:	4618      	mov	r0, r3
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b088      	sub	sp, #32
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000daa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	461a      	mov	r2, r3
 8000db2:	21a5      	movs	r1, #165	; 0xa5
 8000db4:	f002 f8f5 	bl	8002fa2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f023 0307 	bic.w	r3, r3, #7
 8000dd0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d009      	beq.n	8000df0 <prvInitialiseNewTask+0x56>
 8000ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de0:	f383 8811 	msr	BASEPRI, r3
 8000de4:	f3bf 8f6f 	isb	sy
 8000de8:	f3bf 8f4f 	dsb	sy
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e7fe      	b.n	8000dee <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d01f      	beq.n	8000e36 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e012      	b.n	8000e22 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	4413      	add	r3, r2
 8000e02:	7819      	ldrb	r1, [r3, #0]
 8000e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	4413      	add	r3, r2
 8000e0a:	3334      	adds	r3, #52	; 0x34
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	d9e9      	bls.n	8000dfc <prvInitialiseNewTask+0x62>
 8000e28:	e000      	b.n	8000e2c <prvInitialiseNewTask+0x92>
            {
                break;
 8000e2a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000e34:	e003      	b.n	8000e3e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d901      	bls.n	8000e48 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e44:	2304      	movs	r3, #4
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e52:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9f6 	bl	8000250 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	3318      	adds	r3, #24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff f9f1 	bl	8000250 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e72:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	f1c3 0205 	rsb	r2, r3, #5
 8000e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e86:	3350      	adds	r3, #80	; 0x50
 8000e88:	2204      	movs	r2, #4
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f002 f888 	bl	8002fa2 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e94:	3354      	adds	r3, #84	; 0x54
 8000e96:	2201      	movs	r2, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 f881 	bl	8002fa2 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	68f9      	ldr	r1, [r7, #12]
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f001 f8bb 	bl	8002020 <pxPortInitialiseStack>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ecc:	f001 f9d0 	bl	8002270 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <prvAddNewTaskToReadyList+0xc0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <prvAddNewTaskToReadyList+0xc0>)
 8000ed8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <prvAddNewTaskToReadyList+0xc0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d110      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ef0:	f000 fbf4 	bl	80016dc <prvInitialiseTaskLists>
 8000ef4:	e00d      	b.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <prvAddNewTaskToReadyList+0xc8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d109      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d802      	bhi.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f0c:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <prvAddNewTaskToReadyList+0xcc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <prvAddNewTaskToReadyList+0xcc>)
 8000f1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <prvAddNewTaskToReadyList+0xcc>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <prvAddNewTaskToReadyList+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <prvAddNewTaskToReadyList+0xd0>)
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <prvAddNewTaskToReadyList+0xd4>)
 8000f44:	441a      	add	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f7ff f98c 	bl	800026a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000f52:	f001 f9bb 	bl	80022cc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <prvAddNewTaskToReadyList+0xc8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00e      	beq.n	8000f7c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <prvAddNewTaskToReadyList+0xd8>)
 8000f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f3bf 8f4f 	dsb	sy
 8000f78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000110 	.word	0x20000110
 8000f88:	20000038 	.word	0x20000038
 8000f8c:	2000011c 	.word	0x2000011c
 8000f90:	2000012c 	.word	0x2000012c
 8000f94:	20000118 	.word	0x20000118
 8000f98:	2000003c 	.word	0x2000003c
 8000f9c:	e000ed04 	.word	0xe000ed04

08000fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d016      	beq.n	8000fe0 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <vTaskDelay+0x60>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <vTaskDelay+0x2e>
 8000fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fbe:	f383 8811 	msr	BASEPRI, r3
 8000fc2:	f3bf 8f6f 	isb	sy
 8000fc6:	f3bf 8f4f 	dsb	sy
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	e7fe      	b.n	8000fcc <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8000fce:	f000 f86b 	bl	80010a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fcaf 	bl	8001938 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000fda:	f000 f873 	bl	80010c4 <xTaskResumeAll>
 8000fde:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d107      	bne.n	8000ff6 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <vTaskDelay+0x64>)
 8000fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	f3bf 8f4f 	dsb	sy
 8000ff2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000138 	.word	0x20000138
 8001004:	e000ed04 	.word	0xe000ed04

08001008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <vTaskStartScheduler+0x84>)
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	2300      	movs	r3, #0
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2300      	movs	r3, #0
 8001018:	2282      	movs	r2, #130	; 0x82
 800101a:	491d      	ldr	r1, [pc, #116]	; (8001090 <vTaskStartScheduler+0x88>)
 800101c:	481d      	ldr	r0, [pc, #116]	; (8001094 <vTaskStartScheduler+0x8c>)
 800101e:	f7ff fe7b 	bl	8000d18 <xTaskCreate>
 8001022:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d102      	bne.n	8001030 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800102a:	f000 fceb 	bl	8001a04 <xTimerCreateTimerTask>
 800102e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d115      	bne.n	8001062 <vTaskStartScheduler+0x5a>
 8001036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103a:	f383 8811 	msr	BASEPRI, r3
 800103e:	f3bf 8f6f 	isb	sy
 8001042:	f3bf 8f4f 	dsb	sy
 8001046:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <vTaskStartScheduler+0x90>)
 800104a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800104e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <vTaskStartScheduler+0x94>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <vTaskStartScheduler+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800105c:	f001 f86a 	bl	8002134 <xPortStartScheduler>
 8001060:	e00d      	b.n	800107e <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001068:	d109      	bne.n	800107e <vTaskStartScheduler+0x76>
 800106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106e:	f383 8811 	msr	BASEPRI, r3
 8001072:	f3bf 8f6f 	isb	sy
 8001076:	f3bf 8f4f 	dsb	sy
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	e7fe      	b.n	800107c <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <vTaskStartScheduler+0x9c>)
 8001080:	681b      	ldr	r3, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000134 	.word	0x20000134
 8001090:	08002fcc 	.word	0x08002fcc
 8001094:	080016ad 	.word	0x080016ad
 8001098:	20000130 	.word	0x20000130
 800109c:	2000011c 	.word	0x2000011c
 80010a0:	20000114 	.word	0x20000114
 80010a4:	20000000 	.word	0x20000000

080010a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <vTaskSuspendAll+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <vTaskSuspendAll+0x18>)
 80010b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000138 	.word	0x20000138

080010c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80010d2:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <xTaskResumeAll+0x114>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <xTaskResumeAll+0x2a>
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	e7fe      	b.n	80010ec <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80010ee:	f001 f8bf 	bl	8002270 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <xTaskResumeAll+0x114>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a37      	ldr	r2, [pc, #220]	; (80011d8 <xTaskResumeAll+0x114>)
 80010fa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <xTaskResumeAll+0x114>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d161      	bne.n	80011c8 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <xTaskResumeAll+0x118>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d05d      	beq.n	80011c8 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800110c:	e02e      	b.n	800116c <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <xTaskResumeAll+0x11c>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3318      	adds	r3, #24
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f902 	bl	8000324 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3304      	adds	r3, #4
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f8fd 	bl	8000324 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	2201      	movs	r2, #1
 8001130:	409a      	lsls	r2, r3
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <xTaskResumeAll+0x120>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	4a2a      	ldr	r2, [pc, #168]	; (80011e4 <xTaskResumeAll+0x120>)
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <xTaskResumeAll+0x124>)
 800114a:	441a      	add	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3304      	adds	r3, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4610      	mov	r0, r2
 8001154:	f7ff f889 	bl	800026a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800115c:	4b23      	ldr	r3, [pc, #140]	; (80011ec <xTaskResumeAll+0x128>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	429a      	cmp	r2, r3
 8001164:	d302      	bcc.n	800116c <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8001166:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <xTaskResumeAll+0x12c>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <xTaskResumeAll+0x11c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1cc      	bne.n	800110e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800117a:	f000 fb2b 	bl	80017d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <xTaskResumeAll+0x130>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d010      	beq.n	80011ac <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800118a:	f000 f847 	bl	800121c <xTaskIncrementTick>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <xTaskResumeAll+0x12c>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3b01      	subs	r3, #1
 800119e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f1      	bne.n	800118a <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <xTaskResumeAll+0x130>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <xTaskResumeAll+0x12c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d009      	beq.n	80011c8 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80011b4:	2301      	movs	r3, #1
 80011b6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <xTaskResumeAll+0x134>)
 80011ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80011c8:	f001 f880 	bl	80022cc <vPortExitCritical>

    return xAlreadyYielded;
 80011cc:	68bb      	ldr	r3, [r7, #8]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000138 	.word	0x20000138
 80011dc:	20000110 	.word	0x20000110
 80011e0:	200000d0 	.word	0x200000d0
 80011e4:	20000118 	.word	0x20000118
 80011e8:	2000003c 	.word	0x2000003c
 80011ec:	20000038 	.word	0x20000038
 80011f0:	20000124 	.word	0x20000124
 80011f4:	20000120 	.word	0x20000120
 80011f8:	e000ed04 	.word	0xe000ed04

080011fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <xTaskGetTickCount+0x1c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001208:	687b      	ldr	r3, [r7, #4]
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000114 	.word	0x20000114

0800121c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001226:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <xTaskIncrementTick+0x144>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f040 808d 	bne.w	800134a <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001230:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <xTaskIncrementTick+0x148>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001238:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <xTaskIncrementTick+0x148>)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d11f      	bne.n	8001284 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001244:	4b48      	ldr	r3, [pc, #288]	; (8001368 <xTaskIncrementTick+0x14c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d009      	beq.n	8001262 <xTaskIncrementTick+0x46>
 800124e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001252:	f383 8811 	msr	BASEPRI, r3
 8001256:	f3bf 8f6f 	isb	sy
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	e7fe      	b.n	8001260 <xTaskIncrementTick+0x44>
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <xTaskIncrementTick+0x14c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <xTaskIncrementTick+0x150>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a3e      	ldr	r2, [pc, #248]	; (8001368 <xTaskIncrementTick+0x14c>)
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4a3e      	ldr	r2, [pc, #248]	; (800136c <xTaskIncrementTick+0x150>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <xTaskIncrementTick+0x154>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a3c      	ldr	r2, [pc, #240]	; (8001370 <xTaskIncrementTick+0x154>)
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	f000 faa8 	bl	80017d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <xTaskIncrementTick+0x158>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	429a      	cmp	r2, r3
 800128c:	d348      	bcc.n	8001320 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800128e:	4b36      	ldr	r3, [pc, #216]	; (8001368 <xTaskIncrementTick+0x14c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d104      	bne.n	80012a2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <xTaskIncrementTick+0x158>)
 800129a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800129e:	601a      	str	r2, [r3, #0]
                    break;
 80012a0:	e03e      	b.n	8001320 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <xTaskIncrementTick+0x14c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d203      	bcs.n	80012c2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80012ba:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <xTaskIncrementTick+0x158>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80012c0:	e02e      	b.n	8001320 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	3304      	adds	r3, #4
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f82c 	bl	8000324 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3318      	adds	r3, #24
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f823 	bl	8000324 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	2201      	movs	r2, #1
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <xTaskIncrementTick+0x15c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	4a22      	ldr	r2, [pc, #136]	; (8001378 <xTaskIncrementTick+0x15c>)
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <xTaskIncrementTick+0x160>)
 80012fe:	441a      	add	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3304      	adds	r3, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7fe ffaf 	bl	800026a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <xTaskIncrementTick+0x164>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	429a      	cmp	r2, r3
 8001318:	d3b9      	bcc.n	800128e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800131e:	e7b6      	b.n	800128e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <xTaskIncrementTick+0x164>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001326:	4915      	ldr	r1, [pc, #84]	; (800137c <xTaskIncrementTick+0x160>)
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d901      	bls.n	800133c <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <xTaskIncrementTick+0x168>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e004      	b.n	8001354 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <xTaskIncrementTick+0x16c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <xTaskIncrementTick+0x16c>)
 8001352:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001354:	697b      	ldr	r3, [r7, #20]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000138 	.word	0x20000138
 8001364:	20000114 	.word	0x20000114
 8001368:	200000c8 	.word	0x200000c8
 800136c:	200000cc 	.word	0x200000cc
 8001370:	20000128 	.word	0x20000128
 8001374:	20000130 	.word	0x20000130
 8001378:	20000118 	.word	0x20000118
 800137c:	2000003c 	.word	0x2000003c
 8001380:	20000038 	.word	0x20000038
 8001384:	20000124 	.word	0x20000124
 8001388:	20000120 	.word	0x20000120

0800138c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <vTaskSwitchContext+0xa0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <vTaskSwitchContext+0xa4>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80013a0:	e03e      	b.n	8001420 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80013a2:	4b23      	ldr	r3, [pc, #140]	; (8001430 <vTaskSwitchContext+0xa4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <vTaskSwitchContext+0xa8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	fab3 f383 	clz	r3, r3
 80013b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	f1c3 031f 	rsb	r3, r3, #31
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	491e      	ldr	r1, [pc, #120]	; (8001438 <vTaskSwitchContext+0xac>)
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d109      	bne.n	80013e6 <vTaskSwitchContext+0x5a>
        __asm volatile
 80013d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d6:	f383 8811 	msr	BASEPRI, r3
 80013da:	f3bf 8f6f 	isb	sy
 80013de:	f3bf 8f4f 	dsb	sy
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	e7fe      	b.n	80013e4 <vTaskSwitchContext+0x58>
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <vTaskSwitchContext+0xac>)
 80013f2:	4413      	add	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	3308      	adds	r3, #8
 8001408:	429a      	cmp	r2, r3
 800140a:	d104      	bne.n	8001416 <vTaskSwitchContext+0x8a>
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <vTaskSwitchContext+0xb0>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000138 	.word	0x20000138
 8001430:	20000124 	.word	0x20000124
 8001434:	20000118 	.word	0x20000118
 8001438:	2000003c 	.word	0x2000003c
 800143c:	20000038 	.word	0x20000038

08001440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <vTaskPlaceOnEventList+0x24>
 8001450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001454:	f383 8811 	msr	BASEPRI, r3
 8001458:	f3bf 8f6f 	isb	sy
 800145c:	f3bf 8f4f 	dsb	sy
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	e7fe      	b.n	8001462 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <vTaskPlaceOnEventList+0x44>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3318      	adds	r3, #24
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7fe ff20 	bl	80002b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001472:	2101      	movs	r1, #1
 8001474:	6838      	ldr	r0, [r7, #0]
 8001476:	f000 fa5f 	bl	8001938 <prvAddCurrentTaskToDelayedList>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000038 	.word	0x20000038

08001488 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <vTaskPlaceOnEventListRestricted+0x26>
 800149a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800149e:	f383 8811 	msr	BASEPRI, r3
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	f3bf 8f4f 	dsb	sy
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e7fe      	b.n	80014ac <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3318      	adds	r3, #24
 80014b4:	4619      	mov	r1, r3
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7fe fed7 	bl	800026a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	68b8      	ldr	r0, [r7, #8]
 80014cc:	f000 fa34 	bl	8001938 <prvAddCurrentTaskToDelayedList>
    }
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000038 	.word	0x20000038

080014dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <xTaskRemoveFromEventList+0x2a>
 80014f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f6:	f383 8811 	msr	BASEPRI, r3
 80014fa:	f3bf 8f6f 	isb	sy
 80014fe:	f3bf 8f4f 	dsb	sy
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	e7fe      	b.n	8001504 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	3318      	adds	r3, #24
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff0a 	bl	8000324 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <xTaskRemoveFromEventList+0xac>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d11c      	bne.n	8001552 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	3304      	adds	r3, #4
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ff01 	bl	8000324 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	2201      	movs	r2, #1
 8001528:	409a      	lsls	r2, r3
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <xTaskRemoveFromEventList+0xb0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4313      	orrs	r3, r2
 8001530:	4a16      	ldr	r2, [pc, #88]	; (800158c <xTaskRemoveFromEventList+0xb0>)
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <xTaskRemoveFromEventList+0xb4>)
 8001542:	441a      	add	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	3304      	adds	r3, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7fe fe8d 	bl	800026a <vListInsertEnd>
 8001550:	e005      	b.n	800155e <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	3318      	adds	r3, #24
 8001556:	4619      	mov	r1, r3
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <xTaskRemoveFromEventList+0xb8>)
 800155a:	f7fe fe86 	bl	800026a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <xTaskRemoveFromEventList+0xbc>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	429a      	cmp	r2, r3
 800156a:	d905      	bls.n	8001578 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800156c:	2301      	movs	r3, #1
 800156e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <xTaskRemoveFromEventList+0xc0>)
 8001572:	2201      	movs	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e001      	b.n	800157c <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800157c:	697b      	ldr	r3, [r7, #20]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000138 	.word	0x20000138
 800158c:	20000118 	.word	0x20000118
 8001590:	2000003c 	.word	0x2000003c
 8001594:	200000d0 	.word	0x200000d0
 8001598:	20000038 	.word	0x20000038
 800159c:	20000124 	.word	0x20000124

080015a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <vTaskInternalSetTimeOutState+0x24>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <vTaskInternalSetTimeOutState+0x28>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	605a      	str	r2, [r3, #4]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000128 	.word	0x20000128
 80015c8:	20000114 	.word	0x20000114

080015cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <xTaskCheckForTimeOut+0x24>
 80015dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e0:	f383 8811 	msr	BASEPRI, r3
 80015e4:	f3bf 8f6f 	isb	sy
 80015e8:	f3bf 8f4f 	dsb	sy
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e7fe      	b.n	80015ee <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d109      	bne.n	800160a <xTaskCheckForTimeOut+0x3e>
 80015f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e7fe      	b.n	8001608 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800160a:	f000 fe31 	bl	8002270 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <xTaskCheckForTimeOut+0xc0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001626:	d102      	bne.n	800162e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	e026      	b.n	800167c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <xTaskCheckForTimeOut+0xc4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d00a      	beq.n	8001650 <xTaskCheckForTimeOut+0x84>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	429a      	cmp	r2, r3
 8001642:	d305      	bcc.n	8001650 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001644:	2301      	movs	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	e015      	b.n	800167c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	429a      	cmp	r2, r3
 8001658:	d20b      	bcs.n	8001672 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad2      	subs	r2, r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff9a 	bl	80015a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	e004      	b.n	800167c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001678:	2301      	movs	r3, #1
 800167a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800167c:	f000 fe26 	bl	80022cc <vPortExitCritical>

    return xReturn;
 8001680:	69fb      	ldr	r3, [r7, #28]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000114 	.word	0x20000114
 8001690:	20000128 	.word	0x20000128

08001694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <vTaskMissedYield+0x14>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20000124 	.word	0x20000124

080016ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80016b4:	f000 f852 	bl	800175c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <prvIdleTask+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d9f9      	bls.n	80016b4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <prvIdleTask+0x2c>)
 80016c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80016d0:	e7f0      	b.n	80016b4 <prvIdleTask+0x8>
 80016d2:	bf00      	nop
 80016d4:	2000003c 	.word	0x2000003c
 80016d8:	e000ed04 	.word	0xe000ed04

080016dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	e00c      	b.n	8001702 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <prvInitialiseTaskLists+0x60>)
 80016f4:	4413      	add	r3, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fd8a 	bl	8000210 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3301      	adds	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d9ef      	bls.n	80016e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001708:	480d      	ldr	r0, [pc, #52]	; (8001740 <prvInitialiseTaskLists+0x64>)
 800170a:	f7fe fd81 	bl	8000210 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <prvInitialiseTaskLists+0x68>)
 8001710:	f7fe fd7e 	bl	8000210 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001714:	480c      	ldr	r0, [pc, #48]	; (8001748 <prvInitialiseTaskLists+0x6c>)
 8001716:	f7fe fd7b 	bl	8000210 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <prvInitialiseTaskLists+0x70>)
 800171c:	f7fe fd78 	bl	8000210 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <prvInitialiseTaskLists+0x74>)
 8001722:	f7fe fd75 	bl	8000210 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <prvInitialiseTaskLists+0x78>)
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <prvInitialiseTaskLists+0x64>)
 800172a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <prvInitialiseTaskLists+0x7c>)
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <prvInitialiseTaskLists+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000003c 	.word	0x2000003c
 8001740:	200000a0 	.word	0x200000a0
 8001744:	200000b4 	.word	0x200000b4
 8001748:	200000d0 	.word	0x200000d0
 800174c:	200000e4 	.word	0x200000e4
 8001750:	200000fc 	.word	0x200000fc
 8001754:	200000c8 	.word	0x200000c8
 8001758:	200000cc 	.word	0x200000cc

0800175c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001762:	e019      	b.n	8001798 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001764:	f000 fd84 	bl	8002270 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <prvCheckTasksWaitingTermination+0x4c>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3304      	adds	r3, #4
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fdd5 	bl	8000324 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <prvCheckTasksWaitingTermination+0x50>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <prvCheckTasksWaitingTermination+0x50>)
 8001782:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <prvCheckTasksWaitingTermination+0x54>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <prvCheckTasksWaitingTermination+0x54>)
 800178c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800178e:	f000 fd9d 	bl	80022cc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f80e 	bl	80017b4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <prvCheckTasksWaitingTermination+0x54>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e1      	bne.n	8001764 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200000e4 	.word	0x200000e4
 80017ac:	20000110 	.word	0x20000110
 80017b0:	200000f8 	.word	0x200000f8

080017b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 ff4b 	bl	800265c <vPortFree>
                vPortFree( pxTCB );
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 ff48 	bl	800265c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <prvResetNextTaskUnblockTime+0x30>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <prvResetNextTaskUnblockTime+0x34>)
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80017ea:	e005      	b.n	80017f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <prvResetNextTaskUnblockTime+0x30>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <prvResetNextTaskUnblockTime+0x34>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200000c8 	.word	0x200000c8
 8001808:	20000130 	.word	0x20000130

0800180c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <xTaskGetSchedulerState+0x34>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e008      	b.n	8001832 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <xTaskGetSchedulerState+0x38>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001828:	2302      	movs	r3, #2
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	e001      	b.n	8001832 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001832:	687b      	ldr	r3, [r7, #4]
    }
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	2000011c 	.word	0x2000011c
 8001844:	20000138 	.word	0x20000138

08001848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d061      	beq.n	8001922 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800185e:	4b33      	ldr	r3, [pc, #204]	; (800192c <xTaskPriorityDisinherit+0xe4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d009      	beq.n	800187c <xTaskPriorityDisinherit+0x34>
 8001868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e7fe      	b.n	800187a <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <xTaskPriorityDisinherit+0x50>
 8001884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001888:	f383 8811 	msr	BASEPRI, r3
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f3bf 8f4f 	dsb	sy
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	e7fe      	b.n	8001896 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d039      	beq.n	8001922 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d135      	bne.n	8001922 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	3304      	adds	r3, #4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fd32 	bl	8000324 <uxListRemove>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	2201      	movs	r2, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <xTaskPriorityDisinherit+0xe8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4013      	ands	r3, r2
 80018d8:	4a15      	ldr	r2, [pc, #84]	; (8001930 <xTaskPriorityDisinherit+0xe8>)
 80018da:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	f1c3 0205 	rsb	r2, r3, #5
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	2201      	movs	r2, #1
 80018f6:	409a      	lsls	r2, r3
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <xTaskPriorityDisinherit+0xe8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <xTaskPriorityDisinherit+0xe8>)
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4a09      	ldr	r2, [pc, #36]	; (8001934 <xTaskPriorityDisinherit+0xec>)
 8001910:	441a      	add	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	3304      	adds	r3, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f7fe fca6 	bl	800026a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001922:	697b      	ldr	r3, [r7, #20]
    }
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000038 	.word	0x20000038
 8001930:	20000118 	.word	0x20000118
 8001934:	2000003c 	.word	0x2000003c

08001938 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3304      	adds	r3, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fce8 	bl	8000324 <uxListRemove>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10b      	bne.n	8001972 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4013      	ands	r3, r2
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001970:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001978:	d10a      	bne.n	8001990 <prvAddCurrentTaskToDelayedList+0x58>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3304      	adds	r3, #4
 8001986:	4619      	mov	r1, r3
 8001988:	481a      	ldr	r0, [pc, #104]	; (80019f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800198a:	f7fe fc6e 	bl	800026a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800198e:	e026      	b.n	80019de <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d209      	bcs.n	80019bc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3304      	adds	r3, #4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f7fe fc7c 	bl	80002b2 <vListInsert>
}
 80019ba:	e010      	b.n	80019de <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3304      	adds	r3, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4610      	mov	r0, r2
 80019ca:	f7fe fc72 	bl	80002b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d202      	bcs.n	80019de <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80019d8:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <prvAddCurrentTaskToDelayedList+0xc8>)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000114 	.word	0x20000114
 80019ec:	20000038 	.word	0x20000038
 80019f0:	20000118 	.word	0x20000118
 80019f4:	200000fc 	.word	0x200000fc
 80019f8:	200000cc 	.word	0x200000cc
 80019fc:	200000c8 	.word	0x200000c8
 8001a00:	20000130 	.word	0x20000130

08001a04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001a0e:	f000 fad1 	bl	8001fb4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <xTimerCreateTimerTask+0x54>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <xTimerCreateTimerTask+0x58>)
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a28:	490d      	ldr	r1, [pc, #52]	; (8001a60 <xTimerCreateTimerTask+0x5c>)
 8001a2a:	480e      	ldr	r0, [pc, #56]	; (8001a64 <xTimerCreateTimerTask+0x60>)
 8001a2c:	f7ff f974 	bl	8000d18 <xTaskCreate>
 8001a30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <xTimerCreateTimerTask+0x48>
 8001a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a3c:	f383 8811 	msr	BASEPRI, r3
 8001a40:	f3bf 8f6f 	isb	sy
 8001a44:	f3bf 8f4f 	dsb	sy
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	e7fe      	b.n	8001a4a <xTimerCreateTimerTask+0x46>
        return xReturn;
 8001a4c:	687b      	ldr	r3, [r7, #4]
    }
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000016c 	.word	0x2000016c
 8001a5c:	20000170 	.word	0x20000170
 8001a60:	08002fd4 	.word	0x08002fd4
 8001a64:	08001b99 	.word	0x08001b99

08001a68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d109      	bne.n	8001a94 <xTimerGenericCommand+0x2c>
 8001a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a84:	f383 8811 	msr	BASEPRI, r3
 8001a88:	f3bf 8f6f 	isb	sy
 8001a8c:	f3bf 8f4f 	dsb	sy
 8001a90:	623b      	str	r3, [r7, #32]
 8001a92:	e7fe      	b.n	8001a92 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <xTimerGenericCommand+0x94>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02a      	beq.n	8001af2 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	dc18      	bgt.n	8001ae0 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001aae:	f7ff fead 	bl	800180c <xTaskGetSchedulerState>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d109      	bne.n	8001acc <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <xTimerGenericCommand+0x94>)
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	f107 0114 	add.w	r1, r7, #20
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ac4:	f7fe fd40 	bl	8000548 <xQueueGenericSend>
 8001ac8:	6278      	str	r0, [r7, #36]	; 0x24
 8001aca:	e012      	b.n	8001af2 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <xTimerGenericCommand+0x94>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	f107 0114 	add.w	r1, r7, #20
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f7fe fd36 	bl	8000548 <xQueueGenericSend>
 8001adc:	6278      	str	r0, [r7, #36]	; 0x24
 8001ade:	e008      	b.n	8001af2 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <xTimerGenericCommand+0x94>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f107 0114 	add.w	r1, r7, #20
 8001ae8:	2300      	movs	r3, #0
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	f7fe fe26 	bl	800073c <xQueueGenericSendFromISR>
 8001af0:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001af4:	4618      	mov	r0, r3
 8001af6:	3728      	adds	r7, #40	; 0x28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	2000016c 	.word	0x2000016c

08001b00 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <prvProcessExpiredTimer+0x94>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fc03 	bl	8000324 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d021      	beq.n	8001b70 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	18d1      	adds	r1, r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	6978      	ldr	r0, [r7, #20]
 8001b3a:	f000 f8d1 	bl	8001ce0 <prvInsertTimerInActiveList>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01e      	beq.n	8001b82 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001b44:	2300      	movs	r3, #0
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff8a 	bl	8001a68 <xTimerGenericCommand>
 8001b54:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d112      	bne.n	8001b82 <prvProcessExpiredTimer+0x82>
 8001b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b60:	f383 8811 	msr	BASEPRI, r3
 8001b64:	f3bf 8f6f 	isb	sy
 8001b68:	f3bf 8f4f 	dsb	sy
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e7fe      	b.n	8001b6e <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	4798      	blx	r3
    }
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000164 	.word	0x20000164

08001b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 f857 	bl	8001c58 <prvGetNextExpireTime>
 8001baa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f803 	bl	8001bbc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001bb6:	f000 f8d5 	bl	8001d64 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001bba:	e7f1      	b.n	8001ba0 <prvTimerTask+0x8>

08001bbc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001bc6:	f7ff fa6f 	bl	80010a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f866 	bl	8001ca0 <prvSampleTimeNow>
 8001bd4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d130      	bne.n	8001c3e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <prvProcessTimerOrBlockTask+0x3c>
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d806      	bhi.n	8001bf8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001bea:	f7ff fa6b 	bl	80010c4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001bee:	68f9      	ldr	r1, [r7, #12]
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff85 	bl	8001b00 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001bf6:	e024      	b.n	8001c42 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <prvProcessTimerOrBlockTask+0x90>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <prvProcessTimerOrBlockTask+0x50>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <prvProcessTimerOrBlockTask+0x52>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <prvProcessTimerOrBlockTask+0x94>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7ff f847 	bl	8000cb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001c22:	f7ff fa4f 	bl	80010c4 <xTaskResumeAll>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <prvProcessTimerOrBlockTask+0x98>)
 8001c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	f3bf 8f6f 	isb	sy
    }
 8001c3c:	e001      	b.n	8001c42 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001c3e:	f7ff fa41 	bl	80010c4 <xTaskResumeAll>
    }
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000168 	.word	0x20000168
 8001c50:	2000016c 	.word	0x2000016c
 8001c54:	e000ed04 	.word	0xe000ed04

08001c58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001c60:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <prvGetNextExpireTime+0x44>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <prvGetNextExpireTime+0x16>
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	e000      	b.n	8001c70 <prvGetNextExpireTime+0x18>
 8001c6e:	2200      	movs	r2, #0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <prvGetNextExpireTime+0x44>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e001      	b.n	8001c8c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    }
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000164 	.word	0x20000164

08001ca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001ca8:	f7ff faa8 	bl	80011fc <xTaskGetTickCount>
 8001cac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <prvSampleTimeNow+0x3c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d205      	bcs.n	8001cc4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001cb8:	f000 f918 	bl	8001eec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e002      	b.n	8001cca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <prvSampleTimeNow+0x3c>)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    }
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000174 	.word	0x20000174

08001ce0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d812      	bhi.n	8001d2c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	1ad2      	subs	r2, r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d302      	bcc.n	8001d1a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e01b      	b.n	8001d52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <prvInsertTimerInActiveList+0x7c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4610      	mov	r0, r2
 8001d26:	f7fe fac4 	bl	80002b2 <vListInsert>
 8001d2a:	e012      	b.n	8001d52 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d206      	bcs.n	8001d42 <prvInsertTimerInActiveList+0x62>
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d302      	bcc.n	8001d42 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e007      	b.n	8001d52 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <prvInsertTimerInActiveList+0x80>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f7fe fab0 	bl	80002b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001d52:	697b      	ldr	r3, [r7, #20]
    }
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000168 	.word	0x20000168
 8001d60:	20000164 	.word	0x20000164

08001d64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	; 0x30
 8001d68:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001d6a:	e0ac      	b.n	8001ec6 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f2c0 80a8 	blt.w	8001ec4 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	3304      	adds	r3, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe facd 	bl	8000324 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff87 	bl	8001ca0 <prvSampleTimeNow>
 8001d92:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b09      	cmp	r3, #9
 8001d98:	f200 8095 	bhi.w	8001ec6 <prvProcessReceivedCommands+0x162>
 8001d9c:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <prvProcessReceivedCommands+0x40>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	08001dcd 	.word	0x08001dcd
 8001dac:	08001dcd 	.word	0x08001dcd
 8001db0:	08001e3f 	.word	0x08001e3f
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e9b 	.word	0x08001e9b
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001dcd 	.word	0x08001dcd
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e53 	.word	0x08001e53
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	18d1      	adds	r1, r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dec:	f7ff ff78 	bl	8001ce0 <prvInsertTimerInActiveList>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d067      	beq.n	8001ec6 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001dfc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05c      	beq.n	8001ec6 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	441a      	add	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e1e:	f7ff fe23 	bl	8001a68 <xTimerGenericCommand>
 8001e22:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d14d      	bne.n	8001ec6 <prvProcessReceivedCommands+0x162>
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e7fe      	b.n	8001e3c <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001e50:	e039      	b.n	8001ec6 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <prvProcessReceivedCommands+0x122>
 8001e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e7fe      	b.n	8001e84 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	18d1      	adds	r1, r2, r3
 8001e8e:	6a3b      	ldr	r3, [r7, #32]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e94:	f7ff ff24 	bl	8001ce0 <prvInsertTimerInActiveList>
                        break;
 8001e98:	e015      	b.n	8001ec6 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8001ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eaa:	f000 fbd7 	bl	800265c <vPortFree>
 8001eae:	e00a      	b.n	8001ec6 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001ec2:	e000      	b.n	8001ec6 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001ec4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <prvProcessReceivedCommands+0x184>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f107 0108 	add.w	r1, r7, #8
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fcd9 	bl	8000888 <xQueueReceive>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f47f af47 	bne.w	8001d6c <prvProcessReceivedCommands+0x8>
        }
    }
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000016c 	.word	0x2000016c

08001eec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001ef2:	e047      	b.n	8001f84 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <prvSwitchTimerLists+0xc0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <prvSwitchTimerLists+0xc0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fa09 	bl	8000324 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d02d      	beq.n	8001f84 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d90e      	bls.n	8001f58 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <prvSwitchTimerLists+0xc0>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f7fe f9ae 	bl	80002b2 <vListInsert>
 8001f56:	e015      	b.n	8001f84 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	2100      	movs	r1, #0
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff fd80 	bl	8001a68 <xTimerGenericCommand>
 8001f68:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d109      	bne.n	8001f84 <prvSwitchTimerLists+0x98>
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	e7fe      	b.n	8001f82 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <prvSwitchTimerLists+0xc0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1b2      	bne.n	8001ef4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <prvSwitchTimerLists+0xc0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <prvSwitchTimerLists+0xc4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <prvSwitchTimerLists+0xc0>)
 8001f9a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <prvSwitchTimerLists+0xc4>)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	6013      	str	r3, [r2, #0]
    }
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000164 	.word	0x20000164
 8001fb0:	20000168 	.word	0x20000168

08001fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001fb8:	f000 f95a 	bl	8002270 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <prvCheckForValidListAndQueue+0x54>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d11d      	bne.n	8002000 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001fc4:	4811      	ldr	r0, [pc, #68]	; (800200c <prvCheckForValidListAndQueue+0x58>)
 8001fc6:	f7fe f923 	bl	8000210 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001fca:	4811      	ldr	r0, [pc, #68]	; (8002010 <prvCheckForValidListAndQueue+0x5c>)
 8001fcc:	f7fe f920 	bl	8000210 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <prvCheckForValidListAndQueue+0x60>)
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <prvCheckForValidListAndQueue+0x58>)
 8001fd4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <prvCheckForValidListAndQueue+0x64>)
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	; (8002010 <prvCheckForValidListAndQueue+0x5c>)
 8001fda:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001fdc:	2200      	movs	r2, #0
 8001fde:	210c      	movs	r1, #12
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f7fe fa31 	bl	8000448 <xQueueGenericCreate>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <prvCheckForValidListAndQueue+0x54>)
 8001fea:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <prvCheckForValidListAndQueue+0x54>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <prvCheckForValidListAndQueue+0x54>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4908      	ldr	r1, [pc, #32]	; (800201c <prvCheckForValidListAndQueue+0x68>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fe30 	bl	8000c60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002000:	f000 f964 	bl	80022cc <vPortExitCritical>
    }
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000016c 	.word	0x2000016c
 800200c:	2000013c 	.word	0x2000013c
 8002010:	20000150 	.word	0x20000150
 8002014:	20000164 	.word	0x20000164
 8002018:	20000168 	.word	0x20000168
 800201c:	08002fdc 	.word	0x08002fdc

08002020 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b04      	subs	r3, #4
 8002030:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002038:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3b04      	subs	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f023 0201 	bic.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b04      	subs	r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <pxPortInitialiseStack+0x64>)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3b14      	subs	r3, #20
 800205a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3b04      	subs	r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f06f 0202 	mvn.w	r2, #2
 800206e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3b20      	subs	r3, #32
 8002074:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	08002089 	.word	0x08002089

08002088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <prvTaskExitError+0x50>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209a:	d009      	beq.n	80020b0 <prvTaskExitError+0x28>
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e7fe      	b.n	80020ae <prvTaskExitError+0x26>
 80020b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b4:	f383 8811 	msr	BASEPRI, r3
 80020b8:	f3bf 8f6f 	isb	sy
 80020bc:	f3bf 8f4f 	dsb	sy
 80020c0:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80020c2:	bf00      	nop
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0fc      	beq.n	80020c4 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000004 	.word	0x20000004
 80020dc:	00000000 	.word	0x00000000

080020e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <pxCurrentTCBConst2>)
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	6808      	ldr	r0, [r1, #0]
 80020e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ea:	f380 8809 	msr	PSP, r0
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	f380 8811 	msr	BASEPRI, r0
 80020fa:	4770      	bx	lr
 80020fc:	f3af 8000 	nop.w

08002100 <pxCurrentTCBConst2>:
 8002100:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop

08002108 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002108:	4808      	ldr	r0, [pc, #32]	; (800212c <prvPortStartFirstTask+0x24>)
 800210a:	6800      	ldr	r0, [r0, #0]
 800210c:	6800      	ldr	r0, [r0, #0]
 800210e:	f380 8808 	msr	MSP, r0
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f380 8814 	msr	CONTROL, r0
 800211a:	b662      	cpsie	i
 800211c:	b661      	cpsie	f
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	df00      	svc	0
 8002128:	bf00      	nop
 800212a:	0000      	.short	0x0000
 800212c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop

08002134 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <xPortStartScheduler+0x118>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a44      	ldr	r2, [pc, #272]	; (8002250 <xPortStartScheduler+0x11c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d109      	bne.n	8002158 <xPortStartScheduler+0x24>
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	e7fe      	b.n	8002156 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002158:	4b3c      	ldr	r3, [pc, #240]	; (800224c <xPortStartScheduler+0x118>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3d      	ldr	r2, [pc, #244]	; (8002254 <xPortStartScheduler+0x120>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d109      	bne.n	8002176 <xPortStartScheduler+0x42>
 8002162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	f3bf 8f4f 	dsb	sy
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e7fe      	b.n	8002174 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <xPortStartScheduler+0x124>)
 8002178:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <xPortStartScheduler+0x128>)
 800219c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <xPortStartScheduler+0x12c>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021a4:	e009      	b.n	80021ba <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <xPortStartScheduler+0x12c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <xPortStartScheduler+0x12c>)
 80021ae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b80      	cmp	r3, #128	; 0x80
 80021c4:	d0ef      	beq.n	80021a6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <xPortStartScheduler+0x12c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d009      	beq.n	80021e6 <xPortStartScheduler+0xb2>
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	e7fe      	b.n	80021e4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <xPortStartScheduler+0x12c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <xPortStartScheduler+0x12c>)
 80021ee:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <xPortStartScheduler+0x12c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021f8:	4a19      	ldr	r2, [pc, #100]	; (8002260 <xPortStartScheduler+0x12c>)
 80021fa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002204:	4b17      	ldr	r3, [pc, #92]	; (8002264 <xPortStartScheduler+0x130>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a16      	ldr	r2, [pc, #88]	; (8002264 <xPortStartScheduler+0x130>)
 800220a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <xPortStartScheduler+0x130>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a13      	ldr	r2, [pc, #76]	; (8002264 <xPortStartScheduler+0x130>)
 8002216:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800221a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800221c:	f000 f8d4 	bl	80023c8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <xPortStartScheduler+0x134>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002226:	f000 f8f3 	bl	8002410 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <xPortStartScheduler+0x138>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a0f      	ldr	r2, [pc, #60]	; (800226c <xPortStartScheduler+0x138>)
 8002230:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002234:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002236:	f7ff ff67 	bl	8002108 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800223a:	f7ff f8a7 	bl	800138c <vTaskSwitchContext>
    prvTaskExitError();
 800223e:	f7ff ff23 	bl	8002088 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	e000ed00 	.word	0xe000ed00
 8002250:	410fc271 	.word	0x410fc271
 8002254:	410fc270 	.word	0x410fc270
 8002258:	e000e400 	.word	0xe000e400
 800225c:	20000178 	.word	0x20000178
 8002260:	2000017c 	.word	0x2000017c
 8002264:	e000ed20 	.word	0xe000ed20
 8002268:	20000004 	.word	0x20000004
 800226c:	e000ef34 	.word	0xe000ef34

08002270 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <vPortEnterCritical+0x54>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <vPortEnterCritical+0x54>)
 8002290:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <vPortEnterCritical+0x54>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10e      	bne.n	80022b8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <vPortEnterCritical+0x58>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d009      	beq.n	80022b8 <vPortEnterCritical+0x48>
 80022a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a8:	f383 8811 	msr	BASEPRI, r3
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	f3bf 8f4f 	dsb	sy
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	e7fe      	b.n	80022b6 <vPortEnterCritical+0x46>
    }
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	20000004 	.word	0x20000004
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <vPortExitCritical+0x4c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <vPortExitCritical+0x22>
 80022da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022de:	f383 8811 	msr	BASEPRI, r3
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	f3bf 8f4f 	dsb	sy
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	e7fe      	b.n	80022ec <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <vPortExitCritical+0x4c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <vPortExitCritical+0x4c>)
 80022f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <vPortExitCritical+0x4c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d104      	bne.n	800230a <vPortExitCritical+0x3e>
 8002300:	2300      	movs	r3, #0
 8002302:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000004 	.word	0x20000004
 800231c:	00000000 	.word	0x00000000

08002320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002320:	f3ef 8009 	mrs	r0, PSP
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <pxCurrentTCBConst>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f01e 0f10 	tst.w	lr, #16
 8002330:	bf08      	it	eq
 8002332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233a:	6010      	str	r0, [r2, #0]
 800233c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002344:	f380 8811 	msr	BASEPRI, r0
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f7ff f81c 	bl	800138c <vTaskSwitchContext>
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f380 8811 	msr	BASEPRI, r0
 800235c:	bc09      	pop	{r0, r3}
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	6808      	ldr	r0, [r1, #0]
 8002362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002366:	f01e 0f10 	tst.w	lr, #16
 800236a:	bf08      	it	eq
 800236c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002370:	f380 8809 	msr	PSP, r0
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w

08002380 <pxCurrentTCBConst>:
 8002380:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop

08002388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
        __asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023a0:	f7fe ff3c 	bl	800121c <xTaskIncrementTick>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <SysTick_Handler+0x3c>)
 80023ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	e000ed04 	.word	0xe000ed04

080023c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <vPortSetupTimerInterrupt+0x34>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <vPortSetupTimerInterrupt+0x38>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <vPortSetupTimerInterrupt+0x3c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <vPortSetupTimerInterrupt+0x40>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	4a09      	ldr	r2, [pc, #36]	; (800240c <vPortSetupTimerInterrupt+0x44>)
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <vPortSetupTimerInterrupt+0x34>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010
 8002400:	e000e018 	.word	0xe000e018
 8002404:	20000008 	.word	0x20000008
 8002408:	10624dd3 	.word	0x10624dd3
 800240c:	e000e014 	.word	0xe000e014

08002410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002410:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002420 <vPortEnableVFP+0x10>
 8002414:	6801      	ldr	r1, [r0, #0]
 8002416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800241a:	6001      	str	r1, [r0, #0]
 800241c:	4770      	bx	lr
 800241e:	0000      	.short	0x0000
 8002420:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop

08002428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800242e:	f3ef 8305 	mrs	r3, IPSR
 8002432:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	d913      	bls.n	8002462 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <vPortValidateInterruptPriority+0x6c>)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <vPortValidateInterruptPriority+0x70>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	7afa      	ldrb	r2, [r7, #11]
 800244a:	429a      	cmp	r2, r3
 800244c:	d209      	bcs.n	8002462 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	f383 8811 	msr	BASEPRI, r3
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	e7fe      	b.n	8002460 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <vPortValidateInterruptPriority+0x74>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <vPortValidateInterruptPriority+0x78>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d909      	bls.n	8002486 <vPortValidateInterruptPriority+0x5e>
 8002472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002476:	f383 8811 	msr	BASEPRI, r3
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	f3bf 8f4f 	dsb	sy
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	e7fe      	b.n	8002484 <vPortValidateInterruptPriority+0x5c>
    }
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e3f0 	.word	0xe000e3f0
 8002498:	20000178 	.word	0x20000178
 800249c:	e000ed0c 	.word	0xe000ed0c
 80024a0:	2000017c 	.word	0x2000017c

080024a4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80024b0:	f7fe fdfa 	bl	80010a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024b4:	4b63      	ldr	r3, [pc, #396]	; (8002644 <pvPortMalloc+0x1a0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80024bc:	f000 f92e 	bl	800271c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <pvPortMalloc+0x1a4>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 80a5 	bne.w	8002618 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d02c      	beq.n	800252e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80024d4:	2208      	movs	r2, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d226      	bcs.n	800252e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 80024e0:	2208      	movs	r2, #8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d020      	beq.n	8002534 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f023 0307 	bic.w	r3, r3, #7
 80024f8:	3308      	adds	r3, #8
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d213      	bcs.n	8002528 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f023 0307 	bic.w	r3, r3, #7
 8002506:	3308      	adds	r3, #8
 8002508:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <pvPortMalloc+0x90>
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e7fe      	b.n	8002526 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800252c:	e002      	b.n	8002534 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	e000      	b.n	8002536 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002534:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d06d      	beq.n	8002618 <pvPortMalloc+0x174>
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <pvPortMalloc+0x1a8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d868      	bhi.n	8002618 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <pvPortMalloc+0x1ac>)
 8002548:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800254a:	4b41      	ldr	r3, [pc, #260]	; (8002650 <pvPortMalloc+0x1ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002550:	e004      	b.n	800255c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d903      	bls.n	800256e <pvPortMalloc+0xca>
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800256e:	4b35      	ldr	r3, [pc, #212]	; (8002644 <pvPortMalloc+0x1a0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002574:	429a      	cmp	r2, r3
 8002576:	d04f      	beq.n	8002618 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2208      	movs	r2, #8
 800257e:	4413      	add	r3, r2
 8002580:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	1ad2      	subs	r2, r2, r3
 8002592:	2308      	movs	r3, #8
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	429a      	cmp	r2, r3
 8002598:	d91e      	bls.n	80025d8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800259a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <pvPortMalloc+0x11c>
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	e7fe      	b.n	80025be <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1ad2      	subs	r2, r2, r3
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80025d2:	69b8      	ldr	r0, [r7, #24]
 80025d4:	f000 f904 	bl	80027e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <pvPortMalloc+0x1a8>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a1a      	ldr	r2, [pc, #104]	; (800264c <pvPortMalloc+0x1a8>)
 80025e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <pvPortMalloc+0x1a8>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <pvPortMalloc+0x1b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d203      	bcs.n	80025fa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <pvPortMalloc+0x1a8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <pvPortMalloc+0x1b0>)
 80025f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <pvPortMalloc+0x1a4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	431a      	orrs	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <pvPortMalloc+0x1b4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a10      	ldr	r2, [pc, #64]	; (8002658 <pvPortMalloc+0x1b4>)
 8002616:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002618:	f7fe fd54 	bl	80010c4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <pvPortMalloc+0x196>
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e7fe      	b.n	8002638 <pvPortMalloc+0x194>
    return pvReturn;
 800263a:	69fb      	ldr	r3, [r7, #28]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3728      	adds	r7, #40	; 0x28
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20012d88 	.word	0x20012d88
 8002648:	20012d9c 	.word	0x20012d9c
 800264c:	20012d8c 	.word	0x20012d8c
 8002650:	20012d80 	.word	0x20012d80
 8002654:	20012d90 	.word	0x20012d90
 8002658:	20012d94 	.word	0x20012d94

0800265c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d04b      	beq.n	8002706 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800266e:	2308      	movs	r3, #8
 8002670:	425b      	negs	r3, r3
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4413      	add	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4b23      	ldr	r3, [pc, #140]	; (8002710 <vPortFree+0xb4>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <vPortFree+0x42>
 800268a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268e:	f383 8811 	msr	BASEPRI, r3
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e7fe      	b.n	800269c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <vPortFree+0x5e>
 80026a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	e7fe      	b.n	80026b8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <vPortFree+0xb4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01e      	beq.n	8002706 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11a      	bne.n	8002706 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <vPortFree+0xb4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80026e0:	f7fe fce2 	bl	80010a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <vPortFree+0xb8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <vPortFree+0xb8>)
 80026f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026f2:	6938      	ldr	r0, [r7, #16]
 80026f4:	f000 f874 	bl	80027e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <vPortFree+0xbc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	4a06      	ldr	r2, [pc, #24]	; (8002718 <vPortFree+0xbc>)
 8002700:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002702:	f7fe fcdf 	bl	80010c4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20012d9c 	.word	0x20012d9c
 8002714:	20012d8c 	.word	0x20012d8c
 8002718:	20012d98 	.word	0x20012d98

0800271c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002722:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002726:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <prvHeapInit+0xac>)
 800272a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3307      	adds	r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <prvHeapInit+0xac>)
 800274c:	4413      	add	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <prvHeapInit+0xb0>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <prvHeapInit+0xb0>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002768:	2208      	movs	r2, #8
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <prvHeapInit+0xb4>)
 800277c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <prvHeapInit+0xb4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <prvHeapInit+0xb4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <prvHeapInit+0xb4>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <prvHeapInit+0xb8>)
 80027aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <prvHeapInit+0xbc>)
 80027b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <prvHeapInit+0xc0>)
 80027b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	20000180 	.word	0x20000180
 80027cc:	20012d80 	.word	0x20012d80
 80027d0:	20012d88 	.word	0x20012d88
 80027d4:	20012d90 	.word	0x20012d90
 80027d8:	20012d8c 	.word	0x20012d8c
 80027dc:	20012d9c 	.word	0x20012d9c

080027e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <prvInsertBlockIntoFreeList+0xac>)
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e002      	b.n	80027f4 <prvInsertBlockIntoFreeList+0x14>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d8f7      	bhi.n	80027ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4413      	add	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	d108      	bne.n	8002822 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	441a      	add	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	441a      	add	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d118      	bne.n	8002868 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <prvInsertBlockIntoFreeList+0xb0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d00d      	beq.n	800285e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e008      	b.n	8002870 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <prvInsertBlockIntoFreeList+0xb0>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e003      	b.n	8002870 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	429a      	cmp	r2, r3
 8002876:	d002      	beq.n	800287e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20012d80 	.word	0x20012d80
 8002890:	20012d88 	.word	0x20012d88

08002894 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e076      	b.n	800299e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80028b0:	2201      	movs	r2, #1
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d165      	bne.n	8002998 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2103      	movs	r1, #3
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	401a      	ands	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	791b      	ldrb	r3, [r3, #4]
 80028ea:	4619      	mov	r1, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	791b      	ldrb	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d003      	beq.n	800290a <GPIO_Init+0x76>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	791b      	ldrb	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d12e      	bne.n	8002968 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2103      	movs	r1, #3
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	401a      	ands	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	795b      	ldrb	r3, [r3, #5]
 8002928:	4619      	mov	r1, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4619      	mov	r1, r3
 8002942:	2301      	movs	r3, #1
 8002944:	408b      	lsls	r3, r1
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	7992      	ldrb	r2, [r2, #6]
 8002956:	4611      	mov	r1, r2
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	b292      	uxth	r2, r2
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	b292      	uxth	r2, r2
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	b29b      	uxth	r3, r3
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2103      	movs	r1, #3
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	79db      	ldrb	r3, [r3, #7]
 8002988:	4619      	mov	r1, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3301      	adds	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b0f      	cmp	r3, #15
 80029a2:	d985      	bls.n	80028b0 <GPIO_Init+0x1c>
    }
  }
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	405a      	eors	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	615a      	str	r2, [r3, #20]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <RCC_DeInit+0x60>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <RCC_DeInit+0x60>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <RCC_DeInit+0x60>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <RCC_DeInit+0x60>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <RCC_DeInit+0x60>)
 80029f0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80029f4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80029f8:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <RCC_DeInit+0x60>)
 80029fc:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <RCC_DeInit+0x64>)
 80029fe:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <RCC_DeInit+0x60>)
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <RCC_DeInit+0x68>)
 8002a04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <RCC_DeInit+0x60>)
 8002a0a:	4a0d      	ldr	r2, [pc, #52]	; (8002a40 <RCC_DeInit+0x6c>)
 8002a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <RCC_DeInit+0x60>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <RCC_DeInit+0x60>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <RCC_DeInit+0x60>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <RCC_DeInit+0x60>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40023800 	.word	0x40023800
 8002a38:	24003010 	.word	0x24003010
 8002a3c:	20003000 	.word	0x20003000
 8002a40:	24003000 	.word	0x24003000

08002a44 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <RCC_SYSCLKConfig+0x34>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f023 0303 	bic.w	r3, r3, #3
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <RCC_SYSCLKConfig+0x34>)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6093      	str	r3, [r2, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40023800 	.word	0x40023800

08002a7c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a92:	4909      	ldr	r1, [pc, #36]	; (8002ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002a9a:	e006      	b.n	8002aaa <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <main>:
void vTask4_Handler(void* params);

void Init_GPIO_LED(void);

int main(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af02      	add	r7, sp, #8
	//By default the system clk is running at max speed which 168Mhz
	//this is done by setsysclk function
	//if it is not required then deinit the clk config and set it to desired value using functions provided in stm32f4xx_rcc.c
	RCC_DeInit();
 8002ac2:	f7ff ff87 	bl	80029d4 <RCC_DeInit>
	//set HSE as default clk
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff ffbc 	bl	8002a44 <RCC_SYSCLKConfig>
	//call the systemcoreclk update function the SystemCoreClock variable to newly set clk frequency
	SystemCoreClockUpdate();
 8002acc:	f000 f918 	bl	8002d00 <SystemCoreClockUpdate>

	//create  task
	xTaskCreate(vTask1_Handler, "Led_1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &xTask1_Handle);
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <main+0x70>)
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2282      	movs	r2, #130	; 0x82
 8002adc:	4914      	ldr	r1, [pc, #80]	; (8002b30 <main+0x74>)
 8002ade:	4815      	ldr	r0, [pc, #84]	; (8002b34 <main+0x78>)
 8002ae0:	f7fe f91a 	bl	8000d18 <xTaskCreate>
	xTaskCreate(vTask2_Handler, "Led_2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &xTask2_Handle);
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <main+0x7c>)
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2302      	movs	r3, #2
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	2282      	movs	r2, #130	; 0x82
 8002af0:	4912      	ldr	r1, [pc, #72]	; (8002b3c <main+0x80>)
 8002af2:	4813      	ldr	r0, [pc, #76]	; (8002b40 <main+0x84>)
 8002af4:	f7fe f910 	bl	8000d18 <xTaskCreate>
	xTaskCreate(vTask3_Handler, "Led_3", configMINIMAL_STACK_SIZE, NULL, TASK3_PRIORITY, &xTask3_Handle);
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <main+0x88>)
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	2282      	movs	r2, #130	; 0x82
 8002b04:	4910      	ldr	r1, [pc, #64]	; (8002b48 <main+0x8c>)
 8002b06:	4811      	ldr	r0, [pc, #68]	; (8002b4c <main+0x90>)
 8002b08:	f7fe f906 	bl	8000d18 <xTaskCreate>
	xTaskCreate(vTask4_Handler, "Led_4", configMINIMAL_STACK_SIZE, NULL, TASK4_PRIORITY, &xTask4_Handle);
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <main+0x94>)
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	2302      	movs	r3, #2
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	2282      	movs	r2, #130	; 0x82
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <main+0x98>)
 8002b1a:	480f      	ldr	r0, [pc, #60]	; (8002b58 <main+0x9c>)
 8002b1c:	f7fe f8fc 	bl	8000d18 <xTaskCreate>

	//init the LED GPIO
	Init_GPIO_LED();
 8002b20:	f000 f884 	bl	8002c2c <Init_GPIO_LED>
	//start the FreeRtos Task Scheduler
	vTaskStartScheduler();
 8002b24:	f7fe fa70 	bl	8001008 <vTaskStartScheduler>


	for(;;);
 8002b28:	e7fe      	b.n	8002b28 <main+0x6c>
 8002b2a:	bf00      	nop
 8002b2c:	20012da0 	.word	0x20012da0
 8002b30:	08002fe4 	.word	0x08002fe4
 8002b34:	08002b5d 	.word	0x08002b5d
 8002b38:	20012da4 	.word	0x20012da4
 8002b3c:	08002fec 	.word	0x08002fec
 8002b40:	08002b91 	.word	0x08002b91
 8002b44:	20012da8 	.word	0x20012da8
 8002b48:	08002ff4 	.word	0x08002ff4
 8002b4c:	08002bc5 	.word	0x08002bc5
 8002b50:	20012dac 	.word	0x20012dac
 8002b54:	08002ffc 	.word	0x08002ffc
 8002b58:	08002bf9 	.word	0x08002bf9

08002b5c <vTask1_Handler>:
}

void vTask1_Handler(void* params) //this will toggle pin 15 led
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8002b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <vTask1_Handler+0x2c>)
 8002b6a:	f7ff ff21 	bl	80029b0 <GPIO_ToggleBits>
		vTaskDelay(500);
 8002b6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b72:	f7fe fa15 	bl	8000fa0 <vTaskDelay>
		taskYIELD();
 8002b76:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <vTask1_Handler+0x30>)
 8002b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	f3bf 8f6f 	isb	sy
		GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8002b86:	e7ed      	b.n	8002b64 <vTask1_Handler+0x8>
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	e000ed04 	.word	0xe000ed04

08002b90 <vTask2_Handler>:
	};
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself or can call the vtask1_handler
}
void vTask2_Handler(void* params) //this will toggle pin 14 led
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8002b98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b9c:	4807      	ldr	r0, [pc, #28]	; (8002bbc <vTask2_Handler+0x2c>)
 8002b9e:	f7ff ff07 	bl	80029b0 <GPIO_ToggleBits>
		vTaskDelay(500);
 8002ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ba6:	f7fe f9fb 	bl	8000fa0 <vTaskDelay>
		taskYIELD(); //leave the mcpu and get in task ready state in the queue at last in same priority task lists
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <vTask2_Handler+0x30>)
 8002bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	f3bf 8f6f 	isb	sy
		GPIO_ToggleBits(GPIOD, GPIO_Pin_14);
 8002bba:	e7ed      	b.n	8002b98 <vTask2_Handler+0x8>
 8002bbc:	40020c00 	.word	0x40020c00
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <vTask3_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(xTask2_Handle); //NULL means the task itself
}

void vTask3_Handler(void* params) //this will toggle pin 13 led
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8002bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd0:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <vTask3_Handler+0x2c>)
 8002bd2:	f7ff feed 	bl	80029b0 <GPIO_ToggleBits>
		vTaskDelay(500);
 8002bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bda:	f7fe f9e1 	bl	8000fa0 <vTaskDelay>
		taskYIELD();
 8002bde:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <vTask3_Handler+0x30>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 8002bee:	e7ed      	b.n	8002bcc <vTask3_Handler+0x8>
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <vTask4_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(xTask3_Handle); //NULL means the task itself
}

void vTask4_Handler(void* params) //this will toggle pin 13 led
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 8002c00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c04:	4807      	ldr	r0, [pc, #28]	; (8002c24 <vTask4_Handler+0x2c>)
 8002c06:	f7ff fed3 	bl	80029b0 <GPIO_ToggleBits>
		vTaskDelay(500);
 8002c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c0e:	f7fe f9c7 	bl	8000fa0 <vTaskDelay>
		taskYIELD();
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <vTask4_Handler+0x30>)
 8002c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	f3bf 8f6f 	isb	sy
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 8002c22:	e7ed      	b.n	8002c00 <vTask4_Handler+0x8>
 8002c24:	40020c00 	.word	0x40020c00
 8002c28:	e000ed04 	.word	0xe000ed04

08002c2c <Init_GPIO_LED>:
	vTaskDelete(xTask4_Handle); //NULL means the task itself
}


void Init_GPIO_LED(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
		//Init GPIOD Peripheral
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002c32:	2101      	movs	r1, #1
 8002c34:	2008      	movs	r0, #8
 8002c36:	f7ff ff21 	bl	8002a7c <RCC_AHB1PeriphClockCmd>
		GPIO_InitTypeDef gpio_led;
		gpio_led.GPIO_Mode = GPIO_Mode_OUT;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	713b      	strb	r3, [r7, #4]
		gpio_led.GPIO_OType = GPIO_OType_PP;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	71bb      	strb	r3, [r7, #6]
		gpio_led.GPIO_PuPd = GPIO_PuPd_UP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	71fb      	strb	r3, [r7, #7]
		gpio_led.GPIO_Pin = GPIO_Pin_15; //blue led
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	4619      	mov	r1, r3
 8002c50:	480f      	ldr	r0, [pc, #60]	; (8002c90 <Init_GPIO_LED+0x64>)
 8002c52:	f7ff fe1f 	bl	8002894 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_14; //red led
 8002c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c5a:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <Init_GPIO_LED+0x64>)
 8002c62:	f7ff fe17 	bl	8002894 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_13; //orange led
 8002c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c6a:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4807      	ldr	r0, [pc, #28]	; (8002c90 <Init_GPIO_LED+0x64>)
 8002c72:	f7ff fe0f 	bl	8002894 <GPIO_Init>

		gpio_led.GPIO_Pin = GPIO_Pin_12; //green led
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	603b      	str	r3, [r7, #0]
		GPIO_Init(GPIOD, &gpio_led);
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <Init_GPIO_LED+0x64>)
 8002c82:	f7ff fe07 	bl	8002894 <GPIO_Init>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40020c00 	.word	0x40020c00

08002c94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <SystemInit+0x60>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	4a15      	ldr	r2, [pc, #84]	; (8002cf4 <SystemInit+0x60>)
 8002ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <SystemInit+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <SystemInit+0x64>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <SystemInit+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <SystemInit+0x64>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <SystemInit+0x64>)
 8002cc0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <SystemInit+0x64>)
 8002ccc:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <SystemInit+0x68>)
 8002cce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <SystemInit+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <SystemInit+0x64>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <SystemInit+0x64>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002ce2:	f000 f889 	bl	8002df8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ce6:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <SystemInit+0x60>)
 8002ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cec:	609a      	str	r2, [r3, #8]
#endif
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	24003010 	.word	0x24003010

08002d00 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	2302      	movs	r3, #2
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	2302      	movs	r3, #2
 8002d18:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002d1a:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d007      	beq.n	8002d3a <SystemCoreClockUpdate+0x3a>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d009      	beq.n	8002d42 <SystemCoreClockUpdate+0x42>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d13d      	bne.n	8002dae <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <SystemCoreClockUpdate+0xe8>)
 8002d34:	4a2d      	ldr	r2, [pc, #180]	; (8002dec <SystemCoreClockUpdate+0xec>)
 8002d36:	601a      	str	r2, [r3, #0]
      break;
 8002d38:	e03d      	b.n	8002db6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <SystemCoreClockUpdate+0xe8>)
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	; (8002df0 <SystemCoreClockUpdate+0xf0>)
 8002d3e:	601a      	str	r2, [r3, #0]
      break;
 8002d40:	e039      	b.n	8002db6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0d9b      	lsrs	r3, r3, #22
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d56:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00c      	beq.n	8002d78 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002d5e:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <SystemCoreClockUpdate+0xf0>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002d68:	6852      	ldr	r2, [r2, #4]
 8002d6a:	0992      	lsrs	r2, r2, #6
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	e00b      	b.n	8002d90 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <SystemCoreClockUpdate+0xec>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	0992      	lsrs	r2, r2, #6
 8002d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	4a0f      	ldr	r2, [pc, #60]	; (8002de8 <SystemCoreClockUpdate+0xe8>)
 8002daa:	6013      	str	r3, [r2, #0]
      break;
 8002dac:	e003      	b.n	8002db6 <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <SystemCoreClockUpdate+0xe8>)
 8002db0:	4a0e      	ldr	r2, [pc, #56]	; (8002dec <SystemCoreClockUpdate+0xec>)
 8002db2:	601a      	str	r2, [r3, #0]
      break;
 8002db4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <SystemCoreClockUpdate+0xe4>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <SystemCoreClockUpdate+0xf4>)
 8002dc2:	5cd3      	ldrb	r3, [r2, r3]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <SystemCoreClockUpdate+0xe8>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd2:	4a05      	ldr	r2, [pc, #20]	; (8002de8 <SystemCoreClockUpdate+0xe8>)
 8002dd4:	6013      	str	r3, [r2, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	20000008 	.word	0x20000008
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	017d7840 	.word	0x017d7840
 8002df4:	2000000c 	.word	0x2000000c

08002df8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <SetSysClock+0xe8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a35      	ldr	r2, [pc, #212]	; (8002ee0 <SetSysClock+0xe8>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <SetSysClock+0xe8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <SetSysClock+0x38>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e2e:	d1f0      	bne.n	8002e12 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <SetSysClock+0xe8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	e001      	b.n	8002e46 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002e42:	2300      	movs	r3, #0
 8002e44:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d142      	bne.n	8002ed2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <SetSysClock+0xe8>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4a23      	ldr	r2, [pc, #140]	; (8002ee0 <SetSysClock+0xe8>)
 8002e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e56:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <SetSysClock+0xec>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <SetSysClock+0xec>)
 8002e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e62:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002e64:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <SetSysClock+0xe8>)
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <SetSysClock+0xe8>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <SetSysClock+0xe8>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <SetSysClock+0xe8>)
 8002e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e76:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002e78:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <SetSysClock+0xe8>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <SetSysClock+0xe8>)
 8002e7e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002e82:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <SetSysClock+0xe8>)
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <SetSysClock+0xf0>)
 8002e88:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <SetSysClock+0xe8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <SetSysClock+0xe8>)
 8002e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e94:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002e96:	bf00      	nop
 8002e98:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <SetSysClock+0xe8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f9      	beq.n	8002e98 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002ea4:	4b11      	ldr	r3, [pc, #68]	; (8002eec <SetSysClock+0xf4>)
 8002ea6:	f240 7205 	movw	r2, #1797	; 0x705
 8002eaa:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <SetSysClock+0xe8>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <SetSysClock+0xe8>)
 8002eb2:	f023 0303 	bic.w	r3, r3, #3
 8002eb6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002eb8:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <SetSysClock+0xe8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a08      	ldr	r2, [pc, #32]	; (8002ee0 <SetSysClock+0xe8>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8002ec4:	bf00      	nop
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <SetSysClock+0xe8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d1f9      	bne.n	8002ec6 <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	07405419 	.word	0x07405419
 8002eec:	40023c00 	.word	0x40023c00

08002ef0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ef2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <LoopForever+0xe>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f0c:	4c0b      	ldr	r4, [pc, #44]	; (8002f3c <LoopForever+0x16>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002f1a:	f7ff febb 	bl	8002c94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002f1e:	f000 f811 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f22:	f7ff fdcb 	bl	8002abc <main>

08002f26 <LoopForever>:

LoopForever:
    b LoopForever
 8002f26:	e7fe      	b.n	8002f26 <LoopForever>
  ldr   r0, =_estack
 8002f28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f30:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002f34:	0800300c 	.word	0x0800300c
  ldr r2, =_sbss
 8002f38:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002f3c:	20012df0 	.word	0x20012df0

08002f40 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f40:	e7fe      	b.n	8002f40 <ADC_IRQHandler>
	...

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4e0d      	ldr	r6, [pc, #52]	; (8002f7c <__libc_init_array+0x38>)
 8002f48:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <__libc_init_array+0x3c>)
 8002f4a:	1ba4      	subs	r4, r4, r6
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	2500      	movs	r5, #0
 8002f50:	42a5      	cmp	r5, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	4e0b      	ldr	r6, [pc, #44]	; (8002f84 <__libc_init_array+0x40>)
 8002f56:	4c0c      	ldr	r4, [pc, #48]	; (8002f88 <__libc_init_array+0x44>)
 8002f58:	f000 f82c 	bl	8002fb4 <_init>
 8002f5c:	1ba4      	subs	r4, r4, r6
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	2500      	movs	r5, #0
 8002f62:	42a5      	cmp	r5, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6c:	4798      	blx	r3
 8002f6e:	3501      	adds	r5, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f76:	4798      	blx	r3
 8002f78:	3501      	adds	r5, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08003004 	.word	0x08003004
 8002f80:	08003004 	.word	0x08003004
 8002f84:	08003004 	.word	0x08003004
 8002f88:	08003008 	.word	0x08003008

08002f8c <memcpy>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	1e43      	subs	r3, r0, #1
 8002f90:	440a      	add	r2, r1
 8002f92:	4291      	cmp	r1, r2
 8002f94:	d100      	bne.n	8002f98 <memcpy+0xc>
 8002f96:	bd10      	pop	{r4, pc}
 8002f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fa0:	e7f7      	b.n	8002f92 <memcpy+0x6>

08002fa2 <memset>:
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d100      	bne.n	8002fac <memset+0xa>
 8002faa:	4770      	bx	lr
 8002fac:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb0:	e7f9      	b.n	8002fa6 <memset+0x4>
	...

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
