
FreeRTOS_STM32_Porting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dcc  2000001c  08002cd0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012de8  08002cd0  00022de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009103  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001399  00000000  00000000  0002914f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000760  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001423  00000000  00000000  0002b310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006263  00000000  00000000  0002c733  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b318  00000000  00000000  00032996  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009dcae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e94  00000000  00000000  0009dd2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002c6c 	.word	0x08002c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08002c6c 	.word	0x08002c6c

08000210 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f103 0208 	add.w	r2, r3, #8
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000228:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f103 0208 	add.w	r2, r3, #8
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f103 0208 	add.w	r2, r3, #8
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr

08000250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr

0800026a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800026a:	b480      	push	{r7}
 800026c:	b085      	sub	sp, #20
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
 8000272:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689a      	ldr	r2, [r3, #8]
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	689b      	ldr	r3, [r3, #8]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	1c5a      	adds	r2, r3, #1
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002c8:	d103      	bne.n	80002d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e00c      	b.n	80002ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	3308      	adds	r3, #8
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e002      	b.n	80002e0 <vListInsert+0x2e>
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68ba      	ldr	r2, [r7, #8]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d2f6      	bcs.n	80002da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	685a      	ldr	r2, [r3, #4]
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1c5a      	adds	r2, r3, #1
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	601a      	str	r2, [r3, #0]
}
 8000318:	bf00      	nop
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr

08000324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	6892      	ldr	r2, [r2, #8]
 800033a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	6852      	ldr	r2, [r2, #4]
 8000344:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	429a      	cmp	r2, r3
 800034e:	d103      	bne.n	8000358 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	1e5a      	subs	r2, r3, #1
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	681b      	ldr	r3, [r3, #0]
}
 800036c:	4618      	mov	r0, r3
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d109      	bne.n	80003a0 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000390:	f383 8811 	msr	BASEPRI, r3
 8000394:	f3bf 8f6f 	isb	sy
 8000398:	f3bf 8f4f 	dsb	sy
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	e7fe      	b.n	800039e <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 80003a0:	f001 ff36 	bl	8002210 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003ac:	68f9      	ldr	r1, [r7, #12]
 80003ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003b0:	fb01 f303 	mul.w	r3, r1, r3
 80003b4:	441a      	add	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	2200      	movs	r2, #0
 80003be:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003d0:	3b01      	subs	r3, #1
 80003d2:	68f9      	ldr	r1, [r7, #12]
 80003d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	441a      	add	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	22ff      	movs	r2, #255	; 0xff
 80003e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	22ff      	movs	r2, #255	; 0xff
 80003ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d114      	bne.n	8000420 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d01a      	beq.n	8000434 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	3310      	adds	r3, #16
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f836 	bl	8001474 <xTaskRemoveFromEventList>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d012      	beq.n	8000434 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <xQueueGenericReset+0xcc>)
 8000410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	e009      	b.n	8000434 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	3310      	adds	r3, #16
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff fef3 	bl	8000210 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3324      	adds	r3, #36	; 0x24
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff feee 	bl	8000210 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000434:	f001 ff1a 	bl	800226c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000438:	2301      	movs	r3, #1
}
 800043a:	4618      	mov	r0, r3
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000ed04 	.word	0xe000ed04

08000448 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000448:	b580      	push	{r7, lr}
 800044a:	b08c      	sub	sp, #48	; 0x30
 800044c:	af02      	add	r7, sp, #8
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	4613      	mov	r3, r2
 8000454:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d109      	bne.n	8000470 <xQueueGenericCreate+0x28>
 800045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000460:	f383 8811 	msr	BASEPRI, r3
 8000464:	f3bf 8f6f 	isb	sy
 8000468:	f3bf 8f4f 	dsb	sy
 800046c:	61bb      	str	r3, [r7, #24]
 800046e:	e7fe      	b.n	800046e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	fb02 f303 	mul.w	r3, r2, r3
 8000478:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d006      	beq.n	800048e <xQueueGenericCreate+0x46>
 8000480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	fbb2 f3f3 	udiv	r3, r2, r3
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	429a      	cmp	r2, r3
 800048c:	d101      	bne.n	8000492 <xQueueGenericCreate+0x4a>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <xQueueGenericCreate+0x4c>
 8000492:	2300      	movs	r3, #0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d109      	bne.n	80004ac <xQueueGenericCreate+0x64>
 8000498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800049c:	f383 8811 	msr	BASEPRI, r3
 80004a0:	f3bf 8f6f 	isb	sy
 80004a4:	f3bf 8f4f 	dsb	sy
 80004a8:	617b      	str	r3, [r7, #20]
 80004aa:	e7fe      	b.n	80004aa <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80004b2:	d909      	bls.n	80004c8 <xQueueGenericCreate+0x80>
 80004b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004b8:	f383 8811 	msr	BASEPRI, r3
 80004bc:	f3bf 8f6f 	isb	sy
 80004c0:	f3bf 8f4f 	dsb	sy
 80004c4:	613b      	str	r3, [r7, #16]
 80004c6:	e7fe      	b.n	80004c6 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80004c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ca:	3350      	adds	r3, #80	; 0x50
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 ffb9 	bl	8002444 <pvPortMalloc>
 80004d2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80004d4:	6a3b      	ldr	r3, [r7, #32]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00d      	beq.n	80004f6 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80004da:	6a3b      	ldr	r3, [r7, #32]
 80004dc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004de:	69fb      	ldr	r3, [r7, #28]
 80004e0:	3350      	adds	r3, #80	; 0x50
 80004e2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80004e4:	79fa      	ldrb	r2, [r7, #7]
 80004e6:	6a3b      	ldr	r3, [r7, #32]
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	4613      	mov	r3, r2
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	68b9      	ldr	r1, [r7, #8]
 80004f0:	68f8      	ldr	r0, [r7, #12]
 80004f2:	f000 f805 	bl	8000500 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004f6:	6a3b      	ldr	r3, [r7, #32]
    }
 80004f8:	4618      	mov	r0, r3
 80004fa:	3728      	adds	r7, #40	; 0x28
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
 800050c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d103      	bne.n	800051c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	69ba      	ldr	r2, [r7, #24]
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	e002      	b.n	8000522 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800052e:	2101      	movs	r1, #1
 8000530:	69b8      	ldr	r0, [r7, #24]
 8000532:	f7ff ff21 	bl	8000378 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000536:	69bb      	ldr	r3, [r7, #24]
 8000538:	78fa      	ldrb	r2, [r7, #3]
 800053a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08e      	sub	sp, #56	; 0x38
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000556:	2300      	movs	r3, #0
 8000558:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800055e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000560:	2b00      	cmp	r3, #0
 8000562:	d109      	bne.n	8000578 <xQueueGenericSend+0x30>
 8000564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000568:	f383 8811 	msr	BASEPRI, r3
 800056c:	f3bf 8f6f 	isb	sy
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
 8000576:	e7fe      	b.n	8000576 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d103      	bne.n	8000586 <xQueueGenericSend+0x3e>
 800057e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <xQueueGenericSend+0x42>
 8000586:	2301      	movs	r3, #1
 8000588:	e000      	b.n	800058c <xQueueGenericSend+0x44>
 800058a:	2300      	movs	r3, #0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d109      	bne.n	80005a4 <xQueueGenericSend+0x5c>
 8000590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000594:	f383 8811 	msr	BASEPRI, r3
 8000598:	f3bf 8f6f 	isb	sy
 800059c:	f3bf 8f4f 	dsb	sy
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
 80005a2:	e7fe      	b.n	80005a2 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d103      	bne.n	80005b2 <xQueueGenericSend+0x6a>
 80005aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d101      	bne.n	80005b6 <xQueueGenericSend+0x6e>
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <xQueueGenericSend+0x70>
 80005b6:	2300      	movs	r3, #0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d109      	bne.n	80005d0 <xQueueGenericSend+0x88>
 80005bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	623b      	str	r3, [r7, #32]
 80005ce:	e7fe      	b.n	80005ce <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80005d0:	f001 f8e8 	bl	80017a4 <xTaskGetSchedulerState>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d102      	bne.n	80005e0 <xQueueGenericSend+0x98>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <xQueueGenericSend+0x9c>
 80005e0:	2301      	movs	r3, #1
 80005e2:	e000      	b.n	80005e6 <xQueueGenericSend+0x9e>
 80005e4:	2300      	movs	r3, #0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d109      	bne.n	80005fe <xQueueGenericSend+0xb6>
 80005ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ee:	f383 8811 	msr	BASEPRI, r3
 80005f2:	f3bf 8f6f 	isb	sy
 80005f6:	f3bf 8f4f 	dsb	sy
 80005fa:	61fb      	str	r3, [r7, #28]
 80005fc:	e7fe      	b.n	80005fc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80005fe:	f001 fe07 	bl	8002210 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800060a:	429a      	cmp	r2, r3
 800060c:	d302      	bcc.n	8000614 <xQueueGenericSend+0xcc>
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b02      	cmp	r3, #2
 8000612:	d129      	bne.n	8000668 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800061a:	f000 fa11 	bl	8000a40 <prvCopyDataToQueue>
 800061e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	2b00      	cmp	r3, #0
 8000626:	d010      	beq.n	800064a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800062a:	3324      	adds	r3, #36	; 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f000 ff21 	bl	8001474 <xTaskRemoveFromEventList>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d013      	beq.n	8000660 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000638:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <xQueueGenericSend+0x1f0>)
 800063a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	f3bf 8f4f 	dsb	sy
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	e00a      	b.n	8000660 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800064c:	2b00      	cmp	r3, #0
 800064e:	d007      	beq.n	8000660 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000650:	4b39      	ldr	r3, [pc, #228]	; (8000738 <xQueueGenericSend+0x1f0>)
 8000652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000660:	f001 fe04 	bl	800226c <vPortExitCritical>
                return pdPASS;
 8000664:	2301      	movs	r3, #1
 8000666:	e063      	b.n	8000730 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d103      	bne.n	8000676 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800066e:	f001 fdfd 	bl	800226c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8000672:	2300      	movs	r3, #0
 8000674:	e05c      	b.n	8000730 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000678:	2b00      	cmp	r3, #0
 800067a:	d106      	bne.n	800068a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4618      	mov	r0, r3
 8000682:	f000 ff59 	bl	8001538 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000686:	2301      	movs	r3, #1
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800068a:	f001 fdef 	bl	800226c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800068e:	f000 fcd7 	bl	8001040 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000692:	f001 fdbd 	bl	8002210 <vPortEnterCritical>
 8000696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800069c:	b25b      	sxtb	r3, r3
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006a2:	d103      	bne.n	80006ac <xQueueGenericSend+0x164>
 80006a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80006ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b8:	d103      	bne.n	80006c2 <xQueueGenericSend+0x17a>
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80006c2:	f001 fdd3 	bl	800226c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80006c6:	1d3a      	adds	r2, r7, #4
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 ff48 	bl	8001564 <xTaskCheckForTimeOut>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d124      	bne.n	8000724 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80006da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006dc:	f000 faa8 	bl	8000c30 <prvIsQueueFull>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d018      	beq.n	8000718 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80006e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006e8:	3310      	adds	r3, #16
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fe72 	bl	80013d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80006f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006f6:	f000 fa33 	bl	8000b60 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80006fa:	f000 fcaf 	bl	800105c <xTaskResumeAll>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	f47f af7c 	bne.w	80005fe <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <xQueueGenericSend+0x1f0>)
 8000708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	e772      	b.n	80005fe <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800071a:	f000 fa21 	bl	8000b60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800071e:	f000 fc9d 	bl	800105c <xTaskResumeAll>
 8000722:	e76c      	b.n	80005fe <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000726:	f000 fa1b 	bl	8000b60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800072a:	f000 fc97 	bl	800105c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800072e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000730:	4618      	mov	r0, r3
 8000732:	3738      	adds	r7, #56	; 0x38
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	e000ed04 	.word	0xe000ed04

0800073c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800074e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <xQueueGenericSendFromISR+0x2c>
 8000754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000758:	f383 8811 	msr	BASEPRI, r3
 800075c:	f3bf 8f6f 	isb	sy
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
 8000766:	e7fe      	b.n	8000766 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <xQueueGenericSendFromISR+0x3a>
 800076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <xQueueGenericSendFromISR+0x3e>
 8000776:	2301      	movs	r3, #1
 8000778:	e000      	b.n	800077c <xQueueGenericSendFromISR+0x40>
 800077a:	2300      	movs	r3, #0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d109      	bne.n	8000794 <xQueueGenericSendFromISR+0x58>
 8000780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
 8000792:	e7fe      	b.n	8000792 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d103      	bne.n	80007a2 <xQueueGenericSendFromISR+0x66>
 800079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800079c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d101      	bne.n	80007a6 <xQueueGenericSendFromISR+0x6a>
 80007a2:	2301      	movs	r3, #1
 80007a4:	e000      	b.n	80007a8 <xQueueGenericSendFromISR+0x6c>
 80007a6:	2300      	movs	r3, #0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d109      	bne.n	80007c0 <xQueueGenericSendFromISR+0x84>
 80007ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b0:	f383 8811 	msr	BASEPRI, r3
 80007b4:	f3bf 8f6f 	isb	sy
 80007b8:	f3bf 8f4f 	dsb	sy
 80007bc:	623b      	str	r3, [r7, #32]
 80007be:	e7fe      	b.n	80007be <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80007c0:	f001 fe02 	bl	80023c8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80007c4:	f3ef 8211 	mrs	r2, BASEPRI
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	61fa      	str	r2, [r7, #28]
 80007da:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80007dc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80007de:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80007e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d302      	bcc.n	80007f2 <xQueueGenericSendFromISR+0xb6>
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d13d      	bne.n	800086e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80007f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80007fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000808:	f000 f91a 	bl	8000a40 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800080c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000814:	d112      	bne.n	800083c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	2b00      	cmp	r3, #0
 800081c:	d024      	beq.n	8000868 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000820:	3324      	adds	r3, #36	; 0x24
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fe26 	bl	8001474 <xTaskRemoveFromEventList>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d01c      	beq.n	8000868 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d019      	beq.n	8000868 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e015      	b.n	8000868 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800083c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000840:	2b7f      	cmp	r3, #127	; 0x7f
 8000842:	d109      	bne.n	8000858 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8000844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000848:	f383 8811 	msr	BASEPRI, r3
 800084c:	f3bf 8f6f 	isb	sy
 8000850:	f3bf 8f4f 	dsb	sy
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e7fe      	b.n	8000856 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800085c:	3301      	adds	r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b25a      	sxtb	r2, r3
 8000862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000868:	2301      	movs	r3, #1
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800086c:	e001      	b.n	8000872 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800086e:	2300      	movs	r3, #0
 8000870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000874:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800087c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800087e:	4618      	mov	r0, r3
 8000880:	3740      	adds	r7, #64	; 0x40
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d109      	bne.n	80008b6 <xQueueReceive+0x2e>
        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	e7fe      	b.n	80008b4 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <xQueueReceive+0x3c>
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d101      	bne.n	80008c8 <xQueueReceive+0x40>
 80008c4:	2301      	movs	r3, #1
 80008c6:	e000      	b.n	80008ca <xQueueReceive+0x42>
 80008c8:	2300      	movs	r3, #0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d109      	bne.n	80008e2 <xQueueReceive+0x5a>
 80008ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d2:	f383 8811 	msr	BASEPRI, r3
 80008d6:	f3bf 8f6f 	isb	sy
 80008da:	f3bf 8f4f 	dsb	sy
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	e7fe      	b.n	80008e0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008e2:	f000 ff5f 	bl	80017a4 <xTaskGetSchedulerState>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <xQueueReceive+0x6a>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <xQueueReceive+0x6e>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e000      	b.n	80008f8 <xQueueReceive+0x70>
 80008f6:	2300      	movs	r3, #0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d109      	bne.n	8000910 <xQueueReceive+0x88>
 80008fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	61bb      	str	r3, [r7, #24]
 800090e:	e7fe      	b.n	800090e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000910:	f001 fc7e 	bl	8002210 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	2b00      	cmp	r3, #0
 800091e:	d01f      	beq.n	8000960 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000924:	f000 f8f6 	bl	8000b14 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00f      	beq.n	8000958 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093a:	3310      	adds	r3, #16
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fd99 	bl	8001474 <xTaskRemoveFromEventList>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d007      	beq.n	8000958 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000948:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <xQueueReceive+0x1b4>)
 800094a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	f3bf 8f4f 	dsb	sy
 8000954:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000958:	f001 fc88 	bl	800226c <vPortExitCritical>
                return pdPASS;
 800095c:	2301      	movs	r3, #1
 800095e:	e069      	b.n	8000a34 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d103      	bne.n	800096e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000966:	f001 fc81 	bl	800226c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800096a:	2300      	movs	r3, #0
 800096c:	e062      	b.n	8000a34 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	2b00      	cmp	r3, #0
 8000972:	d106      	bne.n	8000982 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fddd 	bl	8001538 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800097e:	2301      	movs	r3, #1
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000982:	f001 fc73 	bl	800226c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000986:	f000 fb5b 	bl	8001040 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800098a:	f001 fc41 	bl	8002210 <vPortEnterCritical>
 800098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000994:	b25b      	sxtb	r3, r3
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800099a:	d103      	bne.n	80009a4 <xQueueReceive+0x11c>
 800099c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b0:	d103      	bne.n	80009ba <xQueueReceive+0x132>
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009ba:	f001 fc57 	bl	800226c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009be:	1d3a      	adds	r2, r7, #4
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fdcc 	bl	8001564 <xTaskCheckForTimeOut>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d123      	bne.n	8000a1a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80009d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009d4:	f000 f916 	bl	8000c04 <prvIsQueueEmpty>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d017      	beq.n	8000a0e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	3324      	adds	r3, #36	; 0x24
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fcf6 	bl	80013d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80009ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ee:	f000 f8b7 	bl	8000b60 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80009f2:	f000 fb33 	bl	800105c <xTaskResumeAll>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d189      	bne.n	8000910 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <xQueueReceive+0x1b4>)
 80009fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	f3bf 8f4f 	dsb	sy
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	e780      	b.n	8000910 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a10:	f000 f8a6 	bl	8000b60 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a14:	f000 fb22 	bl	800105c <xTaskResumeAll>
 8000a18:	e77a      	b.n	8000910 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a1c:	f000 f8a0 	bl	8000b60 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a20:	f000 fb1c 	bl	800105c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a26:	f000 f8ed 	bl	8000c04 <prvIsQueueEmpty>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f43f af6f 	beq.w	8000910 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000a32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3730      	adds	r7, #48	; 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	e000ed04 	.word	0xe000ed04

08000a40 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a54:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10d      	bne.n	8000a7a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d14d      	bne.n	8000b02 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 feb8 	bl	80017e0 <xTaskPriorityDisinherit>
 8000a70:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	e043      	b.n	8000b02 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d119      	bne.n	8000ab4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6858      	ldr	r0, [r3, #4]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	f002 f8da 	bl	8002c44 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	685a      	ldr	r2, [r3, #4]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	441a      	add	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d32b      	bcc.n	8000b02 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	e026      	b.n	8000b02 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	68d8      	ldr	r0, [r3, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	461a      	mov	r2, r3
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	f002 f8c0 	bl	8002c44 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	425b      	negs	r3, r3
 8000ace:	441a      	add	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	68da      	ldr	r2, [r3, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	425b      	negs	r3, r3
 8000aea:	441a      	add	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d105      	bne.n	8000b02 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000b0a:	697b      	ldr	r3, [r7, #20]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d018      	beq.n	8000b58 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	441a      	add	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d303      	bcc.n	8000b48 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68d9      	ldr	r1, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	461a      	mov	r2, r3
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f002 f876 	bl	8002c44 <memcpy>
    }
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000b68:	f001 fb52 	bl	8002210 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b72:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b74:	e011      	b.n	8000b9a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d012      	beq.n	8000ba4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3324      	adds	r3, #36	; 0x24
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fc76 	bl	8001474 <xTaskRemoveFromEventList>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000b8e:	f000 fd4d 	bl	800162c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	dce9      	bgt.n	8000b76 <prvUnlockQueue+0x16>
 8000ba2:	e000      	b.n	8000ba6 <prvUnlockQueue+0x46>
                        break;
 8000ba4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	22ff      	movs	r2, #255	; 0xff
 8000baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000bae:	f001 fb5d 	bl	800226c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000bb2:	f001 fb2d 	bl	8002210 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bbc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000bbe:	e011      	b.n	8000be4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d012      	beq.n	8000bee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3310      	adds	r3, #16
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fc51 	bl	8001474 <xTaskRemoveFromEventList>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000bd8:	f000 fd28 	bl	800162c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000bdc:	7bbb      	ldrb	r3, [r7, #14]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	dce9      	bgt.n	8000bc0 <prvUnlockQueue+0x60>
 8000bec:	e000      	b.n	8000bf0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000bee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	22ff      	movs	r2, #255	; 0xff
 8000bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000bf8:	f001 fb38 	bl	800226c <vPortExitCritical>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c0c:	f001 fb00 	bl	8002210 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e001      	b.n	8000c22 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c22:	f001 fb23 	bl	800226c <vPortExitCritical>

    return xReturn;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000c38:	f001 faea 	bl	8002210 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d102      	bne.n	8000c4e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e001      	b.n	8000c52 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000c52:	f001 fb0b 	bl	800226c <vPortExitCritical>

    return xReturn;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e014      	b.n	8000c9a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <vQueueAddToRegistry+0x4c>)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10b      	bne.n	8000c94 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000c7c:	490b      	ldr	r1, [pc, #44]	; (8000cac <vQueueAddToRegistry+0x4c>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <vQueueAddToRegistry+0x4c>)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8000c92:	e005      	b.n	8000ca0 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d9e7      	bls.n	8000c70 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	20012da8 	.word	0x20012da8

08000cb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000cc0:	f001 faa6 	bl	8002210 <vPortEnterCritical>
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cca:	b25b      	sxtb	r3, r3
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cd0:	d103      	bne.n	8000cda <vQueueWaitForMessageRestricted+0x2a>
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce6:	d103      	bne.n	8000cf0 <vQueueWaitForMessageRestricted+0x40>
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000cf0:	f001 fabc 	bl	800226c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	3324      	adds	r3, #36	; 0x24
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fb8b 	bl	8001420 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff28 	bl	8000b60 <prvUnlockQueue>
    }
 8000d10:	bf00      	nop
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08c      	sub	sp, #48	; 0x30
 8000d1c:	af04      	add	r7, sp, #16
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	4613      	mov	r3, r2
 8000d26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fb89 	bl	8002444 <pvPortMalloc>
 8000d32:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00e      	beq.n	8000d58 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000d3a:	2058      	movs	r0, #88	; 0x58
 8000d3c:	f001 fb82 	bl	8002444 <pvPortMalloc>
 8000d40:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d003      	beq.n	8000d50 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d4e:	e005      	b.n	8000d5c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f001 fc53 	bl	80025fc <vPortFree>
 8000d56:	e001      	b.n	8000d5c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d013      	beq.n	8000d8a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	2300      	movs	r3, #0
 8000d66:	9303      	str	r3, [sp, #12]
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	9302      	str	r3, [sp, #8]
 8000d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f80e 	bl	8000d9a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000d7e:	69f8      	ldr	r0, [r7, #28]
 8000d80:	f000 f8a0 	bl	8000ec4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	e002      	b.n	8000d90 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000d90:	69bb      	ldr	r3, [r7, #24]
    }
 8000d92:	4618      	mov	r0, r3
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b088      	sub	sp, #32
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000daa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	461a      	mov	r2, r3
 8000db2:	21a5      	movs	r1, #165	; 0xa5
 8000db4:	f001 ff51 	bl	8002c5a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	f023 0307 	bic.w	r3, r3, #7
 8000dd0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d009      	beq.n	8000df0 <prvInitialiseNewTask+0x56>
 8000ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de0:	f383 8811 	msr	BASEPRI, r3
 8000de4:	f3bf 8f6f 	isb	sy
 8000de8:	f3bf 8f4f 	dsb	sy
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e7fe      	b.n	8000dee <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d01f      	beq.n	8000e36 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e012      	b.n	8000e22 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	4413      	add	r3, r2
 8000e02:	7819      	ldrb	r1, [r3, #0]
 8000e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	4413      	add	r3, r2
 8000e0a:	3334      	adds	r3, #52	; 0x34
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	2b09      	cmp	r3, #9
 8000e26:	d9e9      	bls.n	8000dfc <prvInitialiseNewTask+0x62>
 8000e28:	e000      	b.n	8000e2c <prvInitialiseNewTask+0x92>
            {
                break;
 8000e2a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000e34:	e003      	b.n	8000e3e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d901      	bls.n	8000e48 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000e44:	2304      	movs	r3, #4
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e52:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8000e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e56:	2200      	movs	r2, #0
 8000e58:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff f9f6 	bl	8000250 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	3318      	adds	r3, #24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff f9f1 	bl	8000250 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e72:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	f1c3 0205 	rsb	r2, r3, #5
 8000e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e82:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8000e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e86:	3350      	adds	r3, #80	; 0x50
 8000e88:	2204      	movs	r2, #4
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fee4 	bl	8002c5a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e94:	3354      	adds	r3, #84	; 0x54
 8000e96:	2201      	movs	r2, #1
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fedd 	bl	8002c5a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	68f9      	ldr	r1, [r7, #12]
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f001 f887 	bl	8001fb8 <pxPortInitialiseStack>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eae:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000ecc:	f001 f9a0 	bl	8002210 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <prvAddNewTaskToReadyList+0xc0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <prvAddNewTaskToReadyList+0xc0>)
 8000ed8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d109      	bne.n	8000ef6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000ee2:	4a29      	ldr	r2, [pc, #164]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ee8:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <prvAddNewTaskToReadyList+0xc0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d110      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ef0:	f000 fbc0 	bl	8001674 <prvInitialiseTaskLists>
 8000ef4:	e00d      	b.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <prvAddNewTaskToReadyList+0xc8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d109      	bne.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d802      	bhi.n	8000f12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000f0c:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <prvAddNewTaskToReadyList+0xcc>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a1d      	ldr	r2, [pc, #116]	; (8000f90 <prvAddNewTaskToReadyList+0xcc>)
 8000f1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <prvAddNewTaskToReadyList+0xcc>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <prvAddNewTaskToReadyList+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <prvAddNewTaskToReadyList+0xd0>)
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <prvAddNewTaskToReadyList+0xd4>)
 8000f44:	441a      	add	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f7ff f98c 	bl	800026a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000f52:	f001 f98b 	bl	800226c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <prvAddNewTaskToReadyList+0xc8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00e      	beq.n	8000f7c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <prvAddNewTaskToReadyList+0xc4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <prvAddNewTaskToReadyList+0xd8>)
 8000f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	f3bf 8f4f 	dsb	sy
 8000f78:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000110 	.word	0x20000110
 8000f88:	20000038 	.word	0x20000038
 8000f8c:	2000011c 	.word	0x2000011c
 8000f90:	2000012c 	.word	0x2000012c
 8000f94:	20000118 	.word	0x20000118
 8000f98:	2000003c 	.word	0x2000003c
 8000f9c:	e000ed04 	.word	0xe000ed04

08000fa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <vTaskStartScheduler+0x84>)
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2282      	movs	r2, #130	; 0x82
 8000fb2:	491d      	ldr	r1, [pc, #116]	; (8001028 <vTaskStartScheduler+0x88>)
 8000fb4:	481d      	ldr	r0, [pc, #116]	; (800102c <vTaskStartScheduler+0x8c>)
 8000fb6:	f7ff feaf 	bl	8000d18 <xTaskCreate>
 8000fba:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d102      	bne.n	8000fc8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8000fc2:	f000 fceb 	bl	800199c <xTimerCreateTimerTask>
 8000fc6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d115      	bne.n	8000ffa <vTaskStartScheduler+0x5a>
 8000fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fd2:	f383 8811 	msr	BASEPRI, r3
 8000fd6:	f3bf 8f6f 	isb	sy
 8000fda:	f3bf 8f4f 	dsb	sy
 8000fde:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <vTaskStartScheduler+0x90>)
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <vTaskStartScheduler+0x94>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <vTaskStartScheduler+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8000ff4:	f001 f86e 	bl	80020d4 <xPortStartScheduler>
 8000ff8:	e00d      	b.n	8001016 <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d109      	bne.n	8001016 <vTaskStartScheduler+0x76>
 8001002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001006:	f383 8811 	msr	BASEPRI, r3
 800100a:	f3bf 8f6f 	isb	sy
 800100e:	f3bf 8f4f 	dsb	sy
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	e7fe      	b.n	8001014 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <vTaskStartScheduler+0x9c>)
 8001018:	681b      	ldr	r3, [r3, #0]
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000134 	.word	0x20000134
 8001028:	08002c84 	.word	0x08002c84
 800102c:	08001645 	.word	0x08001645
 8001030:	20000130 	.word	0x20000130
 8001034:	2000011c 	.word	0x2000011c
 8001038:	20000114 	.word	0x20000114
 800103c:	20000000 	.word	0x20000000

08001040 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <vTaskSuspendAll+0x18>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a03      	ldr	r2, [pc, #12]	; (8001058 <vTaskSuspendAll+0x18>)
 800104c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000138 	.word	0x20000138

0800105c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <xTaskResumeAll+0x114>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <xTaskResumeAll+0x2a>
 8001072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001076:	f383 8811 	msr	BASEPRI, r3
 800107a:	f3bf 8f6f 	isb	sy
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	e7fe      	b.n	8001084 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001086:	f001 f8c3 	bl	8002210 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800108a:	4b39      	ldr	r3, [pc, #228]	; (8001170 <xTaskResumeAll+0x114>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	4a37      	ldr	r2, [pc, #220]	; (8001170 <xTaskResumeAll+0x114>)
 8001092:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001094:	4b36      	ldr	r3, [pc, #216]	; (8001170 <xTaskResumeAll+0x114>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d161      	bne.n	8001160 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800109c:	4b35      	ldr	r3, [pc, #212]	; (8001174 <xTaskResumeAll+0x118>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05d      	beq.n	8001160 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80010a4:	e02e      	b.n	8001104 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <xTaskResumeAll+0x11c>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3318      	adds	r3, #24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f936 	bl	8000324 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3304      	adds	r3, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f931 	bl	8000324 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c6:	2201      	movs	r2, #1
 80010c8:	409a      	lsls	r2, r3
 80010ca:	4b2c      	ldr	r3, [pc, #176]	; (800117c <xTaskResumeAll+0x120>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	4a2a      	ldr	r2, [pc, #168]	; (800117c <xTaskResumeAll+0x120>)
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4a27      	ldr	r2, [pc, #156]	; (8001180 <xTaskResumeAll+0x124>)
 80010e2:	441a      	add	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3304      	adds	r3, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f7ff f8bd 	bl	800026a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <xTaskResumeAll+0x128>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d302      	bcc.n	8001104 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <xTaskResumeAll+0x12c>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <xTaskResumeAll+0x11c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1cc      	bne.n	80010a6 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001112:	f000 fb2b 	bl	800176c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001116:	4b1d      	ldr	r3, [pc, #116]	; (800118c <xTaskResumeAll+0x130>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d010      	beq.n	8001144 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001122:	f000 f847 	bl	80011b4 <xTaskIncrementTick>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <xTaskResumeAll+0x12c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3b01      	subs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f1      	bne.n	8001122 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <xTaskResumeAll+0x130>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <xTaskResumeAll+0x12c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <xTaskResumeAll+0x134>)
 8001152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001160:	f001 f884 	bl	800226c <vPortExitCritical>

    return xAlreadyYielded;
 8001164:	68bb      	ldr	r3, [r7, #8]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000138 	.word	0x20000138
 8001174:	20000110 	.word	0x20000110
 8001178:	200000d0 	.word	0x200000d0
 800117c:	20000118 	.word	0x20000118
 8001180:	2000003c 	.word	0x2000003c
 8001184:	20000038 	.word	0x20000038
 8001188:	20000124 	.word	0x20000124
 800118c:	20000120 	.word	0x20000120
 8001190:	e000ed04 	.word	0xe000ed04

08001194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <xTaskGetTickCount+0x1c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000114 	.word	0x20000114

080011b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <xTaskIncrementTick+0x144>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 808d 	bne.w	80012e2 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <xTaskIncrementTick+0x148>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80011d0:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <xTaskIncrementTick+0x148>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11f      	bne.n	800121c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <xTaskIncrementTick+0x14c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d009      	beq.n	80011fa <xTaskIncrementTick+0x46>
 80011e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ea:	f383 8811 	msr	BASEPRI, r3
 80011ee:	f3bf 8f6f 	isb	sy
 80011f2:	f3bf 8f4f 	dsb	sy
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	e7fe      	b.n	80011f8 <xTaskIncrementTick+0x44>
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <xTaskIncrementTick+0x14c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b40      	ldr	r3, [pc, #256]	; (8001304 <xTaskIncrementTick+0x150>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a3e      	ldr	r2, [pc, #248]	; (8001300 <xTaskIncrementTick+0x14c>)
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4a3e      	ldr	r2, [pc, #248]	; (8001304 <xTaskIncrementTick+0x150>)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b3e      	ldr	r3, [pc, #248]	; (8001308 <xTaskIncrementTick+0x154>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a3c      	ldr	r2, [pc, #240]	; (8001308 <xTaskIncrementTick+0x154>)
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	f000 faa8 	bl	800176c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800121c:	4b3b      	ldr	r3, [pc, #236]	; (800130c <xTaskIncrementTick+0x158>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	429a      	cmp	r2, r3
 8001224:	d348      	bcc.n	80012b8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <xTaskIncrementTick+0x14c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <xTaskIncrementTick+0x158>)
 8001232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001236:	601a      	str	r2, [r3, #0]
                    break;
 8001238:	e03e      	b.n	80012b8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <xTaskIncrementTick+0x14c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d203      	bcs.n	800125a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001252:	4a2e      	ldr	r2, [pc, #184]	; (800130c <xTaskIncrementTick+0x158>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001258:	e02e      	b.n	80012b8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	3304      	adds	r3, #4
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f860 	bl	8000324 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	3318      	adds	r3, #24
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f857 	bl	8000324 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	2201      	movs	r2, #1
 800127c:	409a      	lsls	r2, r3
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <xTaskIncrementTick+0x15c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <xTaskIncrementTick+0x15c>)
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <xTaskIncrementTick+0x160>)
 8001296:	441a      	add	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3304      	adds	r3, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7fe ffe3 	bl	800026a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <xTaskIncrementTick+0x164>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d3b9      	bcc.n	8001226 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80012b6:	e7b6      	b.n	8001226 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <xTaskIncrementTick+0x164>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012be:	4915      	ldr	r1, [pc, #84]	; (8001314 <xTaskIncrementTick+0x160>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d901      	bls.n	80012d4 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <xTaskIncrementTick+0x168>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e004      	b.n	80012ec <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <xTaskIncrementTick+0x16c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <xTaskIncrementTick+0x16c>)
 80012ea:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80012ec:	697b      	ldr	r3, [r7, #20]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000138 	.word	0x20000138
 80012fc:	20000114 	.word	0x20000114
 8001300:	200000c8 	.word	0x200000c8
 8001304:	200000cc 	.word	0x200000cc
 8001308:	20000128 	.word	0x20000128
 800130c:	20000130 	.word	0x20000130
 8001310:	20000118 	.word	0x20000118
 8001314:	2000003c 	.word	0x2000003c
 8001318:	20000038 	.word	0x20000038
 800131c:	20000124 	.word	0x20000124
 8001320:	20000120 	.word	0x20000120

08001324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <vTaskSwitchContext+0xa0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <vTaskSwitchContext+0xa4>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001338:	e03e      	b.n	80013b8 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <vTaskSwitchContext+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <vTaskSwitchContext+0xa8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	f1c3 031f 	rsb	r3, r3, #31
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	491e      	ldr	r1, [pc, #120]	; (80013d0 <vTaskSwitchContext+0xac>)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	440b      	add	r3, r1
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <vTaskSwitchContext+0x5a>
        __asm volatile
 800136a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136e:	f383 8811 	msr	BASEPRI, r3
 8001372:	f3bf 8f6f 	isb	sy
 8001376:	f3bf 8f4f 	dsb	sy
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	e7fe      	b.n	800137c <vTaskSwitchContext+0x58>
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <vTaskSwitchContext+0xac>)
 800138a:	4413      	add	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	3308      	adds	r3, #8
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d104      	bne.n	80013ae <vTaskSwitchContext+0x8a>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <vTaskSwitchContext+0xb0>)
 80013b6:	6013      	str	r3, [r2, #0]
}
 80013b8:	bf00      	nop
 80013ba:	371c      	adds	r7, #28
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20000138 	.word	0x20000138
 80013c8:	20000124 	.word	0x20000124
 80013cc:	20000118 	.word	0x20000118
 80013d0:	2000003c 	.word	0x2000003c
 80013d4:	20000038 	.word	0x20000038

080013d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <vTaskPlaceOnEventList+0x24>
 80013e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	e7fe      	b.n	80013fa <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <vTaskPlaceOnEventList+0x44>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3318      	adds	r3, #24
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7fe ff54 	bl	80002b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800140a:	2101      	movs	r1, #1
 800140c:	6838      	ldr	r0, [r7, #0]
 800140e:	f000 fa5f 	bl	80018d0 <prvAddCurrentTaskToDelayedList>
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000038 	.word	0x20000038

08001420 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <vTaskPlaceOnEventListRestricted+0x26>
 8001432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001436:	f383 8811 	msr	BASEPRI, r3
 800143a:	f3bf 8f6f 	isb	sy
 800143e:	f3bf 8f4f 	dsb	sy
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e7fe      	b.n	8001444 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <vTaskPlaceOnEventListRestricted+0x50>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3318      	adds	r3, #24
 800144c:	4619      	mov	r1, r3
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f7fe ff0b 	bl	800026a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f000 fa34 	bl	80018d0 <prvAddCurrentTaskToDelayedList>
    }
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000038 	.word	0x20000038

08001474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <xTaskRemoveFromEventList+0x2a>
 800148a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148e:	f383 8811 	msr	BASEPRI, r3
 8001492:	f3bf 8f6f 	isb	sy
 8001496:	f3bf 8f4f 	dsb	sy
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e7fe      	b.n	800149c <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3318      	adds	r3, #24
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe ff3e 	bl	8000324 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <xTaskRemoveFromEventList+0xac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11c      	bne.n	80014ea <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	3304      	adds	r3, #4
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe ff35 	bl	8000324 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	2201      	movs	r2, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <xTaskRemoveFromEventList+0xb0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	4a16      	ldr	r2, [pc, #88]	; (8001524 <xTaskRemoveFromEventList+0xb0>)
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <xTaskRemoveFromEventList+0xb4>)
 80014da:	441a      	add	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	3304      	adds	r3, #4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f7fe fec1 	bl	800026a <vListInsertEnd>
 80014e8:	e005      	b.n	80014f6 <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	3318      	adds	r3, #24
 80014ee:	4619      	mov	r1, r3
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <xTaskRemoveFromEventList+0xb8>)
 80014f2:	f7fe feba 	bl	800026a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <xTaskRemoveFromEventList+0xbc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	429a      	cmp	r2, r3
 8001502:	d905      	bls.n	8001510 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <xTaskRemoveFromEventList+0xc0>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e001      	b.n	8001514 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001514:	697b      	ldr	r3, [r7, #20]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000138 	.word	0x20000138
 8001524:	20000118 	.word	0x20000118
 8001528:	2000003c 	.word	0x2000003c
 800152c:	200000d0 	.word	0x200000d0
 8001530:	20000038 	.word	0x20000038
 8001534:	20000124 	.word	0x20000124

08001538 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <vTaskInternalSetTimeOutState+0x24>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <vTaskInternalSetTimeOutState+0x28>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	20000128 	.word	0x20000128
 8001560:	20000114 	.word	0x20000114

08001564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <xTaskCheckForTimeOut+0x24>
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	e7fe      	b.n	8001586 <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <xTaskCheckForTimeOut+0x3e>
 800158e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001592:	f383 8811 	msr	BASEPRI, r3
 8001596:	f3bf 8f6f 	isb	sy
 800159a:	f3bf 8f4f 	dsb	sy
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e7fe      	b.n	80015a0 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80015a2:	f000 fe35 	bl	8002210 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <xTaskCheckForTimeOut+0xc0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015be:	d102      	bne.n	80015c6 <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	e026      	b.n	8001614 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <xTaskCheckForTimeOut+0xc4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d00a      	beq.n	80015e8 <xTaskCheckForTimeOut+0x84>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d305      	bcc.n	80015e8 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80015dc:	2301      	movs	r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e015      	b.n	8001614 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d20b      	bcs.n	800160a <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad2      	subs	r2, r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff9a 	bl	8001538 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	e004      	b.n	8001614 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001614:	f000 fe2a 	bl	800226c <vPortExitCritical>

    return xReturn;
 8001618:	69fb      	ldr	r3, [r7, #28]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000114 	.word	0x20000114
 8001628:	20000128 	.word	0x20000128

0800162c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <vTaskMissedYield+0x14>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000124 	.word	0x20000124

08001644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800164c:	f000 f852 	bl	80016f4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <prvIdleTask+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d9f9      	bls.n	800164c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <prvIdleTask+0x2c>)
 800165a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	f3bf 8f4f 	dsb	sy
 8001664:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001668:	e7f0      	b.n	800164c <prvIdleTask+0x8>
 800166a:	bf00      	nop
 800166c:	2000003c 	.word	0x2000003c
 8001670:	e000ed04 	.word	0xe000ed04

08001674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	e00c      	b.n	800169a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <prvInitialiseTaskLists+0x60>)
 800168c:	4413      	add	r3, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe fdbe 	bl	8000210 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3301      	adds	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d9ef      	bls.n	8001680 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <prvInitialiseTaskLists+0x64>)
 80016a2:	f7fe fdb5 	bl	8000210 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <prvInitialiseTaskLists+0x68>)
 80016a8:	f7fe fdb2 	bl	8000210 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80016ac:	480c      	ldr	r0, [pc, #48]	; (80016e0 <prvInitialiseTaskLists+0x6c>)
 80016ae:	f7fe fdaf 	bl	8000210 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80016b2:	480c      	ldr	r0, [pc, #48]	; (80016e4 <prvInitialiseTaskLists+0x70>)
 80016b4:	f7fe fdac 	bl	8000210 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80016b8:	480b      	ldr	r0, [pc, #44]	; (80016e8 <prvInitialiseTaskLists+0x74>)
 80016ba:	f7fe fda9 	bl	8000210 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <prvInitialiseTaskLists+0x78>)
 80016c0:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <prvInitialiseTaskLists+0x64>)
 80016c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <prvInitialiseTaskLists+0x7c>)
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <prvInitialiseTaskLists+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000003c 	.word	0x2000003c
 80016d8:	200000a0 	.word	0x200000a0
 80016dc:	200000b4 	.word	0x200000b4
 80016e0:	200000d0 	.word	0x200000d0
 80016e4:	200000e4 	.word	0x200000e4
 80016e8:	200000fc 	.word	0x200000fc
 80016ec:	200000c8 	.word	0x200000c8
 80016f0:	200000cc 	.word	0x200000cc

080016f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80016fa:	e019      	b.n	8001730 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80016fc:	f000 fd88 	bl	8002210 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <prvCheckTasksWaitingTermination+0x4c>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3304      	adds	r3, #4
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fe09 	bl	8000324 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <prvCheckTasksWaitingTermination+0x50>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <prvCheckTasksWaitingTermination+0x50>)
 800171a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <prvCheckTasksWaitingTermination+0x54>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <prvCheckTasksWaitingTermination+0x54>)
 8001724:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001726:	f000 fda1 	bl	800226c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f80e 	bl	800174c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <prvCheckTasksWaitingTermination+0x54>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1e1      	bne.n	80016fc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200000e4 	.word	0x200000e4
 8001744:	20000110 	.word	0x20000110
 8001748:	200000f8 	.word	0x200000f8

0800174c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	4618      	mov	r0, r3
 800175a:	f000 ff4f 	bl	80025fc <vPortFree>
                vPortFree( pxTCB );
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 ff4c 	bl	80025fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <prvResetNextTaskUnblockTime+0x30>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d104      	bne.n	8001784 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <prvResetNextTaskUnblockTime+0x34>)
 800177c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001780:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001782:	e005      	b.n	8001790 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <prvResetNextTaskUnblockTime+0x30>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <prvResetNextTaskUnblockTime+0x34>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	200000c8 	.word	0x200000c8
 80017a0:	20000130 	.word	0x20000130

080017a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <xTaskGetSchedulerState+0x34>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80017b2:	2301      	movs	r3, #1
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e008      	b.n	80017ca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <xTaskGetSchedulerState+0x38>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80017c0:	2302      	movs	r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	e001      	b.n	80017ca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80017ca:	687b      	ldr	r3, [r7, #4]
    }
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	2000011c 	.word	0x2000011c
 80017dc:	20000138 	.word	0x20000138

080017e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d061      	beq.n	80018ba <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80017f6:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <xTaskPriorityDisinherit+0xe4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d009      	beq.n	8001814 <xTaskPriorityDisinherit+0x34>
 8001800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001804:	f383 8811 	msr	BASEPRI, r3
 8001808:	f3bf 8f6f 	isb	sy
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	e7fe      	b.n	8001812 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <xTaskPriorityDisinherit+0x50>
 800181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	f3bf 8f6f 	isb	sy
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	e7fe      	b.n	800182e <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	1e5a      	subs	r2, r3, #1
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001842:	429a      	cmp	r2, r3
 8001844:	d039      	beq.n	80018ba <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	2b00      	cmp	r3, #0
 800184c:	d135      	bne.n	80018ba <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	3304      	adds	r3, #4
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd66 	bl	8000324 <uxListRemove>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	2201      	movs	r2, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43da      	mvns	r2, r3
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <xTaskPriorityDisinherit+0xe8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4013      	ands	r3, r2
 8001870:	4a15      	ldr	r2, [pc, #84]	; (80018c8 <xTaskPriorityDisinherit+0xe8>)
 8001872:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f1c3 0205 	rsb	r2, r3, #5
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2201      	movs	r2, #1
 800188e:	409a      	lsls	r2, r3
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <xTaskPriorityDisinherit+0xe8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4313      	orrs	r3, r2
 8001896:	4a0c      	ldr	r2, [pc, #48]	; (80018c8 <xTaskPriorityDisinherit+0xe8>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <xTaskPriorityDisinherit+0xec>)
 80018a8:	441a      	add	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	3304      	adds	r3, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f7fe fcda 	bl	800026a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80018ba:	697b      	ldr	r3, [r7, #20]
    }
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000038 	.word	0x20000038
 80018c8:	20000118 	.word	0x20000118
 80018cc:	2000003c 	.word	0x2000003c

080018d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <prvAddCurrentTaskToDelayedList+0xb0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <prvAddCurrentTaskToDelayedList+0xb4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3304      	adds	r3, #4
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd1c 	bl	8000324 <uxListRemove>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10b      	bne.n	800190a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <prvAddCurrentTaskToDelayedList+0xb4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2201      	movs	r2, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4013      	ands	r3, r2
 8001906:	4a20      	ldr	r2, [pc, #128]	; (8001988 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001908:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001910:	d10a      	bne.n	8001928 <prvAddCurrentTaskToDelayedList+0x58>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d007      	beq.n	8001928 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3304      	adds	r3, #4
 800191e:	4619      	mov	r1, r3
 8001920:	481a      	ldr	r0, [pc, #104]	; (800198c <prvAddCurrentTaskToDelayedList+0xbc>)
 8001922:	f7fe fca2 	bl	800026a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001926:	e026      	b.n	8001976 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d209      	bcs.n	8001954 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001940:	4b13      	ldr	r3, [pc, #76]	; (8001990 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3304      	adds	r3, #4
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7fe fcb0 	bl	80002b2 <vListInsert>
}
 8001952:	e010      	b.n	8001976 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <prvAddCurrentTaskToDelayedList+0xb4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f7fe fca6 	bl	80002b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d202      	bcs.n	8001976 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8001970:	4a09      	ldr	r2, [pc, #36]	; (8001998 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	6013      	str	r3, [r2, #0]
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000114 	.word	0x20000114
 8001984:	20000038 	.word	0x20000038
 8001988:	20000118 	.word	0x20000118
 800198c:	200000fc 	.word	0x200000fc
 8001990:	200000cc 	.word	0x200000cc
 8001994:	200000c8 	.word	0x200000c8
 8001998:	20000130 	.word	0x20000130

0800199c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80019a6:	f000 fad1 	bl	8001f4c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <xTimerCreateTimerTask+0x54>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <xTimerCreateTimerTask+0x58>)
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019c0:	490d      	ldr	r1, [pc, #52]	; (80019f8 <xTimerCreateTimerTask+0x5c>)
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <xTimerCreateTimerTask+0x60>)
 80019c4:	f7ff f9a8 	bl	8000d18 <xTaskCreate>
 80019c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <xTimerCreateTimerTask+0x48>
 80019d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f3bf 8f4f 	dsb	sy
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	e7fe      	b.n	80019e2 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80019e4:	687b      	ldr	r3, [r7, #4]
    }
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000016c 	.word	0x2000016c
 80019f4:	20000170 	.word	0x20000170
 80019f8:	08002c8c 	.word	0x08002c8c
 80019fc:	08001b31 	.word	0x08001b31

08001a00 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <xTimerGenericCommand+0x2c>
 8001a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1c:	f383 8811 	msr	BASEPRI, r3
 8001a20:	f3bf 8f6f 	isb	sy
 8001a24:	f3bf 8f4f 	dsb	sy
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	e7fe      	b.n	8001a2a <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <xTimerGenericCommand+0x94>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02a      	beq.n	8001a8a <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	dc18      	bgt.n	8001a78 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001a46:	f7ff fead 	bl	80017a4 <xTaskGetSchedulerState>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d109      	bne.n	8001a64 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <xTimerGenericCommand+0x94>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	f107 0114 	add.w	r1, r7, #20
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5c:	f7fe fd74 	bl	8000548 <xQueueGenericSend>
 8001a60:	6278      	str	r0, [r7, #36]	; 0x24
 8001a62:	e012      	b.n	8001a8a <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <xTimerGenericCommand+0x94>)
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	f107 0114 	add.w	r1, r7, #20
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f7fe fd6a 	bl	8000548 <xQueueGenericSend>
 8001a74:	6278      	str	r0, [r7, #36]	; 0x24
 8001a76:	e008      	b.n	8001a8a <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <xTimerGenericCommand+0x94>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 0114 	add.w	r1, r7, #20
 8001a80:	2300      	movs	r3, #0
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	f7fe fe5a 	bl	800073c <xQueueGenericSendFromISR>
 8001a88:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000016c 	.word	0x2000016c

08001a98 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <prvProcessExpiredTimer+0x94>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3304      	adds	r3, #4
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fc37 	bl	8000324 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d021      	beq.n	8001b08 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	18d1      	adds	r1, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f000 f8d1 	bl	8001c78 <prvInsertTimerInActiveList>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01e      	beq.n	8001b1a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001adc:	2300      	movs	r3, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff8a 	bl	8001a00 <xTimerGenericCommand>
 8001aec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d112      	bne.n	8001b1a <prvProcessExpiredTimer+0x82>
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e7fe      	b.n	8001b06 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	4798      	blx	r3
    }
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000164 	.word	0x20000164

08001b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f857 	bl	8001bf0 <prvGetNextExpireTime>
 8001b42:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4619      	mov	r1, r3
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f803 	bl	8001b54 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001b4e:	f000 f8d5 	bl	8001cfc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b52:	e7f1      	b.n	8001b38 <prvTimerTask+0x8>

08001b54 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001b5e:	f7ff fa6f 	bl	8001040 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f866 	bl	8001c38 <prvSampleTimeNow>
 8001b6c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d130      	bne.n	8001bd6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10a      	bne.n	8001b90 <prvProcessTimerOrBlockTask+0x3c>
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d806      	bhi.n	8001b90 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001b82:	f7ff fa6b 	bl	800105c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff85 	bl	8001a98 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001b8e:	e024      	b.n	8001bda <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d008      	beq.n	8001ba8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <prvProcessTimerOrBlockTask+0x90>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <prvProcessTimerOrBlockTask+0x50>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <prvProcessTimerOrBlockTask+0x52>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <prvProcessTimerOrBlockTask+0x94>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f87b 	bl	8000cb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001bba:	f7ff fa4f 	bl	800105c <xTaskResumeAll>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <prvProcessTimerOrBlockTask+0x98>)
 8001bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	f3bf 8f6f 	isb	sy
    }
 8001bd4:	e001      	b.n	8001bda <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001bd6:	f7ff fa41 	bl	800105c <xTaskResumeAll>
    }
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000168 	.word	0x20000168
 8001be8:	2000016c 	.word	0x2000016c
 8001bec:	e000ed04 	.word	0xe000ed04

08001bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <prvGetNextExpireTime+0x44>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <prvGetNextExpireTime+0x16>
 8001c02:	2201      	movs	r2, #1
 8001c04:	e000      	b.n	8001c08 <prvGetNextExpireTime+0x18>
 8001c06:	2200      	movs	r2, #0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <prvGetNextExpireTime+0x44>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e001      	b.n	8001c24 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001c24:	68fb      	ldr	r3, [r7, #12]
    }
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000164 	.word	0x20000164

08001c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001c40:	f7ff faa8 	bl	8001194 <xTaskGetTickCount>
 8001c44:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <prvSampleTimeNow+0x3c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d205      	bcs.n	8001c5c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001c50:	f000 f918 	bl	8001e84 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e002      	b.n	8001c62 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <prvSampleTimeNow+0x3c>)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001c68:	68fb      	ldr	r3, [r7, #12]
    }
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000174 	.word	0x20000174

08001c78 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d812      	bhi.n	8001cc4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	1ad2      	subs	r2, r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d302      	bcc.n	8001cb2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001cac:	2301      	movs	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e01b      	b.n	8001cea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <prvInsertTimerInActiveList+0x7c>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	f7fe faf8 	bl	80002b2 <vListInsert>
 8001cc2:	e012      	b.n	8001cea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d206      	bcs.n	8001cda <prvInsertTimerInActiveList+0x62>
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d302      	bcc.n	8001cda <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e007      	b.n	8001cea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <prvInsertTimerInActiveList+0x80>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f7fe fae4 	bl	80002b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001cea:	697b      	ldr	r3, [r7, #20]
    }
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000168 	.word	0x20000168
 8001cf8:	20000164 	.word	0x20000164

08001cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001d02:	e0ac      	b.n	8001e5e <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f2c0 80a8 	blt.w	8001e5c <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fb01 	bl	8000324 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff87 	bl	8001c38 <prvSampleTimeNow>
 8001d2a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	f200 8095 	bhi.w	8001e5e <prvProcessReceivedCommands+0x162>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <prvProcessReceivedCommands+0x40>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d65 	.word	0x08001d65
 8001d40:	08001d65 	.word	0x08001d65
 8001d44:	08001d65 	.word	0x08001d65
 8001d48:	08001dd7 	.word	0x08001dd7
 8001d4c:	08001deb 	.word	0x08001deb
 8001d50:	08001e33 	.word	0x08001e33
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d65 	.word	0x08001d65
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001deb 	.word	0x08001deb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	18d1      	adds	r1, r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a3a      	ldr	r2, [r7, #32]
 8001d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d84:	f7ff ff78 	bl	8001c78 <prvInsertTimerInActiveList>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d067      	beq.n	8001e5e <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d94:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d05c      	beq.n	8001e5e <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	441a      	add	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2300      	movs	r3, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001db6:	f7ff fe23 	bl	8001a00 <xTimerGenericCommand>
 8001dba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d14d      	bne.n	8001e5e <prvProcessReceivedCommands+0x162>
 8001dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	e7fe      	b.n	8001dd4 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001de8:	e039      	b.n	8001e5e <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <prvProcessReceivedCommands+0x122>
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e7fe      	b.n	8001e1c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	18d1      	adds	r1, r2, r3
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e2c:	f7ff ff24 	bl	8001c78 <prvInsertTimerInActiveList>
                        break;
 8001e30:	e015      	b.n	8001e5e <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8001e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e42:	f000 fbdb 	bl	80025fc <vPortFree>
 8001e46:	e00a      	b.n	8001e5e <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001e5a:	e000      	b.n	8001e5e <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001e5c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <prvProcessReceivedCommands+0x184>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f107 0108 	add.w	r1, r7, #8
 8001e66:	2200      	movs	r2, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fd0d 	bl	8000888 <xQueueReceive>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f47f af47 	bne.w	8001d04 <prvProcessReceivedCommands+0x8>
        }
    }
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000016c 	.word	0x2000016c

08001e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001e8a:	e047      	b.n	8001f1c <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <prvSwitchTimerLists+0xc0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <prvSwitchTimerLists+0xc0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fa3d 	bl	8000324 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d02d      	beq.n	8001f1c <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d90e      	bls.n	8001ef0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <prvSwitchTimerLists+0xc0>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7fe f9e2 	bl	80002b2 <vListInsert>
 8001eee:	e015      	b.n	8001f1c <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	2100      	movs	r1, #0
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff fd80 	bl	8001a00 <xTimerGenericCommand>
 8001f00:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <prvSwitchTimerLists+0x98>
 8001f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	e7fe      	b.n	8001f1a <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <prvSwitchTimerLists+0xc0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1b2      	bne.n	8001e8c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <prvSwitchTimerLists+0xc0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <prvSwitchTimerLists+0xc4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <prvSwitchTimerLists+0xc0>)
 8001f32:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <prvSwitchTimerLists+0xc4>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	6013      	str	r3, [r2, #0]
    }
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000164 	.word	0x20000164
 8001f48:	20000168 	.word	0x20000168

08001f4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001f50:	f000 f95e 	bl	8002210 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <prvCheckForValidListAndQueue+0x54>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d11d      	bne.n	8001f98 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001f5c:	4811      	ldr	r0, [pc, #68]	; (8001fa4 <prvCheckForValidListAndQueue+0x58>)
 8001f5e:	f7fe f957 	bl	8000210 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <prvCheckForValidListAndQueue+0x5c>)
 8001f64:	f7fe f954 	bl	8000210 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <prvCheckForValidListAndQueue+0x60>)
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <prvCheckForValidListAndQueue+0x58>)
 8001f6c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <prvCheckForValidListAndQueue+0x64>)
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <prvCheckForValidListAndQueue+0x5c>)
 8001f72:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001f74:	2200      	movs	r2, #0
 8001f76:	210c      	movs	r1, #12
 8001f78:	200a      	movs	r0, #10
 8001f7a:	f7fe fa65 	bl	8000448 <xQueueGenericCreate>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <prvCheckForValidListAndQueue+0x54>)
 8001f82:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <prvCheckForValidListAndQueue+0x54>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <prvCheckForValidListAndQueue+0x54>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4908      	ldr	r1, [pc, #32]	; (8001fb4 <prvCheckForValidListAndQueue+0x68>)
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fe64 	bl	8000c60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001f98:	f000 f968 	bl	800226c <vPortExitCritical>
    }
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000016c 	.word	0x2000016c
 8001fa4:	2000013c 	.word	0x2000013c
 8001fa8:	20000150 	.word	0x20000150
 8001fac:	20000164 	.word	0x20000164
 8001fb0:	20000168 	.word	0x20000168
 8001fb4:	08002c94 	.word	0x08002c94

08001fb8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3b04      	subs	r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3b04      	subs	r3, #4
 8001fd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f023 0201 	bic.w	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b04      	subs	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001fe8:	4a0c      	ldr	r2, [pc, #48]	; (800201c <pxPortInitialiseStack+0x64>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3b14      	subs	r3, #20
 8001ff2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3b04      	subs	r3, #4
 8001ffe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f06f 0202 	mvn.w	r2, #2
 8002006:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3b20      	subs	r3, #32
 800200c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	08002021 	.word	0x08002021

08002020 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <prvTaskExitError+0x50>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002032:	d009      	beq.n	8002048 <prvTaskExitError+0x28>
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e7fe      	b.n	8002046 <prvTaskExitError+0x26>
 8002048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800205a:	bf00      	nop
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0fc      	beq.n	800205c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000004 	.word	0x20000004
	...

08002080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <pxCurrentTCBConst2>)
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	6808      	ldr	r0, [r1, #0]
 8002086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208a:	f380 8809 	msr	PSP, r0
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f380 8811 	msr	BASEPRI, r0
 800209a:	4770      	bx	lr
 800209c:	f3af 8000 	nop.w

080020a0 <pxCurrentTCBConst2>:
 80020a0:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop

080020a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80020a8:	4808      	ldr	r0, [pc, #32]	; (80020cc <prvPortStartFirstTask+0x24>)
 80020aa:	6800      	ldr	r0, [r0, #0]
 80020ac:	6800      	ldr	r0, [r0, #0]
 80020ae:	f380 8808 	msr	MSP, r0
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f380 8814 	msr	CONTROL, r0
 80020ba:	b662      	cpsie	i
 80020bc:	b661      	cpsie	f
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	f3bf 8f6f 	isb	sy
 80020c6:	df00      	svc	0
 80020c8:	bf00      	nop
 80020ca:	0000      	.short	0x0000
 80020cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80020d0:	bf00      	nop
 80020d2:	bf00      	nop

080020d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80020da:	4b44      	ldr	r3, [pc, #272]	; (80021ec <xPortStartScheduler+0x118>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a44      	ldr	r2, [pc, #272]	; (80021f0 <xPortStartScheduler+0x11c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d109      	bne.n	80020f8 <xPortStartScheduler+0x24>
 80020e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e8:	f383 8811 	msr	BASEPRI, r3
 80020ec:	f3bf 8f6f 	isb	sy
 80020f0:	f3bf 8f4f 	dsb	sy
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	e7fe      	b.n	80020f6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80020f8:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <xPortStartScheduler+0x118>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a3d      	ldr	r2, [pc, #244]	; (80021f4 <xPortStartScheduler+0x120>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d109      	bne.n	8002116 <xPortStartScheduler+0x42>
 8002102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e7fe      	b.n	8002114 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <xPortStartScheduler+0x124>)
 8002118:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <xPortStartScheduler+0x128>)
 800213c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <xPortStartScheduler+0x12c>)
 8002140:	2207      	movs	r2, #7
 8002142:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002144:	e009      	b.n	800215a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <xPortStartScheduler+0x12c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	3b01      	subs	r3, #1
 800214c:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <xPortStartScheduler+0x12c>)
 800214e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b80      	cmp	r3, #128	; 0x80
 8002164:	d0ef      	beq.n	8002146 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <xPortStartScheduler+0x12c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	d009      	beq.n	8002186 <xPortStartScheduler+0xb2>
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	e7fe      	b.n	8002184 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002186:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <xPortStartScheduler+0x12c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <xPortStartScheduler+0x12c>)
 800218e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <xPortStartScheduler+0x12c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <xPortStartScheduler+0x12c>)
 800219a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <xPortStartScheduler+0x130>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <xPortStartScheduler+0x130>)
 80021aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <xPortStartScheduler+0x130>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a13      	ldr	r2, [pc, #76]	; (8002204 <xPortStartScheduler+0x130>)
 80021b6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80021ba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80021bc:	f000 f8d4 	bl	8002368 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <xPortStartScheduler+0x134>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80021c6:	f000 f8f3 	bl	80023b0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <xPortStartScheduler+0x138>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <xPortStartScheduler+0x138>)
 80021d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80021d4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80021d6:	f7ff ff67 	bl	80020a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80021da:	f7ff f8a3 	bl	8001324 <vTaskSwitchContext>
    prvTaskExitError();
 80021de:	f7ff ff1f 	bl	8002020 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	410fc271 	.word	0x410fc271
 80021f4:	410fc270 	.word	0x410fc270
 80021f8:	e000e400 	.word	0xe000e400
 80021fc:	20000178 	.word	0x20000178
 8002200:	2000017c 	.word	0x2000017c
 8002204:	e000ed20 	.word	0xe000ed20
 8002208:	20000004 	.word	0x20000004
 800220c:	e000ef34 	.word	0xe000ef34

08002210 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <vPortEnterCritical+0x54>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <vPortEnterCritical+0x54>)
 8002230:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <vPortEnterCritical+0x54>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d10e      	bne.n	8002258 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <vPortEnterCritical+0x58>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <vPortEnterCritical+0x48>
 8002244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002248:	f383 8811 	msr	BASEPRI, r3
 800224c:	f3bf 8f6f 	isb	sy
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	e7fe      	b.n	8002256 <vPortEnterCritical+0x46>
    }
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	20000004 	.word	0x20000004
 8002268:	e000ed04 	.word	0xe000ed04

0800226c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <vPortExitCritical+0x4c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d109      	bne.n	800228e <vPortExitCritical+0x22>
 800227a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	e7fe      	b.n	800228c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <vPortExitCritical+0x4c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3b01      	subs	r3, #1
 8002294:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <vPortExitCritical+0x4c>)
 8002296:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <vPortExitCritical+0x4c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <vPortExitCritical+0x3e>
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000004 	.word	0x20000004
 80022bc:	00000000 	.word	0x00000000

080022c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80022c0:	f3ef 8009 	mrs	r0, PSP
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <pxCurrentTCBConst>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	f01e 0f10 	tst.w	lr, #16
 80022d0:	bf08      	it	eq
 80022d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80022d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022da:	6010      	str	r0, [r2, #0]
 80022dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80022e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80022e4:	f380 8811 	msr	BASEPRI, r0
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	f3bf 8f6f 	isb	sy
 80022f0:	f7ff f818 	bl	8001324 <vTaskSwitchContext>
 80022f4:	f04f 0000 	mov.w	r0, #0
 80022f8:	f380 8811 	msr	BASEPRI, r0
 80022fc:	bc09      	pop	{r0, r3}
 80022fe:	6819      	ldr	r1, [r3, #0]
 8002300:	6808      	ldr	r0, [r1, #0]
 8002302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002306:	f01e 0f10 	tst.w	lr, #16
 800230a:	bf08      	it	eq
 800230c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002310:	f380 8809 	msr	PSP, r0
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	f3af 8000 	nop.w

08002320 <pxCurrentTCBConst>:
 8002320:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop

08002328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
        __asm volatile
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002340:	f7fe ff38 	bl	80011b4 <xTaskIncrementTick>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <SysTick_Handler+0x3c>)
 800234c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800235c:	bf00      	nop
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000ed04 	.word	0xe000ed04

08002368 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <vPortSetupTimerInterrupt+0x34>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <vPortSetupTimerInterrupt+0x38>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <vPortSetupTimerInterrupt+0x3c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <vPortSetupTimerInterrupt+0x40>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <vPortSetupTimerInterrupt+0x44>)
 8002386:	3b01      	subs	r3, #1
 8002388:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <vPortSetupTimerInterrupt+0x34>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010
 80023a0:	e000e018 	.word	0xe000e018
 80023a4:	20000008 	.word	0x20000008
 80023a8:	10624dd3 	.word	0x10624dd3
 80023ac:	e000e014 	.word	0xe000e014

080023b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80023b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80023c0 <vPortEnableVFP+0x10>
 80023b4:	6801      	ldr	r1, [r0, #0]
 80023b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80023ba:	6001      	str	r1, [r0, #0]
 80023bc:	4770      	bx	lr
 80023be:	0000      	.short	0x0000
 80023c0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop

080023c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80023ce:	f3ef 8305 	mrs	r3, IPSR
 80023d2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	d913      	bls.n	8002402 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80023da:	4a16      	ldr	r2, [pc, #88]	; (8002434 <vPortValidateInterruptPriority+0x6c>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <vPortValidateInterruptPriority+0x70>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	7afa      	ldrb	r2, [r7, #11]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d209      	bcs.n	8002402 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	e7fe      	b.n	8002400 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <vPortValidateInterruptPriority+0x74>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <vPortValidateInterruptPriority+0x78>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d909      	bls.n	8002426 <vPortValidateInterruptPriority+0x5e>
 8002412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	e7fe      	b.n	8002424 <vPortValidateInterruptPriority+0x5c>
    }
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000e3f0 	.word	0xe000e3f0
 8002438:	20000178 	.word	0x20000178
 800243c:	e000ed0c 	.word	0xe000ed0c
 8002440:	2000017c 	.word	0x2000017c

08002444 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002450:	f7fe fdf6 	bl	8001040 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002454:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <pvPortMalloc+0x1a0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800245c:	f000 f92e 	bl	80026bc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002460:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <pvPortMalloc+0x1a4>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 80a5 	bne.w	80025b8 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02c      	beq.n	80024ce <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002474:	2208      	movs	r2, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	d226      	bcs.n	80024ce <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002480:	2208      	movs	r2, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f023 0307 	bic.w	r3, r3, #7
 8002498:	3308      	adds	r3, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d213      	bcs.n	80024c8 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f023 0307 	bic.w	r3, r3, #7
 80024a6:	3308      	adds	r3, #8
 80024a8:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00f      	beq.n	80024d4 <pvPortMalloc+0x90>
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e7fe      	b.n	80024c6 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024cc:	e002      	b.n	80024d4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	e000      	b.n	80024d6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024d4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d06d      	beq.n	80025b8 <pvPortMalloc+0x174>
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <pvPortMalloc+0x1a8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d868      	bhi.n	80025b8 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80024e6:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <pvPortMalloc+0x1ac>)
 80024e8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <pvPortMalloc+0x1ac>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024f0:	e004      	b.n	80024fc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d903      	bls.n	800250e <pvPortMalloc+0xca>
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f1      	bne.n	80024f2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <pvPortMalloc+0x1a0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	429a      	cmp	r2, r3
 8002516:	d04f      	beq.n	80025b8 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2208      	movs	r2, #8
 800251e:	4413      	add	r3, r2
 8002520:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1ad2      	subs	r2, r2, r3
 8002532:	2308      	movs	r3, #8
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	429a      	cmp	r2, r3
 8002538:	d91e      	bls.n	8002578 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <pvPortMalloc+0x11c>
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e7fe      	b.n	800255e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	f000 f904 	bl	8002780 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <pvPortMalloc+0x1a8>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <pvPortMalloc+0x1a8>)
 8002584:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <pvPortMalloc+0x1a8>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <pvPortMalloc+0x1b0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d203      	bcs.n	800259a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <pvPortMalloc+0x1a8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <pvPortMalloc+0x1b0>)
 8002598:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <pvPortMalloc+0x1a4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <pvPortMalloc+0x1b4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <pvPortMalloc+0x1b4>)
 80025b6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80025b8:	f7fe fd50 	bl	800105c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <pvPortMalloc+0x196>
 80025c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e7fe      	b.n	80025d8 <pvPortMalloc+0x194>
    return pvReturn;
 80025da:	69fb      	ldr	r3, [r7, #28]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3728      	adds	r7, #40	; 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20012d88 	.word	0x20012d88
 80025e8:	20012d9c 	.word	0x20012d9c
 80025ec:	20012d8c 	.word	0x20012d8c
 80025f0:	20012d80 	.word	0x20012d80
 80025f4:	20012d90 	.word	0x20012d90
 80025f8:	20012d94 	.word	0x20012d94

080025fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04b      	beq.n	80026a6 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800260e:	2308      	movs	r3, #8
 8002610:	425b      	negs	r3, r3
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4413      	add	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <vPortFree+0xb4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <vPortFree+0x42>
 800262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e7fe      	b.n	800263c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <vPortFree+0x5e>
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	e7fe      	b.n	8002658 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <vPortFree+0xb4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01e      	beq.n	80026a6 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11a      	bne.n	80026a6 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <vPortFree+0xb4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	43db      	mvns	r3, r3
 800267a:	401a      	ands	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002680:	f7fe fcde 	bl	8001040 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <vPortFree+0xb8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <vPortFree+0xb8>)
 8002690:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002692:	6938      	ldr	r0, [r7, #16]
 8002694:	f000 f874 	bl	8002780 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <vPortFree+0xbc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	4a06      	ldr	r2, [pc, #24]	; (80026b8 <vPortFree+0xbc>)
 80026a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80026a2:	f7fe fcdb 	bl	800105c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80026a6:	bf00      	nop
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20012d9c 	.word	0x20012d9c
 80026b4:	20012d8c 	.word	0x20012d8c
 80026b8:	20012d98 	.word	0x20012d98

080026bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026c2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80026c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <prvHeapInit+0xac>)
 80026ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3307      	adds	r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0307 	bic.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <prvHeapInit+0xac>)
 80026ec:	4413      	add	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <prvHeapInit+0xb0>)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80026fa:	4b1c      	ldr	r3, [pc, #112]	; (800276c <prvHeapInit+0xb0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4413      	add	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002708:	2208      	movs	r2, #8
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a15      	ldr	r2, [pc, #84]	; (8002770 <prvHeapInit+0xb4>)
 800271c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <prvHeapInit+0xb4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <prvHeapInit+0xb4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <prvHeapInit+0xb4>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <prvHeapInit+0xb8>)
 800274a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <prvHeapInit+0xbc>)
 8002752:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <prvHeapInit+0xc0>)
 8002756:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	20000180 	.word	0x20000180
 800276c:	20012d80 	.word	0x20012d80
 8002770:	20012d88 	.word	0x20012d88
 8002774:	20012d90 	.word	0x20012d90
 8002778:	20012d8c 	.word	0x20012d8c
 800277c:	20012d9c 	.word	0x20012d9c

08002780 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <prvInsertBlockIntoFreeList+0xac>)
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e002      	b.n	8002794 <prvInsertBlockIntoFreeList+0x14>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d8f7      	bhi.n	800278e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4413      	add	r3, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d108      	bne.n	80027c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	441a      	add	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d118      	bne.n	8002808 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <prvInsertBlockIntoFreeList+0xb0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d00d      	beq.n	80027fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	441a      	add	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e008      	b.n	8002810 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <prvInsertBlockIntoFreeList+0xb0>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	e003      	b.n	8002810 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d002      	beq.n	800281e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800281e:	bf00      	nop
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20012d80 	.word	0x20012d80
 8002830:	20012d88 	.word	0x20012d88

08002834 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <RCC_DeInit+0x60>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <RCC_DeInit+0x60>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <RCC_DeInit+0x60>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <RCC_DeInit+0x60>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a11      	ldr	r2, [pc, #68]	; (8002894 <RCC_DeInit+0x60>)
 8002850:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002854:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002858:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <RCC_DeInit+0x60>)
 800285c:	4a0e      	ldr	r2, [pc, #56]	; (8002898 <RCC_DeInit+0x64>)
 800285e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <RCC_DeInit+0x60>)
 8002862:	4a0e      	ldr	r2, [pc, #56]	; (800289c <RCC_DeInit+0x68>)
 8002864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <RCC_DeInit+0x60>)
 800286a:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <RCC_DeInit+0x6c>)
 800286c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <RCC_DeInit+0x60>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <RCC_DeInit+0x60>)
 8002876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <RCC_DeInit+0x60>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <RCC_DeInit+0x60>)
 8002884:	2200      	movs	r2, #0
 8002886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800288a:	bf00      	nop
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40023800 	.word	0x40023800
 8002898:	24003010 	.word	0x24003010
 800289c:	20003000 	.word	0x20003000
 80028a0:	24003000 	.word	0x24003000

080028a4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <RCC_SYSCLKConfig+0x34>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <RCC_SYSCLKConfig+0x34>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6093      	str	r3, [r2, #8]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40023800 	.word	0x40023800

080028dc <main>:

void vTask1_Handler(void* params);
void vTask2_Handler(void* params);

int main(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af02      	add	r7, sp, #8
	//By default the system clk is running at max speed which 168Mhz
	//this is done by setsysclk function
	//if it is not required then deinit the clk config and set it to desired value using functions provided in stm32f4xx_rcc.c
	RCC_DeInit();
 80028e2:	f7ff ffa7 	bl	8002834 <RCC_DeInit>
	//set HSE as default clk
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7ff ffdc 	bl	80028a4 <RCC_SYSCLKConfig>
	//call the systemcoreclk update function the SystemCoreClock variable to newly set clk frequency
	SystemCoreClockUpdate();
 80028ec:	f000 f864 	bl	80029b8 <SystemCoreClockUpdate>

	//create 1st task
	xTaskCreate(vTask1_Handler, "Led_1", configMINIMAL_STACK_SIZE, NULL, TASK1_PRIORITY, &xTask1_Handle);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <main+0x44>)
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2302      	movs	r3, #2
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	2282      	movs	r2, #130	; 0x82
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <main+0x48>)
 80028fe:	480a      	ldr	r0, [pc, #40]	; (8002928 <main+0x4c>)
 8002900:	f7fe fa0a 	bl	8000d18 <xTaskCreate>
	xTaskCreate(vTask2_Handler, "Led_2", configMINIMAL_STACK_SIZE, NULL, TASK2_PRIORITY, &xTask2_Handle);
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <main+0x50>)
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2302      	movs	r3, #2
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	2282      	movs	r2, #130	; 0x82
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <main+0x54>)
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <main+0x58>)
 8002914:	f7fe fa00 	bl	8000d18 <xTaskCreate>

	//start the FreeRtos Task Scheduler
	vTaskStartScheduler();
 8002918:	f7fe fb42 	bl	8000fa0 <vTaskStartScheduler>


	for(;;);
 800291c:	e7fe      	b.n	800291c <main+0x40>
 800291e:	bf00      	nop
 8002920:	20012da0 	.word	0x20012da0
 8002924:	08002c9c 	.word	0x08002c9c
 8002928:	08002939 	.word	0x08002939
 800292c:	20012da4 	.word	0x20012da4
 8002930:	08002ca4 	.word	0x08002ca4
 8002934:	08002943 	.word	0x08002943

08002938 <vTask1_Handler>:
}

void vTask1_Handler(void* params)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){};
 8002940:	e7fe      	b.n	8002940 <vTask1_Handler+0x8>

08002942 <vTask2_Handler>:
	//if it returns anyhow or task work is complete it is not repeating then delete the task
	vTaskDelete(NULL); //NULL means the task itself or can call the vtask1_handler
}
void vTask2_Handler(void* params)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	//task must never return
	while(1){};
 800294a:	e7fe      	b.n	800294a <vTask2_Handler+0x8>

0800294c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <SystemInit+0x60>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	4a15      	ldr	r2, [pc, #84]	; (80029ac <SystemInit+0x60>)
 8002958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800295c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <SystemInit+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <SystemInit+0x64>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800296c:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <SystemInit+0x64>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <SystemInit+0x64>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <SystemInit+0x64>)
 8002978:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800297c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <SystemInit+0x64>)
 8002984:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <SystemInit+0x68>)
 8002986:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <SystemInit+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <SystemInit+0x64>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <SystemInit+0x64>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800299a:	f000 f889 	bl	8002ab0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800299e:	4b03      	ldr	r3, [pc, #12]	; (80029ac <SystemInit+0x60>)
 80029a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029a4:	609a      	str	r2, [r3, #8]
#endif
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000ed00 	.word	0xe000ed00
 80029b0:	40023800 	.word	0x40023800
 80029b4:	24003010 	.word	0x24003010

080029b8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	2302      	movs	r3, #2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	2302      	movs	r3, #2
 80029d0:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80029d2:	4b32      	ldr	r3, [pc, #200]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d007      	beq.n	80029f2 <SystemCoreClockUpdate+0x3a>
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d009      	beq.n	80029fa <SystemCoreClockUpdate+0x42>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d13d      	bne.n	8002a66 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80029ea:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <SystemCoreClockUpdate+0xe8>)
 80029ec:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <SystemCoreClockUpdate+0xec>)
 80029ee:	601a      	str	r2, [r3, #0]
      break;
 80029f0:	e03d      	b.n	8002a6e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <SystemCoreClockUpdate+0xe8>)
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <SystemCoreClockUpdate+0xf0>)
 80029f6:	601a      	str	r2, [r3, #0]
      break;
 80029f8:	e039      	b.n	8002a6e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	0d9b      	lsrs	r3, r3, #22
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0e:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <SystemCoreClockUpdate+0xf0>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 8002a20:	6852      	ldr	r2, [r2, #4]
 8002a22:	0992      	lsrs	r2, r2, #6
 8002a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e00b      	b.n	8002a48 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a30:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <SystemCoreClockUpdate+0xec>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 8002a3a:	6852      	ldr	r2, [r2, #4]
 8002a3c:	0992      	lsrs	r2, r2, #6
 8002a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <SystemCoreClockUpdate+0xe8>)
 8002a62:	6013      	str	r3, [r2, #0]
      break;
 8002a64:	e003      	b.n	8002a6e <SystemCoreClockUpdate+0xb6>
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
      SystemCoreClock = pllvco/pllr;      
      break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <SystemCoreClockUpdate+0xe8>)
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <SystemCoreClockUpdate+0xec>)
 8002a6a:	601a      	str	r2, [r3, #0]
      break;
 8002a6c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <SystemCoreClockUpdate+0xe4>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <SystemCoreClockUpdate+0xf4>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <SystemCoreClockUpdate+0xe8>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <SystemCoreClockUpdate+0xe8>)
 8002a8c:	6013      	str	r3, [r2, #0]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	20000008 	.word	0x20000008
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	017d7840 	.word	0x017d7840
 8002aac:	2000000c 	.word	0x2000000c

08002ab0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	2300      	movs	r3, #0
 8002abc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002abe:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <SetSysClock+0xe8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a35      	ldr	r2, [pc, #212]	; (8002b98 <SetSysClock+0xe8>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002aca:	4b33      	ldr	r3, [pc, #204]	; (8002b98 <SetSysClock+0xe8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <SetSysClock+0x38>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ae6:	d1f0      	bne.n	8002aca <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <SetSysClock+0xe8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002af4:	2301      	movs	r3, #1
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	e001      	b.n	8002afe <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d142      	bne.n	8002b8a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <SetSysClock+0xe8>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <SetSysClock+0xe8>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <SetSysClock+0xec>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <SetSysClock+0xec>)
 8002b16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b1a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <SetSysClock+0xe8>)
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	; (8002b98 <SetSysClock+0xe8>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <SetSysClock+0xe8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <SetSysClock+0xe8>)
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <SetSysClock+0xe8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <SetSysClock+0xe8>)
 8002b36:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002b3a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx || STM32F413_423xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <SetSysClock+0xe8>)
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <SetSysClock+0xf0>)
 8002b40:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002b42:	4b15      	ldr	r3, [pc, #84]	; (8002b98 <SetSysClock+0xe8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <SetSysClock+0xe8>)
 8002b48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002b4e:	bf00      	nop
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <SetSysClock+0xe8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f9      	beq.n	8002b50 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <SetSysClock+0xf4>)
 8002b5e:	f240 7205 	movw	r2, #1797	; 0x705
 8002b62:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002b64:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <SetSysClock+0xe8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <SetSysClock+0xe8>)
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <SetSysClock+0xe8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <SetSysClock+0xe8>)
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8002b7c:	bf00      	nop
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <SetSysClock+0xe8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d1f9      	bne.n	8002b7e <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	07405419 	.word	0x07405419
 8002ba4:	40023c00 	.word	0x40023c00

08002ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bac:	480d      	ldr	r0, [pc, #52]	; (8002be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bb0:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <LoopForever+0xe>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb4:	e002      	b.n	8002bbc <LoopCopyDataInit>

08002bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bba:	3304      	adds	r3, #4

08002bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc0:	d3f9      	bcc.n	8002bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bc4:	4c0b      	ldr	r4, [pc, #44]	; (8002bf4 <LoopForever+0x16>)
  movs r3, #0
 8002bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc8:	e001      	b.n	8002bce <LoopFillZerobss>

08002bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bcc:	3204      	adds	r2, #4

08002bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd0:	d3fb      	bcc.n	8002bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bd2:	f7ff febb 	bl	800294c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bd6:	f000 f811 	bl	8002bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bda:	f7ff fe7f 	bl	80028dc <main>

08002bde <LoopForever>:

LoopForever:
    b LoopForever
 8002bde:	e7fe      	b.n	8002bde <LoopForever>
  ldr   r0, =_estack
 8002be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002bec:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8002bf0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002bf4:	20012de8 	.word	0x20012de8

08002bf8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf8:	e7fe      	b.n	8002bf8 <ADC_IRQHandler>
	...

08002bfc <__libc_init_array>:
 8002bfc:	b570      	push	{r4, r5, r6, lr}
 8002bfe:	4e0d      	ldr	r6, [pc, #52]	; (8002c34 <__libc_init_array+0x38>)
 8002c00:	4c0d      	ldr	r4, [pc, #52]	; (8002c38 <__libc_init_array+0x3c>)
 8002c02:	1ba4      	subs	r4, r4, r6
 8002c04:	10a4      	asrs	r4, r4, #2
 8002c06:	2500      	movs	r5, #0
 8002c08:	42a5      	cmp	r5, r4
 8002c0a:	d109      	bne.n	8002c20 <__libc_init_array+0x24>
 8002c0c:	4e0b      	ldr	r6, [pc, #44]	; (8002c3c <__libc_init_array+0x40>)
 8002c0e:	4c0c      	ldr	r4, [pc, #48]	; (8002c40 <__libc_init_array+0x44>)
 8002c10:	f000 f82c 	bl	8002c6c <_init>
 8002c14:	1ba4      	subs	r4, r4, r6
 8002c16:	10a4      	asrs	r4, r4, #2
 8002c18:	2500      	movs	r5, #0
 8002c1a:	42a5      	cmp	r5, r4
 8002c1c:	d105      	bne.n	8002c2a <__libc_init_array+0x2e>
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
 8002c20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c24:	4798      	blx	r3
 8002c26:	3501      	adds	r5, #1
 8002c28:	e7ee      	b.n	8002c08 <__libc_init_array+0xc>
 8002c2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2e:	4798      	blx	r3
 8002c30:	3501      	adds	r5, #1
 8002c32:	e7f2      	b.n	8002c1a <__libc_init_array+0x1e>
 8002c34:	08002cac 	.word	0x08002cac
 8002c38:	08002cac 	.word	0x08002cac
 8002c3c:	08002cac 	.word	0x08002cac
 8002c40:	08002cb0 	.word	0x08002cb0

08002c44 <memcpy>:
 8002c44:	b510      	push	{r4, lr}
 8002c46:	1e43      	subs	r3, r0, #1
 8002c48:	440a      	add	r2, r1
 8002c4a:	4291      	cmp	r1, r2
 8002c4c:	d100      	bne.n	8002c50 <memcpy+0xc>
 8002c4e:	bd10      	pop	{r4, pc}
 8002c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c58:	e7f7      	b.n	8002c4a <memcpy+0x6>

08002c5a <memset>:
 8002c5a:	4402      	add	r2, r0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d100      	bne.n	8002c64 <memset+0xa>
 8002c62:	4770      	bx	lr
 8002c64:	f803 1b01 	strb.w	r1, [r3], #1
 8002c68:	e7f9      	b.n	8002c5e <memset+0x4>
	...

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
